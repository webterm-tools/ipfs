/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@hapi/hoek/lib/applyToDefaults.js":
/*!********************************************************!*\
  !*** ./node_modules/@hapi/hoek/lib/applyToDefaults.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst Assert = __webpack_require__(/*! ./assert */ \"./node_modules/@hapi/hoek/lib/assert.js\");\n\nconst Clone = __webpack_require__(/*! ./clone */ \"./node_modules/@hapi/hoek/lib/clone.js\");\n\nconst Merge = __webpack_require__(/*! ./merge */ \"./node_modules/@hapi/hoek/lib/merge.js\");\n\nconst Reach = __webpack_require__(/*! ./reach */ \"./node_modules/@hapi/hoek/lib/reach.js\");\n\nconst internals = {};\n\nmodule.exports = function (defaults, source, options = {}) {\n  Assert(defaults && typeof defaults === 'object', 'Invalid defaults value: must be an object');\n  Assert(!source || source === true || typeof source === 'object', 'Invalid source value: must be true, falsy or an object');\n  Assert(typeof options === 'object', 'Invalid options: must be an object');\n\n  if (!source) {\n    // If no source, return null\n    return null;\n  }\n\n  if (options.shallow) {\n    return internals.applyToDefaultsWithShallow(defaults, source, options);\n  }\n\n  const copy = Clone(defaults);\n\n  if (source === true) {\n    // If source is set to true, use defaults\n    return copy;\n  }\n\n  const nullOverride = options.nullOverride !== undefined ? options.nullOverride : false;\n  return Merge(copy, source, {\n    nullOverride,\n    mergeArrays: false\n  });\n};\n\ninternals.applyToDefaultsWithShallow = function (defaults, source, options) {\n  const keys = options.shallow;\n  Assert(Array.isArray(keys), 'Invalid keys');\n  const seen = new Map();\n  const merge = source === true ? null : new Set();\n\n  for (let key of keys) {\n    key = Array.isArray(key) ? key : key.split('.'); // Pre-split optimization\n\n    const ref = Reach(defaults, key);\n\n    if (ref && typeof ref === 'object') {\n      seen.set(ref, merge && Reach(source, key) || ref);\n    } else if (merge) {\n      merge.add(key);\n    }\n  }\n\n  const copy = Clone(defaults, {}, seen);\n\n  if (!merge) {\n    return copy;\n  }\n\n  for (const key of merge) {\n    internals.reachCopy(copy, source, key);\n  }\n\n  const nullOverride = options.nullOverride !== undefined ? options.nullOverride : false;\n  return Merge(copy, source, {\n    nullOverride,\n    mergeArrays: false\n  });\n};\n\ninternals.reachCopy = function (dst, src, path) {\n  for (const segment of path) {\n    if (!(segment in src)) {\n      return;\n    }\n\n    const val = src[segment];\n\n    if (typeof val !== 'object' || val === null) {\n      return;\n    }\n\n    src = val;\n  }\n\n  const value = src;\n  let ref = dst;\n\n  for (let i = 0; i < path.length - 1; ++i) {\n    const segment = path[i];\n\n    if (typeof ref[segment] !== 'object') {\n      ref[segment] = {};\n    }\n\n    ref = ref[segment];\n  }\n\n  ref[path[path.length - 1]] = value;\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/@hapi/hoek/lib/applyToDefaults.js?");

/***/ }),

/***/ "./node_modules/@hapi/hoek/lib/assert.js":
/*!***********************************************!*\
  !*** ./node_modules/@hapi/hoek/lib/assert.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst AssertError = __webpack_require__(/*! ./error */ \"./node_modules/@hapi/hoek/lib/error.js\");\n\nconst internals = {};\n\nmodule.exports = function (condition, ...args) {\n  if (condition) {\n    return;\n  }\n\n  if (args.length === 1 && args[0] instanceof Error) {\n    throw args[0];\n  }\n\n  throw new AssertError(args);\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/@hapi/hoek/lib/assert.js?");

/***/ }),

/***/ "./node_modules/@hapi/hoek/lib/clone.js":
/*!**********************************************!*\
  !*** ./node_modules/@hapi/hoek/lib/clone.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst Reach = __webpack_require__(/*! ./reach */ \"./node_modules/@hapi/hoek/lib/reach.js\");\n\nconst Types = __webpack_require__(/*! ./types */ \"./node_modules/@hapi/hoek/lib/types.js\");\n\nconst Utils = __webpack_require__(/*! ./utils */ \"./node_modules/@hapi/hoek/lib/utils.js\");\n\nconst internals = {\n  needsProtoHack: new Set([Types.set, Types.map, Types.weakSet, Types.weakMap])\n};\n\nmodule.exports = internals.clone = function (obj, options = {}, _seen = null) {\n  if (typeof obj !== 'object' || obj === null) {\n    return obj;\n  }\n\n  let clone = internals.clone;\n  let seen = _seen;\n\n  if (options.shallow) {\n    if (options.shallow !== true) {\n      return internals.cloneWithShallow(obj, options);\n    }\n\n    clone = value => value;\n  } else if (seen) {\n    const lookup = seen.get(obj);\n\n    if (lookup) {\n      return lookup;\n    }\n  } else {\n    seen = new Map();\n  } // Built-in object types\n\n\n  const baseProto = Types.getInternalProto(obj);\n\n  if (baseProto === Types.buffer) {\n    return Buffer && Buffer.from(obj); // $lab:coverage:ignore$\n  }\n\n  if (baseProto === Types.date) {\n    return new Date(obj.getTime());\n  }\n\n  if (baseProto === Types.regex) {\n    return new RegExp(obj);\n  } // Generic objects\n\n\n  const newObj = internals.base(obj, baseProto, options);\n\n  if (newObj === obj) {\n    return obj;\n  }\n\n  if (seen) {\n    seen.set(obj, newObj); // Set seen, since obj could recurse\n  }\n\n  if (baseProto === Types.set) {\n    for (const value of obj) {\n      newObj.add(clone(value, options, seen));\n    }\n  } else if (baseProto === Types.map) {\n    for (const [key, value] of obj) {\n      newObj.set(key, clone(value, options, seen));\n    }\n  }\n\n  const keys = Utils.keys(obj, options);\n\n  for (const key of keys) {\n    if (key === '__proto__') {\n      continue;\n    }\n\n    if (baseProto === Types.array && key === 'length') {\n      newObj.length = obj.length;\n      continue;\n    }\n\n    const descriptor = Object.getOwnPropertyDescriptor(obj, key);\n\n    if (descriptor) {\n      if (descriptor.get || descriptor.set) {\n        Object.defineProperty(newObj, key, descriptor);\n      } else if (descriptor.enumerable) {\n        newObj[key] = clone(obj[key], options, seen);\n      } else {\n        Object.defineProperty(newObj, key, {\n          enumerable: false,\n          writable: true,\n          configurable: true,\n          value: clone(obj[key], options, seen)\n        });\n      }\n    } else {\n      Object.defineProperty(newObj, key, {\n        enumerable: true,\n        writable: true,\n        configurable: true,\n        value: clone(obj[key], options, seen)\n      });\n    }\n  }\n\n  return newObj;\n};\n\ninternals.cloneWithShallow = function (source, options) {\n  const keys = options.shallow;\n  options = Object.assign({}, options);\n  options.shallow = false;\n  const seen = new Map();\n\n  for (const key of keys) {\n    const ref = Reach(source, key);\n\n    if (typeof ref === 'object' || typeof ref === 'function') {\n      seen.set(ref, ref);\n    }\n  }\n\n  return internals.clone(source, options, seen);\n};\n\ninternals.base = function (obj, baseProto, options) {\n  if (options.prototype === false) {\n    // Defaults to true\n    if (internals.needsProtoHack.has(baseProto)) {\n      return new baseProto.constructor();\n    }\n\n    return baseProto === Types.array ? [] : {};\n  }\n\n  const proto = Object.getPrototypeOf(obj);\n\n  if (proto && proto.isImmutable) {\n    return obj;\n  }\n\n  if (baseProto === Types.array) {\n    const newObj = [];\n\n    if (proto !== baseProto) {\n      Object.setPrototypeOf(newObj, proto);\n    }\n\n    return newObj;\n  }\n\n  if (internals.needsProtoHack.has(baseProto)) {\n    const newObj = new proto.constructor();\n\n    if (proto !== baseProto) {\n      Object.setPrototypeOf(newObj, proto);\n    }\n\n    return newObj;\n  }\n\n  return Object.create(proto);\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/@hapi/hoek/lib/clone.js?");

/***/ }),

/***/ "./node_modules/@hapi/hoek/lib/deepEqual.js":
/*!**************************************************!*\
  !*** ./node_modules/@hapi/hoek/lib/deepEqual.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst Types = __webpack_require__(/*! ./types */ \"./node_modules/@hapi/hoek/lib/types.js\");\n\nconst internals = {\n  mismatched: null\n};\n\nmodule.exports = function (obj, ref, options) {\n  options = Object.assign({\n    prototype: true\n  }, options);\n  return !!internals.isDeepEqual(obj, ref, options, []);\n};\n\ninternals.isDeepEqual = function (obj, ref, options, seen) {\n  if (obj === ref) {\n    // Copied from Deep-eql, copyright(c) 2013 Jake Luer, jake@alogicalparadox.com, MIT Licensed, https://github.com/chaijs/deep-eql\n    return obj !== 0 || 1 / obj === 1 / ref;\n  }\n\n  const type = typeof obj;\n\n  if (type !== typeof ref) {\n    return false;\n  }\n\n  if (obj === null || ref === null) {\n    return false;\n  }\n\n  if (type === 'function') {\n    if (!options.deepFunction || obj.toString() !== ref.toString()) {\n      return false;\n    } // Continue as object\n\n  } else if (type !== 'object') {\n    return obj !== obj && ref !== ref; // NaN\n  }\n\n  const instanceType = internals.getSharedType(obj, ref, !!options.prototype);\n\n  switch (instanceType) {\n    case Types.buffer:\n      return Buffer && Buffer.prototype.equals.call(obj, ref);\n    // $lab:coverage:ignore$\n\n    case Types.promise:\n      return obj === ref;\n\n    case Types.regex:\n      return obj.toString() === ref.toString();\n\n    case internals.mismatched:\n      return false;\n  }\n\n  for (let i = seen.length - 1; i >= 0; --i) {\n    if (seen[i].isSame(obj, ref)) {\n      return true; // If previous comparison failed, it would have stopped execution\n    }\n  }\n\n  seen.push(new internals.SeenEntry(obj, ref));\n\n  try {\n    return !!internals.isDeepEqualObj(instanceType, obj, ref, options, seen);\n  } finally {\n    seen.pop();\n  }\n};\n\ninternals.getSharedType = function (obj, ref, checkPrototype) {\n  if (checkPrototype) {\n    if (Object.getPrototypeOf(obj) !== Object.getPrototypeOf(ref)) {\n      return internals.mismatched;\n    }\n\n    return Types.getInternalProto(obj);\n  }\n\n  const type = Types.getInternalProto(obj);\n\n  if (type !== Types.getInternalProto(ref)) {\n    return internals.mismatched;\n  }\n\n  return type;\n};\n\ninternals.valueOf = function (obj) {\n  const objValueOf = obj.valueOf;\n\n  if (objValueOf === undefined) {\n    return obj;\n  }\n\n  try {\n    return objValueOf.call(obj);\n  } catch (err) {\n    return err;\n  }\n};\n\ninternals.hasOwnEnumerableProperty = function (obj, key) {\n  return Object.prototype.propertyIsEnumerable.call(obj, key);\n};\n\ninternals.isSetSimpleEqual = function (obj, ref) {\n  for (const entry of Set.prototype.values.call(obj)) {\n    if (!Set.prototype.has.call(ref, entry)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\ninternals.isDeepEqualObj = function (instanceType, obj, ref, options, seen) {\n  const {\n    isDeepEqual,\n    valueOf,\n    hasOwnEnumerableProperty\n  } = internals;\n  const {\n    keys,\n    getOwnPropertySymbols\n  } = Object;\n\n  if (instanceType === Types.array) {\n    if (options.part) {\n      // Check if any index match any other index\n      for (const objValue of obj) {\n        for (const refValue of ref) {\n          if (isDeepEqual(objValue, refValue, options, seen)) {\n            return true;\n          }\n        }\n      }\n    } else {\n      if (obj.length !== ref.length) {\n        return false;\n      }\n\n      for (let i = 0; i < obj.length; ++i) {\n        if (!isDeepEqual(obj[i], ref[i], options, seen)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  } else if (instanceType === Types.set) {\n    if (obj.size !== ref.size) {\n      return false;\n    }\n\n    if (!internals.isSetSimpleEqual(obj, ref)) {\n      // Check for deep equality\n      const ref2 = new Set(Set.prototype.values.call(ref));\n\n      for (const objEntry of Set.prototype.values.call(obj)) {\n        if (ref2.delete(objEntry)) {\n          continue;\n        }\n\n        let found = false;\n\n        for (const refEntry of ref2) {\n          if (isDeepEqual(objEntry, refEntry, options, seen)) {\n            ref2.delete(refEntry);\n            found = true;\n            break;\n          }\n        }\n\n        if (!found) {\n          return false;\n        }\n      }\n    }\n  } else if (instanceType === Types.map) {\n    if (obj.size !== ref.size) {\n      return false;\n    }\n\n    for (const [key, value] of Map.prototype.entries.call(obj)) {\n      if (value === undefined && !Map.prototype.has.call(ref, key)) {\n        return false;\n      }\n\n      if (!isDeepEqual(value, Map.prototype.get.call(ref, key), options, seen)) {\n        return false;\n      }\n    }\n  } else if (instanceType === Types.error) {\n    // Always check name and message\n    if (obj.name !== ref.name || obj.message !== ref.message) {\n      return false;\n    }\n  } // Check .valueOf()\n\n\n  const valueOfObj = valueOf(obj);\n  const valueOfRef = valueOf(ref);\n\n  if ((obj !== valueOfObj || ref !== valueOfRef) && !isDeepEqual(valueOfObj, valueOfRef, options, seen)) {\n    return false;\n  } // Check properties\n\n\n  const objKeys = keys(obj);\n\n  if (!options.part && objKeys.length !== keys(ref).length && !options.skip) {\n    return false;\n  }\n\n  let skipped = 0;\n\n  for (const key of objKeys) {\n    if (options.skip && options.skip.includes(key)) {\n      if (ref[key] === undefined) {\n        ++skipped;\n      }\n\n      continue;\n    }\n\n    if (!hasOwnEnumerableProperty(ref, key)) {\n      return false;\n    }\n\n    if (!isDeepEqual(obj[key], ref[key], options, seen)) {\n      return false;\n    }\n  }\n\n  if (!options.part && objKeys.length - skipped !== keys(ref).length) {\n    return false;\n  } // Check symbols\n\n\n  if (options.symbols !== false) {\n    // Defaults to true\n    const objSymbols = getOwnPropertySymbols(obj);\n    const refSymbols = new Set(getOwnPropertySymbols(ref));\n\n    for (const key of objSymbols) {\n      if (!options.skip || !options.skip.includes(key)) {\n        if (hasOwnEnumerableProperty(obj, key)) {\n          if (!hasOwnEnumerableProperty(ref, key)) {\n            return false;\n          }\n\n          if (!isDeepEqual(obj[key], ref[key], options, seen)) {\n            return false;\n          }\n        } else if (hasOwnEnumerableProperty(ref, key)) {\n          return false;\n        }\n      }\n\n      refSymbols.delete(key);\n    }\n\n    for (const key of refSymbols) {\n      if (hasOwnEnumerableProperty(ref, key)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n\ninternals.SeenEntry = class {\n  constructor(obj, ref) {\n    this.obj = obj;\n    this.ref = ref;\n  }\n\n  isSame(obj, ref) {\n    return this.obj === obj && this.ref === ref;\n  }\n\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/@hapi/hoek/lib/deepEqual.js?");

/***/ }),

/***/ "./node_modules/@hapi/hoek/lib/error.js":
/*!**********************************************!*\
  !*** ./node_modules/@hapi/hoek/lib/error.js ***!
  \**********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nconst Stringify = __webpack_require__(/*! ./stringify */ \"./node_modules/@hapi/hoek/lib/stringify.js\");\n\nconst internals = {};\nmodule.exports = class extends Error {\n  constructor(args) {\n    const msgs = args.filter(arg => arg !== '').map(arg => {\n      return typeof arg === 'string' ? arg : arg instanceof Error ? arg.message : Stringify(arg);\n    });\n    super(msgs.join(' ') || 'Unknown error');\n\n    if (typeof Error.captureStackTrace === 'function') {\n      // $lab:coverage:ignore$\n      Error.captureStackTrace(this, exports.assert);\n    }\n  }\n\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/@hapi/hoek/lib/error.js?");

/***/ }),

/***/ "./node_modules/@hapi/hoek/lib/escapeHtml.js":
/*!***************************************************!*\
  !*** ./node_modules/@hapi/hoek/lib/escapeHtml.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\n\nconst internals = {};\n\nmodule.exports = function (input) {\n  if (!input) {\n    return '';\n  }\n\n  let escaped = '';\n\n  for (let i = 0; i < input.length; ++i) {\n    const charCode = input.charCodeAt(i);\n\n    if (internals.isSafe(charCode)) {\n      escaped += input[i];\n    } else {\n      escaped += internals.escapeHtmlChar(charCode);\n    }\n  }\n\n  return escaped;\n};\n\ninternals.escapeHtmlChar = function (charCode) {\n  const namedEscape = internals.namedHtml[charCode];\n\n  if (typeof namedEscape !== 'undefined') {\n    return namedEscape;\n  }\n\n  if (charCode >= 256) {\n    return '&#' + charCode + ';';\n  }\n\n  const hexValue = charCode.toString(16).padStart(2, '0');\n  return `&#x${hexValue};`;\n};\n\ninternals.isSafe = function (charCode) {\n  return typeof internals.safeCharCodes[charCode] !== 'undefined';\n};\n\ninternals.namedHtml = {\n  '38': '&amp;',\n  '60': '&lt;',\n  '62': '&gt;',\n  '34': '&quot;',\n  '160': '&nbsp;',\n  '162': '&cent;',\n  '163': '&pound;',\n  '164': '&curren;',\n  '169': '&copy;',\n  '174': '&reg;'\n};\n\ninternals.safeCharCodes = function () {\n  const safe = {};\n\n  for (let i = 32; i < 123; ++i) {\n    if (i >= 97 || // a-z\n    i >= 65 && i <= 90 || // A-Z\n    i >= 48 && i <= 57 || // 0-9\n    i === 32 || // space\n    i === 46 || // .\n    i === 44 || // ,\n    i === 45 || // -\n    i === 58 || // :\n    i === 95) {\n      // _\n      safe[i] = null;\n    }\n  }\n\n  return safe;\n}();\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/@hapi/hoek/lib/escapeHtml.js?");

/***/ }),

/***/ "./node_modules/@hapi/hoek/lib/escapeRegex.js":
/*!****************************************************!*\
  !*** ./node_modules/@hapi/hoek/lib/escapeRegex.js ***!
  \****************************************************/
/***/ ((module) => {

eval("\n\nconst internals = {};\n\nmodule.exports = function (string) {\n  // Escape ^$.*+-?=!:|\\/()[]{},\n  return string.replace(/[\\^\\$\\.\\*\\+\\-\\?\\=\\!\\:\\|\\\\\\/\\(\\)\\[\\]\\{\\}\\,]/g, '\\\\$&');\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/@hapi/hoek/lib/escapeRegex.js?");

/***/ }),

/***/ "./node_modules/@hapi/hoek/lib/ignore.js":
/*!***********************************************!*\
  !*** ./node_modules/@hapi/hoek/lib/ignore.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nconst internals = {};\n\nmodule.exports = function () {};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/@hapi/hoek/lib/ignore.js?");

/***/ }),

/***/ "./node_modules/@hapi/hoek/lib/merge.js":
/*!**********************************************!*\
  !*** ./node_modules/@hapi/hoek/lib/merge.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst Assert = __webpack_require__(/*! ./assert */ \"./node_modules/@hapi/hoek/lib/assert.js\");\n\nconst Clone = __webpack_require__(/*! ./clone */ \"./node_modules/@hapi/hoek/lib/clone.js\");\n\nconst Utils = __webpack_require__(/*! ./utils */ \"./node_modules/@hapi/hoek/lib/utils.js\");\n\nconst internals = {};\n\nmodule.exports = internals.merge = function (target, source, options) {\n  Assert(target && typeof target === 'object', 'Invalid target value: must be an object');\n  Assert(source === null || source === undefined || typeof source === 'object', 'Invalid source value: must be null, undefined, or an object');\n\n  if (!source) {\n    return target;\n  }\n\n  options = Object.assign({\n    nullOverride: true,\n    mergeArrays: true\n  }, options);\n\n  if (Array.isArray(source)) {\n    Assert(Array.isArray(target), 'Cannot merge array onto an object');\n\n    if (!options.mergeArrays) {\n      target.length = 0; // Must not change target assignment\n    }\n\n    for (let i = 0; i < source.length; ++i) {\n      target.push(Clone(source[i], {\n        symbols: options.symbols\n      }));\n    }\n\n    return target;\n  }\n\n  const keys = Utils.keys(source, options);\n\n  for (let i = 0; i < keys.length; ++i) {\n    const key = keys[i];\n\n    if (key === '__proto__' || !Object.prototype.propertyIsEnumerable.call(source, key)) {\n      continue;\n    }\n\n    const value = source[key];\n\n    if (value && typeof value === 'object') {\n      if (target[key] === value) {\n        continue; // Can occur for shallow merges\n      }\n\n      if (!target[key] || typeof target[key] !== 'object' || Array.isArray(target[key]) !== Array.isArray(value) || value instanceof Date || Buffer && Buffer.isBuffer(value) || // $lab:coverage:ignore$\n      value instanceof RegExp) {\n        target[key] = Clone(value, {\n          symbols: options.symbols\n        });\n      } else {\n        internals.merge(target[key], value, options);\n      }\n    } else {\n      if (value !== null && value !== undefined) {\n        // Explicit to preserve empty strings\n        target[key] = value;\n      } else if (options.nullOverride) {\n        target[key] = value;\n      }\n    }\n  }\n\n  return target;\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/@hapi/hoek/lib/merge.js?");

/***/ }),

/***/ "./node_modules/@hapi/hoek/lib/reach.js":
/*!**********************************************!*\
  !*** ./node_modules/@hapi/hoek/lib/reach.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst Assert = __webpack_require__(/*! ./assert */ \"./node_modules/@hapi/hoek/lib/assert.js\");\n\nconst internals = {};\n\nmodule.exports = function (obj, chain, options) {\n  if (chain === false || chain === null || chain === undefined) {\n    return obj;\n  }\n\n  options = options || {};\n\n  if (typeof options === 'string') {\n    options = {\n      separator: options\n    };\n  }\n\n  const isChainArray = Array.isArray(chain);\n  Assert(!isChainArray || !options.separator, 'Separator option no valid for array-based chain');\n  const path = isChainArray ? chain : chain.split(options.separator || '.');\n  let ref = obj;\n\n  for (let i = 0; i < path.length; ++i) {\n    let key = path[i];\n    const type = options.iterables && internals.iterables(ref);\n\n    if (Array.isArray(ref) || type === 'set') {\n      const number = Number(key);\n\n      if (Number.isInteger(number)) {\n        key = number < 0 ? ref.length + number : number;\n      }\n    }\n\n    if (!ref || typeof ref === 'function' && options.functions === false || // Defaults to true\n    !type && ref[key] === undefined) {\n      Assert(!options.strict || i + 1 === path.length, 'Missing segment', key, 'in reach path ', chain);\n      Assert(typeof ref === 'object' || options.functions === true || typeof ref !== 'function', 'Invalid segment', key, 'in reach path ', chain);\n      ref = options.default;\n      break;\n    }\n\n    if (!type) {\n      ref = ref[key];\n    } else if (type === 'set') {\n      ref = [...ref][key];\n    } else {\n      // type === 'map'\n      ref = ref.get(key);\n    }\n  }\n\n  return ref;\n};\n\ninternals.iterables = function (ref) {\n  if (ref instanceof Set) {\n    return 'set';\n  }\n\n  if (ref instanceof Map) {\n    return 'map';\n  }\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/@hapi/hoek/lib/reach.js?");

/***/ }),

/***/ "./node_modules/@hapi/hoek/lib/stringify.js":
/*!**************************************************!*\
  !*** ./node_modules/@hapi/hoek/lib/stringify.js ***!
  \**************************************************/
/***/ ((module) => {

eval("\n\nconst internals = {};\n\nmodule.exports = function (...args) {\n  try {\n    return JSON.stringify.apply(null, args);\n  } catch (err) {\n    return '[Cannot display object: ' + err.message + ']';\n  }\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/@hapi/hoek/lib/stringify.js?");

/***/ }),

/***/ "./node_modules/@hapi/hoek/lib/types.js":
/*!**********************************************!*\
  !*** ./node_modules/@hapi/hoek/lib/types.js ***!
  \**********************************************/
/***/ ((module, exports) => {

eval("\n\nconst internals = {};\nexports = module.exports = {\n  array: Array.prototype,\n  buffer: Buffer && Buffer.prototype,\n  // $lab:coverage:ignore$\n  date: Date.prototype,\n  error: Error.prototype,\n  generic: Object.prototype,\n  map: Map.prototype,\n  promise: Promise.prototype,\n  regex: RegExp.prototype,\n  set: Set.prototype,\n  weakMap: WeakMap.prototype,\n  weakSet: WeakSet.prototype\n};\ninternals.typeMap = new Map([['[object Error]', exports.error], ['[object Map]', exports.map], ['[object Promise]', exports.promise], ['[object Set]', exports.set], ['[object WeakMap]', exports.weakMap], ['[object WeakSet]', exports.weakSet]]);\n\nexports.getInternalProto = function (obj) {\n  if (Array.isArray(obj)) {\n    return exports.array;\n  }\n\n  if (Buffer && obj instanceof Buffer) {\n    // $lab:coverage:ignore$\n    return exports.buffer;\n  }\n\n  if (obj instanceof Date) {\n    return exports.date;\n  }\n\n  if (obj instanceof RegExp) {\n    return exports.regex;\n  }\n\n  if (obj instanceof Error) {\n    return exports.error;\n  }\n\n  const objName = Object.prototype.toString.call(obj);\n  return internals.typeMap.get(objName) || exports.generic;\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/@hapi/hoek/lib/types.js?");

/***/ }),

/***/ "./node_modules/@hapi/hoek/lib/utils.js":
/*!**********************************************!*\
  !*** ./node_modules/@hapi/hoek/lib/utils.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nconst internals = {};\n\nexports.keys = function (obj, options = {}) {\n  return options.symbols !== false ? Reflect.ownKeys(obj) : Object.getOwnPropertyNames(obj); // Defaults to true\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/@hapi/hoek/lib/utils.js?");

/***/ }),

/***/ "./node_modules/@hapi/topo/lib/index.js":
/*!**********************************************!*\
  !*** ./node_modules/@hapi/topo/lib/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"./node_modules/@hapi/hoek/lib/assert.js\");\n\nconst internals = {};\nexports.Sorter = class {\n  constructor() {\n    this._items = [];\n    this.nodes = [];\n  }\n\n  add(nodes, options) {\n    options = options || {}; // Validate rules\n\n    const before = [].concat(options.before || []);\n    const after = [].concat(options.after || []);\n    const group = options.group || '?';\n    const sort = options.sort || 0; // Used for merging only\n\n    Assert(!before.includes(group), `Item cannot come before itself: ${group}`);\n    Assert(!before.includes('?'), 'Item cannot come before unassociated items');\n    Assert(!after.includes(group), `Item cannot come after itself: ${group}`);\n    Assert(!after.includes('?'), 'Item cannot come after unassociated items');\n\n    if (!Array.isArray(nodes)) {\n      nodes = [nodes];\n    }\n\n    for (const node of nodes) {\n      const item = {\n        seq: this._items.length,\n        sort,\n        before,\n        after,\n        group,\n        node\n      };\n\n      this._items.push(item);\n    } // Insert event\n\n\n    if (!options.manual) {\n      const valid = this._sort();\n\n      Assert(valid, 'item', group !== '?' ? `added into group ${group}` : '', 'created a dependencies error');\n    }\n\n    return this.nodes;\n  }\n\n  merge(others) {\n    if (!Array.isArray(others)) {\n      others = [others];\n    }\n\n    for (const other of others) {\n      if (other) {\n        for (const item of other._items) {\n          this._items.push(Object.assign({}, item)); // Shallow cloned\n\n        }\n      }\n    } // Sort items\n\n\n    this._items.sort(internals.mergeSort);\n\n    for (let i = 0; i < this._items.length; ++i) {\n      this._items[i].seq = i;\n    }\n\n    const valid = this._sort();\n\n    Assert(valid, 'merge created a dependencies error');\n    return this.nodes;\n  }\n\n  sort() {\n    const valid = this._sort();\n\n    Assert(valid, 'sort created a dependencies error');\n    return this.nodes;\n  }\n\n  _sort() {\n    // Construct graph\n    const graph = {};\n    const graphAfters = Object.create(null); // A prototype can bungle lookups w/ false positives\n\n    const groups = Object.create(null);\n\n    for (const item of this._items) {\n      const seq = item.seq; // Unique across all items\n\n      const group = item.group; // Determine Groups\n\n      groups[group] = groups[group] || [];\n      groups[group].push(seq); // Build intermediary graph using 'before'\n\n      graph[seq] = item.before; // Build second intermediary graph with 'after'\n\n      for (const after of item.after) {\n        graphAfters[after] = graphAfters[after] || [];\n        graphAfters[after].push(seq);\n      }\n    } // Expand intermediary graph\n\n\n    for (const node in graph) {\n      const expandedGroups = [];\n\n      for (const graphNodeItem in graph[node]) {\n        const group = graph[node][graphNodeItem];\n        groups[group] = groups[group] || [];\n        expandedGroups.push(...groups[group]);\n      }\n\n      graph[node] = expandedGroups;\n    } // Merge intermediary graph using graphAfters into final graph\n\n\n    for (const group in graphAfters) {\n      if (groups[group]) {\n        for (const node of groups[group]) {\n          graph[node].push(...graphAfters[group]);\n        }\n      }\n    } // Compile ancestors\n\n\n    const ancestors = {};\n\n    for (const node in graph) {\n      const children = graph[node];\n\n      for (const child of children) {\n        ancestors[child] = ancestors[child] || [];\n        ancestors[child].push(node);\n      }\n    } // Topo sort\n\n\n    const visited = {};\n    const sorted = [];\n\n    for (let i = 0; i < this._items.length; ++i) {\n      // Looping through item.seq values out of order\n      let next = i;\n\n      if (ancestors[i]) {\n        next = null;\n\n        for (let j = 0; j < this._items.length; ++j) {\n          // As above, these are item.seq values\n          if (visited[j] === true) {\n            continue;\n          }\n\n          if (!ancestors[j]) {\n            ancestors[j] = [];\n          }\n\n          const shouldSeeCount = ancestors[j].length;\n          let seenCount = 0;\n\n          for (let k = 0; k < shouldSeeCount; ++k) {\n            if (visited[ancestors[j][k]]) {\n              ++seenCount;\n            }\n          }\n\n          if (seenCount === shouldSeeCount) {\n            next = j;\n            break;\n          }\n        }\n      }\n\n      if (next !== null) {\n        visited[next] = true;\n        sorted.push(next);\n      }\n    }\n\n    if (sorted.length !== this._items.length) {\n      return false;\n    }\n\n    const seqIndex = {};\n\n    for (const item of this._items) {\n      seqIndex[item.seq] = item;\n    }\n\n    this._items = [];\n    this.nodes = [];\n\n    for (const value of sorted) {\n      const sortedItem = seqIndex[value];\n      this.nodes.push(sortedItem.node);\n\n      this._items.push(sortedItem);\n    }\n\n    return true;\n  }\n\n};\n\ninternals.mergeSort = (a, b) => {\n  return a.sort === b.sort ? 0 : a.sort < b.sort ? -1 : 1;\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/@hapi/topo/lib/index.js?");

/***/ }),

/***/ "./node_modules/@sideway/address/lib/domain.js":
/*!*****************************************************!*\
  !*** ./node_modules/@sideway/address/lib/domain.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nconst Url = __webpack_require__(/*! url */ \"url\");\n\nconst Errors = __webpack_require__(/*! ./errors */ \"./node_modules/@sideway/address/lib/errors.js\");\n\nconst internals = {\n  minDomainSegments: 2,\n  nonAsciiRx: /[^\\x00-\\x7f]/,\n  domainControlRx: /[\\x00-\\x20@\\:\\/\\\\#!\\$&\\'\\(\\)\\*\\+,;=\\?]/,\n  // Control + space + separators\n  tldSegmentRx: /^[a-zA-Z](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?$/,\n  domainSegmentRx: /^[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?$/,\n  URL: Url.URL || URL // $lab:coverage:ignore$\n\n};\n\nexports.analyze = function (domain, options = {}) {\n  if (typeof domain !== 'string') {\n    throw new Error('Invalid input: domain must be a string');\n  }\n\n  if (!domain) {\n    return Errors.code('DOMAIN_NON_EMPTY_STRING');\n  }\n\n  if (domain.length > 256) {\n    return Errors.code('DOMAIN_TOO_LONG');\n  }\n\n  const ascii = !internals.nonAsciiRx.test(domain);\n\n  if (!ascii) {\n    if (options.allowUnicode === false) {\n      // Defaults to true\n      return Errors.code('DOMAIN_INVALID_UNICODE_CHARS');\n    }\n\n    domain = domain.normalize('NFC');\n  }\n\n  if (internals.domainControlRx.test(domain)) {\n    return Errors.code('DOMAIN_INVALID_CHARS');\n  }\n\n  domain = internals.punycode(domain); // https://tools.ietf.org/html/rfc1035 section 2.3.1\n\n  const minDomainSegments = options.minDomainSegments || internals.minDomainSegments;\n  const segments = domain.split('.');\n\n  if (segments.length < minDomainSegments) {\n    return Errors.code('DOMAIN_SEGMENTS_COUNT');\n  }\n\n  if (options.maxDomainSegments) {\n    if (segments.length > options.maxDomainSegments) {\n      return Errors.code('DOMAIN_SEGMENTS_COUNT_MAX');\n    }\n  }\n\n  const tlds = options.tlds;\n\n  if (tlds) {\n    const tld = segments[segments.length - 1].toLowerCase();\n\n    if (tlds.deny && tlds.deny.has(tld) || tlds.allow && !tlds.allow.has(tld)) {\n      return Errors.code('DOMAIN_FORBIDDEN_TLDS');\n    }\n  }\n\n  for (let i = 0; i < segments.length; ++i) {\n    const segment = segments[i];\n\n    if (!segment.length) {\n      return Errors.code('DOMAIN_EMPTY_SEGMENT');\n    }\n\n    if (segment.length > 63) {\n      return Errors.code('DOMAIN_LONG_SEGMENT');\n    }\n\n    if (i < segments.length - 1) {\n      if (!internals.domainSegmentRx.test(segment)) {\n        return Errors.code('DOMAIN_INVALID_CHARS');\n      }\n    } else {\n      if (!internals.tldSegmentRx.test(segment)) {\n        return Errors.code('DOMAIN_INVALID_TLDS_CHARS');\n      }\n    }\n  }\n\n  return null;\n};\n\nexports.isValid = function (domain, options) {\n  return !exports.analyze(domain, options);\n};\n\ninternals.punycode = function (domain) {\n  try {\n    return new internals.URL(`http://${domain}`).host;\n  } catch (err) {\n    return domain;\n  }\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/@sideway/address/lib/domain.js?");

/***/ }),

/***/ "./node_modules/@sideway/address/lib/email.js":
/*!****************************************************!*\
  !*** ./node_modules/@sideway/address/lib/email.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nconst Util = __webpack_require__(/*! util */ \"util\");\n\nconst Domain = __webpack_require__(/*! ./domain */ \"./node_modules/@sideway/address/lib/domain.js\");\n\nconst Errors = __webpack_require__(/*! ./errors */ \"./node_modules/@sideway/address/lib/errors.js\");\n\nconst internals = {\n  nonAsciiRx: /[^\\x00-\\x7f]/,\n  encoder: new (Util.TextEncoder || TextEncoder)() // $lab:coverage:ignore$\n\n};\n\nexports.analyze = function (email, options) {\n  return internals.email(email, options);\n};\n\nexports.isValid = function (email, options) {\n  return !internals.email(email, options);\n};\n\ninternals.email = function (email, options = {}) {\n  if (typeof email !== 'string') {\n    throw new Error('Invalid input: email must be a string');\n  }\n\n  if (!email) {\n    return Errors.code('EMPTY_STRING');\n  } // Unicode\n\n\n  const ascii = !internals.nonAsciiRx.test(email);\n\n  if (!ascii) {\n    if (options.allowUnicode === false) {\n      // Defaults to true\n      return Errors.code('FORBIDDEN_UNICODE');\n    }\n\n    email = email.normalize('NFC');\n  } // Basic structure\n\n\n  const parts = email.split('@');\n\n  if (parts.length !== 2) {\n    return parts.length > 2 ? Errors.code('MULTIPLE_AT_CHAR') : Errors.code('MISSING_AT_CHAR');\n  }\n\n  const [local, domain] = parts;\n\n  if (!local) {\n    return Errors.code('EMPTY_LOCAL');\n  }\n\n  if (!options.ignoreLength) {\n    if (email.length > 254) {\n      // http://tools.ietf.org/html/rfc5321#section-4.5.3.1.3\n      return Errors.code('ADDRESS_TOO_LONG');\n    }\n\n    if (internals.encoder.encode(local).length > 64) {\n      // http://tools.ietf.org/html/rfc5321#section-4.5.3.1.1\n      return Errors.code('LOCAL_TOO_LONG');\n    }\n  } // Validate parts\n\n\n  return internals.local(local, ascii) || Domain.analyze(domain, options);\n};\n\ninternals.local = function (local, ascii) {\n  const segments = local.split('.');\n\n  for (const segment of segments) {\n    if (!segment.length) {\n      return Errors.code('EMPTY_LOCAL_SEGMENT');\n    }\n\n    if (ascii) {\n      if (!internals.atextRx.test(segment)) {\n        return Errors.code('INVALID_LOCAL_CHARS');\n      }\n\n      continue;\n    }\n\n    for (const char of segment) {\n      if (internals.atextRx.test(char)) {\n        continue;\n      }\n\n      const binary = internals.binary(char);\n\n      if (!internals.atomRx.test(binary)) {\n        return Errors.code('INVALID_LOCAL_CHARS');\n      }\n    }\n  }\n};\n\ninternals.binary = function (char) {\n  return Array.from(internals.encoder.encode(char)).map(v => String.fromCharCode(v)).join('');\n};\n/*\n    From RFC 5321:\n\n        Mailbox         =   Local-part \"@\" ( Domain / address-literal )\n\n        Local-part      =   Dot-string / Quoted-string\n        Dot-string      =   Atom *(\".\"  Atom)\n        Atom            =   1*atext\n        atext           =   ALPHA / DIGIT / \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\" / \"+\" / \"-\" / \"/\" / \"=\" / \"?\" / \"^\" / \"_\" / \"`\" / \"{\" / \"|\" / \"}\" / \"~\"\n\n        Domain          =   sub-domain *(\".\" sub-domain)\n        sub-domain      =   Let-dig [Ldh-str]\n        Let-dig         =   ALPHA / DIGIT\n        Ldh-str         =   *( ALPHA / DIGIT / \"-\" ) Let-dig\n\n        ALPHA           =   %x41-5A / %x61-7A        ; a-z, A-Z\n        DIGIT           =   %x30-39                  ; 0-9\n\n    From RFC 6531:\n\n        sub-domain      =/  U-label\n        atext           =/  UTF8-non-ascii\n\n        UTF8-non-ascii  =   UTF8-2 / UTF8-3 / UTF8-4\n\n        UTF8-2          =   %xC2-DF UTF8-tail\n        UTF8-3          =   %xE0 %xA0-BF UTF8-tail /\n                            %xE1-EC 2( UTF8-tail ) /\n                            %xED %x80-9F UTF8-tail /\n                            %xEE-EF 2( UTF8-tail )\n        UTF8-4          =   %xF0 %x90-BF 2( UTF8-tail ) /\n                            %xF1-F3 3( UTF8-tail ) /\n                            %xF4 %x80-8F 2( UTF8-tail )\n\n        UTF8-tail       =   %x80-BF\n\n    Note: The following are not supported:\n\n        RFC 5321: address-literal, Quoted-string\n        RFC 5322: obs-*, CFWS\n*/\n\n\ninternals.atextRx = /^[\\w!#\\$%&'\\*\\+\\-/=\\?\\^`\\{\\|\\}~]+$/; // _ included in \\w\n\ninternals.atomRx = new RegExp([//  %xC2-DF UTF8-tail\n'(?:[\\\\xc2-\\\\xdf][\\\\x80-\\\\xbf])', //  %xE0 %xA0-BF UTF8-tail              %xE1-EC 2( UTF8-tail )            %xED %x80-9F UTF8-tail              %xEE-EF 2( UTF8-tail )\n'(?:\\\\xe0[\\\\xa0-\\\\xbf][\\\\x80-\\\\xbf])|(?:[\\\\xe1-\\\\xec][\\\\x80-\\\\xbf]{2})|(?:\\\\xed[\\\\x80-\\\\x9f][\\\\x80-\\\\xbf])|(?:[\\\\xee-\\\\xef][\\\\x80-\\\\xbf]{2})', //  %xF0 %x90-BF 2( UTF8-tail )            %xF1-F3 3( UTF8-tail )            %xF4 %x80-8F 2( UTF8-tail )\n'(?:\\\\xf0[\\\\x90-\\\\xbf][\\\\x80-\\\\xbf]{2})|(?:[\\\\xf1-\\\\xf3][\\\\x80-\\\\xbf]{3})|(?:\\\\xf4[\\\\x80-\\\\x8f][\\\\x80-\\\\xbf]{2})'].join('|'));\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/@sideway/address/lib/email.js?");

/***/ }),

/***/ "./node_modules/@sideway/address/lib/errors.js":
/*!*****************************************************!*\
  !*** ./node_modules/@sideway/address/lib/errors.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nexports.codes = {\n  EMPTY_STRING: 'Address must be a non-empty string',\n  FORBIDDEN_UNICODE: 'Address contains forbidden Unicode characters',\n  MULTIPLE_AT_CHAR: 'Address cannot contain more than one @ character',\n  MISSING_AT_CHAR: 'Address must contain one @ character',\n  EMPTY_LOCAL: 'Address local part cannot be empty',\n  ADDRESS_TOO_LONG: 'Address too long',\n  LOCAL_TOO_LONG: 'Address local part too long',\n  EMPTY_LOCAL_SEGMENT: 'Address local part contains empty dot-separated segment',\n  INVALID_LOCAL_CHARS: 'Address local part contains invalid character',\n  DOMAIN_NON_EMPTY_STRING: 'Domain must be a non-empty string',\n  DOMAIN_TOO_LONG: 'Domain too long',\n  DOMAIN_INVALID_UNICODE_CHARS: 'Domain contains forbidden Unicode characters',\n  DOMAIN_INVALID_CHARS: 'Domain contains invalid character',\n  DOMAIN_INVALID_TLDS_CHARS: 'Domain contains invalid tld character',\n  DOMAIN_SEGMENTS_COUNT: 'Domain lacks the minimum required number of segments',\n  DOMAIN_SEGMENTS_COUNT_MAX: 'Domain contains too many segments',\n  DOMAIN_FORBIDDEN_TLDS: 'Domain uses forbidden TLD',\n  DOMAIN_EMPTY_SEGMENT: 'Domain contains empty dot-separated segment',\n  DOMAIN_LONG_SEGMENT: 'Domain contains dot-separated segment that is too long'\n};\n\nexports.code = function (code) {\n  return {\n    code,\n    error: exports.codes[code]\n  };\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/@sideway/address/lib/errors.js?");

/***/ }),

/***/ "./node_modules/@sideway/address/lib/ip.js":
/*!*************************************************!*\
  !*** ./node_modules/@sideway/address/lib/ip.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"./node_modules/@hapi/hoek/lib/assert.js\");\n\nconst Uri = __webpack_require__(/*! ./uri */ \"./node_modules/@sideway/address/lib/uri.js\");\n\nconst internals = {};\n\nexports.regex = function (options = {}) {\n  // CIDR\n  Assert(options.cidr === undefined || typeof options.cidr === 'string', 'options.cidr must be a string');\n  const cidr = options.cidr ? options.cidr.toLowerCase() : 'optional';\n  Assert(['required', 'optional', 'forbidden'].includes(cidr), 'options.cidr must be one of required, optional, forbidden'); // Versions\n\n  Assert(options.version === undefined || typeof options.version === 'string' || Array.isArray(options.version), 'options.version must be a string or an array of string');\n  let versions = options.version || ['ipv4', 'ipv6', 'ipvfuture'];\n\n  if (!Array.isArray(versions)) {\n    versions = [versions];\n  }\n\n  Assert(versions.length >= 1, 'options.version must have at least 1 version specified');\n\n  for (let i = 0; i < versions.length; ++i) {\n    Assert(typeof versions[i] === 'string', 'options.version must only contain strings');\n    versions[i] = versions[i].toLowerCase();\n    Assert(['ipv4', 'ipv6', 'ipvfuture'].includes(versions[i]), 'options.version contains unknown version ' + versions[i] + ' - must be one of ipv4, ipv6, ipvfuture');\n  }\n\n  versions = Array.from(new Set(versions)); // Regex\n\n  const parts = versions.map(version => {\n    // Forbidden\n    if (cidr === 'forbidden') {\n      return Uri.ip[version];\n    } // Required\n\n\n    const cidrpart = `\\\\/${version === 'ipv4' ? Uri.ip.v4Cidr : Uri.ip.v6Cidr}`;\n\n    if (cidr === 'required') {\n      return `${Uri.ip[version]}${cidrpart}`;\n    } // Optional\n\n\n    return `${Uri.ip[version]}(?:${cidrpart})?`;\n  });\n  const raw = `(?:${parts.join('|')})`;\n  const regex = new RegExp(`^${raw}$`);\n  return {\n    cidr,\n    versions,\n    regex,\n    raw\n  };\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/@sideway/address/lib/ip.js?");

/***/ }),

/***/ "./node_modules/@sideway/address/lib/tlds.js":
/*!***************************************************!*\
  !*** ./node_modules/@sideway/address/lib/tlds.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\n\nconst internals = {}; // http://data.iana.org/TLD/tlds-alpha-by-domain.txt\n// # Version 2021020700, Last Updated Sun Feb  7 07: 07: 01 2021 UTC\n\ninternals.tlds = ['AAA', 'AARP', 'ABARTH', 'ABB', 'ABBOTT', 'ABBVIE', 'ABC', 'ABLE', 'ABOGADO', 'ABUDHABI', 'AC', 'ACADEMY', 'ACCENTURE', 'ACCOUNTANT', 'ACCOUNTANTS', 'ACO', 'ACTOR', 'AD', 'ADAC', 'ADS', 'ADULT', 'AE', 'AEG', 'AERO', 'AETNA', 'AF', 'AFAMILYCOMPANY', 'AFL', 'AFRICA', 'AG', 'AGAKHAN', 'AGENCY', 'AI', 'AIG', 'AIRBUS', 'AIRFORCE', 'AIRTEL', 'AKDN', 'AL', 'ALFAROMEO', 'ALIBABA', 'ALIPAY', 'ALLFINANZ', 'ALLSTATE', 'ALLY', 'ALSACE', 'ALSTOM', 'AM', 'AMAZON', 'AMERICANEXPRESS', 'AMERICANFAMILY', 'AMEX', 'AMFAM', 'AMICA', 'AMSTERDAM', 'ANALYTICS', 'ANDROID', 'ANQUAN', 'ANZ', 'AO', 'AOL', 'APARTMENTS', 'APP', 'APPLE', 'AQ', 'AQUARELLE', 'AR', 'ARAB', 'ARAMCO', 'ARCHI', 'ARMY', 'ARPA', 'ART', 'ARTE', 'AS', 'ASDA', 'ASIA', 'ASSOCIATES', 'AT', 'ATHLETA', 'ATTORNEY', 'AU', 'AUCTION', 'AUDI', 'AUDIBLE', 'AUDIO', 'AUSPOST', 'AUTHOR', 'AUTO', 'AUTOS', 'AVIANCA', 'AW', 'AWS', 'AX', 'AXA', 'AZ', 'AZURE', 'BA', 'BABY', 'BAIDU', 'BANAMEX', 'BANANAREPUBLIC', 'BAND', 'BANK', 'BAR', 'BARCELONA', 'BARCLAYCARD', 'BARCLAYS', 'BAREFOOT', 'BARGAINS', 'BASEBALL', 'BASKETBALL', 'BAUHAUS', 'BAYERN', 'BB', 'BBC', 'BBT', 'BBVA', 'BCG', 'BCN', 'BD', 'BE', 'BEATS', 'BEAUTY', 'BEER', 'BENTLEY', 'BERLIN', 'BEST', 'BESTBUY', 'BET', 'BF', 'BG', 'BH', 'BHARTI', 'BI', 'BIBLE', 'BID', 'BIKE', 'BING', 'BINGO', 'BIO', 'BIZ', 'BJ', 'BLACK', 'BLACKFRIDAY', 'BLOCKBUSTER', 'BLOG', 'BLOOMBERG', 'BLUE', 'BM', 'BMS', 'BMW', 'BN', 'BNPPARIBAS', 'BO', 'BOATS', 'BOEHRINGER', 'BOFA', 'BOM', 'BOND', 'BOO', 'BOOK', 'BOOKING', 'BOSCH', 'BOSTIK', 'BOSTON', 'BOT', 'BOUTIQUE', 'BOX', 'BR', 'BRADESCO', 'BRIDGESTONE', 'BROADWAY', 'BROKER', 'BROTHER', 'BRUSSELS', 'BS', 'BT', 'BUDAPEST', 'BUGATTI', 'BUILD', 'BUILDERS', 'BUSINESS', 'BUY', 'BUZZ', 'BV', 'BW', 'BY', 'BZ', 'BZH', 'CA', 'CAB', 'CAFE', 'CAL', 'CALL', 'CALVINKLEIN', 'CAM', 'CAMERA', 'CAMP', 'CANCERRESEARCH', 'CANON', 'CAPETOWN', 'CAPITAL', 'CAPITALONE', 'CAR', 'CARAVAN', 'CARDS', 'CARE', 'CAREER', 'CAREERS', 'CARS', 'CASA', 'CASE', 'CASEIH', 'CASH', 'CASINO', 'CAT', 'CATERING', 'CATHOLIC', 'CBA', 'CBN', 'CBRE', 'CBS', 'CC', 'CD', 'CENTER', 'CEO', 'CERN', 'CF', 'CFA', 'CFD', 'CG', 'CH', 'CHANEL', 'CHANNEL', 'CHARITY', 'CHASE', 'CHAT', 'CHEAP', 'CHINTAI', 'CHRISTMAS', 'CHROME', 'CHURCH', 'CI', 'CIPRIANI', 'CIRCLE', 'CISCO', 'CITADEL', 'CITI', 'CITIC', 'CITY', 'CITYEATS', 'CK', 'CL', 'CLAIMS', 'CLEANING', 'CLICK', 'CLINIC', 'CLINIQUE', 'CLOTHING', 'CLOUD', 'CLUB', 'CLUBMED', 'CM', 'CN', 'CO', 'COACH', 'CODES', 'COFFEE', 'COLLEGE', 'COLOGNE', 'COM', 'COMCAST', 'COMMBANK', 'COMMUNITY', 'COMPANY', 'COMPARE', 'COMPUTER', 'COMSEC', 'CONDOS', 'CONSTRUCTION', 'CONSULTING', 'CONTACT', 'CONTRACTORS', 'COOKING', 'COOKINGCHANNEL', 'COOL', 'COOP', 'CORSICA', 'COUNTRY', 'COUPON', 'COUPONS', 'COURSES', 'CPA', 'CR', 'CREDIT', 'CREDITCARD', 'CREDITUNION', 'CRICKET', 'CROWN', 'CRS', 'CRUISE', 'CRUISES', 'CSC', 'CU', 'CUISINELLA', 'CV', 'CW', 'CX', 'CY', 'CYMRU', 'CYOU', 'CZ', 'DABUR', 'DAD', 'DANCE', 'DATA', 'DATE', 'DATING', 'DATSUN', 'DAY', 'DCLK', 'DDS', 'DE', 'DEAL', 'DEALER', 'DEALS', 'DEGREE', 'DELIVERY', 'DELL', 'DELOITTE', 'DELTA', 'DEMOCRAT', 'DENTAL', 'DENTIST', 'DESI', 'DESIGN', 'DEV', 'DHL', 'DIAMONDS', 'DIET', 'DIGITAL', 'DIRECT', 'DIRECTORY', 'DISCOUNT', 'DISCOVER', 'DISH', 'DIY', 'DJ', 'DK', 'DM', 'DNP', 'DO', 'DOCS', 'DOCTOR', 'DOG', 'DOMAINS', 'DOT', 'DOWNLOAD', 'DRIVE', 'DTV', 'DUBAI', 'DUCK', 'DUNLOP', 'DUPONT', 'DURBAN', 'DVAG', 'DVR', 'DZ', 'EARTH', 'EAT', 'EC', 'ECO', 'EDEKA', 'EDU', 'EDUCATION', 'EE', 'EG', 'EMAIL', 'EMERCK', 'ENERGY', 'ENGINEER', 'ENGINEERING', 'ENTERPRISES', 'EPSON', 'EQUIPMENT', 'ER', 'ERICSSON', 'ERNI', 'ES', 'ESQ', 'ESTATE', 'ET', 'ETISALAT', 'EU', 'EUROVISION', 'EUS', 'EVENTS', 'EXCHANGE', 'EXPERT', 'EXPOSED', 'EXPRESS', 'EXTRASPACE', 'FAGE', 'FAIL', 'FAIRWINDS', 'FAITH', 'FAMILY', 'FAN', 'FANS', 'FARM', 'FARMERS', 'FASHION', 'FAST', 'FEDEX', 'FEEDBACK', 'FERRARI', 'FERRERO', 'FI', 'FIAT', 'FIDELITY', 'FIDO', 'FILM', 'FINAL', 'FINANCE', 'FINANCIAL', 'FIRE', 'FIRESTONE', 'FIRMDALE', 'FISH', 'FISHING', 'FIT', 'FITNESS', 'FJ', 'FK', 'FLICKR', 'FLIGHTS', 'FLIR', 'FLORIST', 'FLOWERS', 'FLY', 'FM', 'FO', 'FOO', 'FOOD', 'FOODNETWORK', 'FOOTBALL', 'FORD', 'FOREX', 'FORSALE', 'FORUM', 'FOUNDATION', 'FOX', 'FR', 'FREE', 'FRESENIUS', 'FRL', 'FROGANS', 'FRONTDOOR', 'FRONTIER', 'FTR', 'FUJITSU', 'FUJIXEROX', 'FUN', 'FUND', 'FURNITURE', 'FUTBOL', 'FYI', 'GA', 'GAL', 'GALLERY', 'GALLO', 'GALLUP', 'GAME', 'GAMES', 'GAP', 'GARDEN', 'GAY', 'GB', 'GBIZ', 'GD', 'GDN', 'GE', 'GEA', 'GENT', 'GENTING', 'GEORGE', 'GF', 'GG', 'GGEE', 'GH', 'GI', 'GIFT', 'GIFTS', 'GIVES', 'GIVING', 'GL', 'GLADE', 'GLASS', 'GLE', 'GLOBAL', 'GLOBO', 'GM', 'GMAIL', 'GMBH', 'GMO', 'GMX', 'GN', 'GODADDY', 'GOLD', 'GOLDPOINT', 'GOLF', 'GOO', 'GOODYEAR', 'GOOG', 'GOOGLE', 'GOP', 'GOT', 'GOV', 'GP', 'GQ', 'GR', 'GRAINGER', 'GRAPHICS', 'GRATIS', 'GREEN', 'GRIPE', 'GROCERY', 'GROUP', 'GS', 'GT', 'GU', 'GUARDIAN', 'GUCCI', 'GUGE', 'GUIDE', 'GUITARS', 'GURU', 'GW', 'GY', 'HAIR', 'HAMBURG', 'HANGOUT', 'HAUS', 'HBO', 'HDFC', 'HDFCBANK', 'HEALTH', 'HEALTHCARE', 'HELP', 'HELSINKI', 'HERE', 'HERMES', 'HGTV', 'HIPHOP', 'HISAMITSU', 'HITACHI', 'HIV', 'HK', 'HKT', 'HM', 'HN', 'HOCKEY', 'HOLDINGS', 'HOLIDAY', 'HOMEDEPOT', 'HOMEGOODS', 'HOMES', 'HOMESENSE', 'HONDA', 'HORSE', 'HOSPITAL', 'HOST', 'HOSTING', 'HOT', 'HOTELES', 'HOTELS', 'HOTMAIL', 'HOUSE', 'HOW', 'HR', 'HSBC', 'HT', 'HU', 'HUGHES', 'HYATT', 'HYUNDAI', 'IBM', 'ICBC', 'ICE', 'ICU', 'ID', 'IE', 'IEEE', 'IFM', 'IKANO', 'IL', 'IM', 'IMAMAT', 'IMDB', 'IMMO', 'IMMOBILIEN', 'IN', 'INC', 'INDUSTRIES', 'INFINITI', 'INFO', 'ING', 'INK', 'INSTITUTE', 'INSURANCE', 'INSURE', 'INT', 'INTERNATIONAL', 'INTUIT', 'INVESTMENTS', 'IO', 'IPIRANGA', 'IQ', 'IR', 'IRISH', 'IS', 'ISMAILI', 'IST', 'ISTANBUL', 'IT', 'ITAU', 'ITV', 'IVECO', 'JAGUAR', 'JAVA', 'JCB', 'JE', 'JEEP', 'JETZT', 'JEWELRY', 'JIO', 'JLL', 'JM', 'JMP', 'JNJ', 'JO', 'JOBS', 'JOBURG', 'JOT', 'JOY', 'JP', 'JPMORGAN', 'JPRS', 'JUEGOS', 'JUNIPER', 'KAUFEN', 'KDDI', 'KE', 'KERRYHOTELS', 'KERRYLOGISTICS', 'KERRYPROPERTIES', 'KFH', 'KG', 'KH', 'KI', 'KIA', 'KIM', 'KINDER', 'KINDLE', 'KITCHEN', 'KIWI', 'KM', 'KN', 'KOELN', 'KOMATSU', 'KOSHER', 'KP', 'KPMG', 'KPN', 'KR', 'KRD', 'KRED', 'KUOKGROUP', 'KW', 'KY', 'KYOTO', 'KZ', 'LA', 'LACAIXA', 'LAMBORGHINI', 'LAMER', 'LANCASTER', 'LANCIA', 'LAND', 'LANDROVER', 'LANXESS', 'LASALLE', 'LAT', 'LATINO', 'LATROBE', 'LAW', 'LAWYER', 'LB', 'LC', 'LDS', 'LEASE', 'LECLERC', 'LEFRAK', 'LEGAL', 'LEGO', 'LEXUS', 'LGBT', 'LI', 'LIDL', 'LIFE', 'LIFEINSURANCE', 'LIFESTYLE', 'LIGHTING', 'LIKE', 'LILLY', 'LIMITED', 'LIMO', 'LINCOLN', 'LINDE', 'LINK', 'LIPSY', 'LIVE', 'LIVING', 'LIXIL', 'LK', 'LLC', 'LLP', 'LOAN', 'LOANS', 'LOCKER', 'LOCUS', 'LOFT', 'LOL', 'LONDON', 'LOTTE', 'LOTTO', 'LOVE', 'LPL', 'LPLFINANCIAL', 'LR', 'LS', 'LT', 'LTD', 'LTDA', 'LU', 'LUNDBECK', 'LUXE', 'LUXURY', 'LV', 'LY', 'MA', 'MACYS', 'MADRID', 'MAIF', 'MAISON', 'MAKEUP', 'MAN', 'MANAGEMENT', 'MANGO', 'MAP', 'MARKET', 'MARKETING', 'MARKETS', 'MARRIOTT', 'MARSHALLS', 'MASERATI', 'MATTEL', 'MBA', 'MC', 'MCKINSEY', 'MD', 'ME', 'MED', 'MEDIA', 'MEET', 'MELBOURNE', 'MEME', 'MEMORIAL', 'MEN', 'MENU', 'MERCKMSD', 'MG', 'MH', 'MIAMI', 'MICROSOFT', 'MIL', 'MINI', 'MINT', 'MIT', 'MITSUBISHI', 'MK', 'ML', 'MLB', 'MLS', 'MM', 'MMA', 'MN', 'MO', 'MOBI', 'MOBILE', 'MODA', 'MOE', 'MOI', 'MOM', 'MONASH', 'MONEY', 'MONSTER', 'MORMON', 'MORTGAGE', 'MOSCOW', 'MOTO', 'MOTORCYCLES', 'MOV', 'MOVIE', 'MP', 'MQ', 'MR', 'MS', 'MSD', 'MT', 'MTN', 'MTR', 'MU', 'MUSEUM', 'MUTUAL', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NAB', 'NAGOYA', 'NAME', 'NATIONWIDE', 'NATURA', 'NAVY', 'NBA', 'NC', 'NE', 'NEC', 'NET', 'NETBANK', 'NETFLIX', 'NETWORK', 'NEUSTAR', 'NEW', 'NEWHOLLAND', 'NEWS', 'NEXT', 'NEXTDIRECT', 'NEXUS', 'NF', 'NFL', 'NG', 'NGO', 'NHK', 'NI', 'NICO', 'NIKE', 'NIKON', 'NINJA', 'NISSAN', 'NISSAY', 'NL', 'NO', 'NOKIA', 'NORTHWESTERNMUTUAL', 'NORTON', 'NOW', 'NOWRUZ', 'NOWTV', 'NP', 'NR', 'NRA', 'NRW', 'NTT', 'NU', 'NYC', 'NZ', 'OBI', 'OBSERVER', 'OFF', 'OFFICE', 'OKINAWA', 'OLAYAN', 'OLAYANGROUP', 'OLDNAVY', 'OLLO', 'OM', 'OMEGA', 'ONE', 'ONG', 'ONL', 'ONLINE', 'ONYOURSIDE', 'OOO', 'OPEN', 'ORACLE', 'ORANGE', 'ORG', 'ORGANIC', 'ORIGINS', 'OSAKA', 'OTSUKA', 'OTT', 'OVH', 'PA', 'PAGE', 'PANASONIC', 'PARIS', 'PARS', 'PARTNERS', 'PARTS', 'PARTY', 'PASSAGENS', 'PAY', 'PCCW', 'PE', 'PET', 'PF', 'PFIZER', 'PG', 'PH', 'PHARMACY', 'PHD', 'PHILIPS', 'PHONE', 'PHOTO', 'PHOTOGRAPHY', 'PHOTOS', 'PHYSIO', 'PICS', 'PICTET', 'PICTURES', 'PID', 'PIN', 'PING', 'PINK', 'PIONEER', 'PIZZA', 'PK', 'PL', 'PLACE', 'PLAY', 'PLAYSTATION', 'PLUMBING', 'PLUS', 'PM', 'PN', 'PNC', 'POHL', 'POKER', 'POLITIE', 'PORN', 'POST', 'PR', 'PRAMERICA', 'PRAXI', 'PRESS', 'PRIME', 'PRO', 'PROD', 'PRODUCTIONS', 'PROF', 'PROGRESSIVE', 'PROMO', 'PROPERTIES', 'PROPERTY', 'PROTECTION', 'PRU', 'PRUDENTIAL', 'PS', 'PT', 'PUB', 'PW', 'PWC', 'PY', 'QA', 'QPON', 'QUEBEC', 'QUEST', 'QVC', 'RACING', 'RADIO', 'RAID', 'RE', 'READ', 'REALESTATE', 'REALTOR', 'REALTY', 'RECIPES', 'RED', 'REDSTONE', 'REDUMBRELLA', 'REHAB', 'REISE', 'REISEN', 'REIT', 'RELIANCE', 'REN', 'RENT', 'RENTALS', 'REPAIR', 'REPORT', 'REPUBLICAN', 'REST', 'RESTAURANT', 'REVIEW', 'REVIEWS', 'REXROTH', 'RICH', 'RICHARDLI', 'RICOH', 'RIL', 'RIO', 'RIP', 'RMIT', 'RO', 'ROCHER', 'ROCKS', 'RODEO', 'ROGERS', 'ROOM', 'RS', 'RSVP', 'RU', 'RUGBY', 'RUHR', 'RUN', 'RW', 'RWE', 'RYUKYU', 'SA', 'SAARLAND', 'SAFE', 'SAFETY', 'SAKURA', 'SALE', 'SALON', 'SAMSCLUB', 'SAMSUNG', 'SANDVIK', 'SANDVIKCOROMANT', 'SANOFI', 'SAP', 'SARL', 'SAS', 'SAVE', 'SAXO', 'SB', 'SBI', 'SBS', 'SC', 'SCA', 'SCB', 'SCHAEFFLER', 'SCHMIDT', 'SCHOLARSHIPS', 'SCHOOL', 'SCHULE', 'SCHWARZ', 'SCIENCE', 'SCJOHNSON', 'SCOT', 'SD', 'SE', 'SEARCH', 'SEAT', 'SECURE', 'SECURITY', 'SEEK', 'SELECT', 'SENER', 'SERVICES', 'SES', 'SEVEN', 'SEW', 'SEX', 'SEXY', 'SFR', 'SG', 'SH', 'SHANGRILA', 'SHARP', 'SHAW', 'SHELL', 'SHIA', 'SHIKSHA', 'SHOES', 'SHOP', 'SHOPPING', 'SHOUJI', 'SHOW', 'SHOWTIME', 'SI', 'SILK', 'SINA', 'SINGLES', 'SITE', 'SJ', 'SK', 'SKI', 'SKIN', 'SKY', 'SKYPE', 'SL', 'SLING', 'SM', 'SMART', 'SMILE', 'SN', 'SNCF', 'SO', 'SOCCER', 'SOCIAL', 'SOFTBANK', 'SOFTWARE', 'SOHU', 'SOLAR', 'SOLUTIONS', 'SONG', 'SONY', 'SOY', 'SPA', 'SPACE', 'SPORT', 'SPOT', 'SPREADBETTING', 'SR', 'SRL', 'SS', 'ST', 'STADA', 'STAPLES', 'STAR', 'STATEBANK', 'STATEFARM', 'STC', 'STCGROUP', 'STOCKHOLM', 'STORAGE', 'STORE', 'STREAM', 'STUDIO', 'STUDY', 'STYLE', 'SU', 'SUCKS', 'SUPPLIES', 'SUPPLY', 'SUPPORT', 'SURF', 'SURGERY', 'SUZUKI', 'SV', 'SWATCH', 'SWIFTCOVER', 'SWISS', 'SX', 'SY', 'SYDNEY', 'SYSTEMS', 'SZ', 'TAB', 'TAIPEI', 'TALK', 'TAOBAO', 'TARGET', 'TATAMOTORS', 'TATAR', 'TATTOO', 'TAX', 'TAXI', 'TC', 'TCI', 'TD', 'TDK', 'TEAM', 'TECH', 'TECHNOLOGY', 'TEL', 'TEMASEK', 'TENNIS', 'TEVA', 'TF', 'TG', 'TH', 'THD', 'THEATER', 'THEATRE', 'TIAA', 'TICKETS', 'TIENDA', 'TIFFANY', 'TIPS', 'TIRES', 'TIROL', 'TJ', 'TJMAXX', 'TJX', 'TK', 'TKMAXX', 'TL', 'TM', 'TMALL', 'TN', 'TO', 'TODAY', 'TOKYO', 'TOOLS', 'TOP', 'TORAY', 'TOSHIBA', 'TOTAL', 'TOURS', 'TOWN', 'TOYOTA', 'TOYS', 'TR', 'TRADE', 'TRADING', 'TRAINING', 'TRAVEL', 'TRAVELCHANNEL', 'TRAVELERS', 'TRAVELERSINSURANCE', 'TRUST', 'TRV', 'TT', 'TUBE', 'TUI', 'TUNES', 'TUSHU', 'TV', 'TVS', 'TW', 'TZ', 'UA', 'UBANK', 'UBS', 'UG', 'UK', 'UNICOM', 'UNIVERSITY', 'UNO', 'UOL', 'UPS', 'US', 'UY', 'UZ', 'VA', 'VACATIONS', 'VANA', 'VANGUARD', 'VC', 'VE', 'VEGAS', 'VENTURES', 'VERISIGN', 'VERSICHERUNG', 'VET', 'VG', 'VI', 'VIAJES', 'VIDEO', 'VIG', 'VIKING', 'VILLAS', 'VIN', 'VIP', 'VIRGIN', 'VISA', 'VISION', 'VIVA', 'VIVO', 'VLAANDEREN', 'VN', 'VODKA', 'VOLKSWAGEN', 'VOLVO', 'VOTE', 'VOTING', 'VOTO', 'VOYAGE', 'VU', 'VUELOS', 'WALES', 'WALMART', 'WALTER', 'WANG', 'WANGGOU', 'WATCH', 'WATCHES', 'WEATHER', 'WEATHERCHANNEL', 'WEBCAM', 'WEBER', 'WEBSITE', 'WED', 'WEDDING', 'WEIBO', 'WEIR', 'WF', 'WHOSWHO', 'WIEN', 'WIKI', 'WILLIAMHILL', 'WIN', 'WINDOWS', 'WINE', 'WINNERS', 'WME', 'WOLTERSKLUWER', 'WOODSIDE', 'WORK', 'WORKS', 'WORLD', 'WOW', 'WS', 'WTC', 'WTF', 'XBOX', 'XEROX', 'XFINITY', 'XIHUAN', 'XIN', 'XN--11B4C3D', 'XN--1CK2E1B', 'XN--1QQW23A', 'XN--2SCRJ9C', 'XN--30RR7Y', 'XN--3BST00M', 'XN--3DS443G', 'XN--3E0B707E', 'XN--3HCRJ9C', 'XN--3OQ18VL8PN36A', 'XN--3PXU8K', 'XN--42C2D9A', 'XN--45BR5CYL', 'XN--45BRJ9C', 'XN--45Q11C', 'XN--4GBRIM', 'XN--54B7FTA0CC', 'XN--55QW42G', 'XN--55QX5D', 'XN--5SU34J936BGSG', 'XN--5TZM5G', 'XN--6FRZ82G', 'XN--6QQ986B3XL', 'XN--80ADXHKS', 'XN--80AO21A', 'XN--80AQECDR1A', 'XN--80ASEHDB', 'XN--80ASWG', 'XN--8Y0A063A', 'XN--90A3AC', 'XN--90AE', 'XN--90AIS', 'XN--9DBQ2A', 'XN--9ET52U', 'XN--9KRT00A', 'XN--B4W605FERD', 'XN--BCK1B9A5DRE4C', 'XN--C1AVG', 'XN--C2BR7G', 'XN--CCK2B3B', 'XN--CCKWCXETD', 'XN--CG4BKI', 'XN--CLCHC0EA0B2G2A9GCD', 'XN--CZR694B', 'XN--CZRS0T', 'XN--CZRU2D', 'XN--D1ACJ3B', 'XN--D1ALF', 'XN--E1A4C', 'XN--ECKVDTC9D', 'XN--EFVY88H', 'XN--FCT429K', 'XN--FHBEI', 'XN--FIQ228C5HS', 'XN--FIQ64B', 'XN--FIQS8S', 'XN--FIQZ9S', 'XN--FJQ720A', 'XN--FLW351E', 'XN--FPCRJ9C3D', 'XN--FZC2C9E2C', 'XN--FZYS8D69UVGM', 'XN--G2XX48C', 'XN--GCKR3F0F', 'XN--GECRJ9C', 'XN--GK3AT1E', 'XN--H2BREG3EVE', 'XN--H2BRJ9C', 'XN--H2BRJ9C8C', 'XN--HXT814E', 'XN--I1B6B1A6A2E', 'XN--IMR513N', 'XN--IO0A7I', 'XN--J1AEF', 'XN--J1AMH', 'XN--J6W193G', 'XN--JLQ480N2RG', 'XN--JLQ61U9W7B', 'XN--JVR189M', 'XN--KCRX77D1X4A', 'XN--KPRW13D', 'XN--KPRY57D', 'XN--KPUT3I', 'XN--L1ACC', 'XN--LGBBAT1AD8J', 'XN--MGB9AWBF', 'XN--MGBA3A3EJT', 'XN--MGBA3A4F16A', 'XN--MGBA7C0BBN0A', 'XN--MGBAAKC7DVF', 'XN--MGBAAM7A8H', 'XN--MGBAB2BD', 'XN--MGBAH1A3HJKRD', 'XN--MGBAI9AZGQP6J', 'XN--MGBAYH7GPA', 'XN--MGBBH1A', 'XN--MGBBH1A71E', 'XN--MGBC0A9AZCG', 'XN--MGBCA7DZDO', 'XN--MGBCPQ6GPA1A', 'XN--MGBERP4A5D4AR', 'XN--MGBGU82A', 'XN--MGBI4ECEXP', 'XN--MGBPL2FH', 'XN--MGBT3DHD', 'XN--MGBTX2B', 'XN--MGBX4CD0AB', 'XN--MIX891F', 'XN--MK1BU44C', 'XN--MXTQ1M', 'XN--NGBC5AZD', 'XN--NGBE9E0A', 'XN--NGBRX', 'XN--NODE', 'XN--NQV7F', 'XN--NQV7FS00EMA', 'XN--NYQY26A', 'XN--O3CW4H', 'XN--OGBPF8FL', 'XN--OTU796D', 'XN--P1ACF', 'XN--P1AI', 'XN--PGBS0DH', 'XN--PSSY2U', 'XN--Q7CE6A', 'XN--Q9JYB4C', 'XN--QCKA1PMC', 'XN--QXA6A', 'XN--QXAM', 'XN--RHQV96G', 'XN--ROVU88B', 'XN--RVC1E0AM3E', 'XN--S9BRJ9C', 'XN--SES554G', 'XN--T60B56A', 'XN--TCKWE', 'XN--TIQ49XQYJ', 'XN--UNUP4Y', 'XN--VERMGENSBERATER-CTB', 'XN--VERMGENSBERATUNG-PWB', 'XN--VHQUV', 'XN--VUQ861B', 'XN--W4R85EL8FHU5DNRA', 'XN--W4RS40L', 'XN--WGBH1C', 'XN--WGBL6A', 'XN--XHQ521B', 'XN--XKC2AL3HYE2A', 'XN--XKC2DL3A5EE0H', 'XN--Y9A3AQ', 'XN--YFRO4I67O', 'XN--YGBI2AMMX', 'XN--ZFR164B', 'XXX', 'XYZ', 'YACHTS', 'YAHOO', 'YAMAXUN', 'YANDEX', 'YE', 'YODOBASHI', 'YOGA', 'YOKOHAMA', 'YOU', 'YOUTUBE', 'YT', 'YUN', 'ZA', 'ZAPPOS', 'ZARA', 'ZERO', 'ZIP', 'ZM', 'ZONE', 'ZUERICH', 'ZW']; // Keep as upper-case to make updating from source easier\n\nmodule.exports = new Set(internals.tlds.map(tld => tld.toLowerCase()));\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/@sideway/address/lib/tlds.js?");

/***/ }),

/***/ "./node_modules/@sideway/address/lib/uri.js":
/*!**************************************************!*\
  !*** ./node_modules/@sideway/address/lib/uri.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"./node_modules/@hapi/hoek/lib/assert.js\");\n\nconst EscapeRegex = __webpack_require__(/*! @hapi/hoek/lib/escapeRegex */ \"./node_modules/@hapi/hoek/lib/escapeRegex.js\");\n\nconst internals = {};\n\ninternals.generate = function () {\n  const rfc3986 = {};\n  const hexDigit = '\\\\dA-Fa-f'; // HEXDIG = DIGIT / \"A\" / \"B\" / \"C\" / \"D\" / \"E\" / \"F\"\n\n  const hexDigitOnly = '[' + hexDigit + ']';\n  const unreserved = '\\\\w-\\\\.~'; // unreserved = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n\n  const subDelims = '!\\\\$&\\'\\\\(\\\\)\\\\*\\\\+,;='; // sub-delims = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\" / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n\n  const pctEncoded = '%' + hexDigit; // pct-encoded = \"%\" HEXDIG HEXDIG\n\n  const pchar = unreserved + pctEncoded + subDelims + ':@'; // pchar = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n\n  const pcharOnly = '[' + pchar + ']';\n  const decOctect = '(?:0{0,2}\\\\d|0?[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5])'; // dec-octet = DIGIT / %x31-39 DIGIT / \"1\" 2DIGIT / \"2\" %x30-34 DIGIT / \"25\" %x30-35  ; 0-9 / 10-99 / 100-199 / 200-249 / 250-255\n\n  rfc3986.ipv4address = '(?:' + decOctect + '\\\\.){3}' + decOctect; // IPv4address = dec-octet \".\" dec-octet \".\" dec-octet \".\" dec-octet\n\n  /*\n      h16 = 1*4HEXDIG ; 16 bits of address represented in hexadecimal\n      ls32 = ( h16 \":\" h16 ) / IPv4address ; least-significant 32 bits of address\n      IPv6address =                            6( h16 \":\" ) ls32\n                  /                       \"::\" 5( h16 \":\" ) ls32\n                  / [               h16 ] \"::\" 4( h16 \":\" ) ls32\n                  / [ *1( h16 \":\" ) h16 ] \"::\" 3( h16 \":\" ) ls32\n                  / [ *2( h16 \":\" ) h16 ] \"::\" 2( h16 \":\" ) ls32\n                  / [ *3( h16 \":\" ) h16 ] \"::\"    h16 \":\"   ls32\n                  / [ *4( h16 \":\" ) h16 ] \"::\"              ls32\n                  / [ *5( h16 \":\" ) h16 ] \"::\"              h16\n                  / [ *6( h16 \":\" ) h16 ] \"::\"\n  */\n\n  const h16 = hexDigitOnly + '{1,4}';\n  const ls32 = '(?:' + h16 + ':' + h16 + '|' + rfc3986.ipv4address + ')';\n  const IPv6SixHex = '(?:' + h16 + ':){6}' + ls32;\n  const IPv6FiveHex = '::(?:' + h16 + ':){5}' + ls32;\n  const IPv6FourHex = '(?:' + h16 + ')?::(?:' + h16 + ':){4}' + ls32;\n  const IPv6ThreeHex = '(?:(?:' + h16 + ':){0,1}' + h16 + ')?::(?:' + h16 + ':){3}' + ls32;\n  const IPv6TwoHex = '(?:(?:' + h16 + ':){0,2}' + h16 + ')?::(?:' + h16 + ':){2}' + ls32;\n  const IPv6OneHex = '(?:(?:' + h16 + ':){0,3}' + h16 + ')?::' + h16 + ':' + ls32;\n  const IPv6NoneHex = '(?:(?:' + h16 + ':){0,4}' + h16 + ')?::' + ls32;\n  const IPv6NoneHex2 = '(?:(?:' + h16 + ':){0,5}' + h16 + ')?::' + h16;\n  const IPv6NoneHex3 = '(?:(?:' + h16 + ':){0,6}' + h16 + ')?::';\n  rfc3986.ipv4Cidr = '(?:\\\\d|[1-2]\\\\d|3[0-2])'; // IPv4 cidr = DIGIT / %x31-32 DIGIT / \"3\" %x30-32  ; 0-9 / 10-29 / 30-32\n\n  rfc3986.ipv6Cidr = '(?:0{0,2}\\\\d|0?[1-9]\\\\d|1[01]\\\\d|12[0-8])'; // IPv6 cidr = DIGIT / %x31-39 DIGIT / \"1\" %x0-1 DIGIT / \"12\" %x0-8;   0-9 / 10-99 / 100-119 / 120-128\n\n  rfc3986.ipv6address = '(?:' + IPv6SixHex + '|' + IPv6FiveHex + '|' + IPv6FourHex + '|' + IPv6ThreeHex + '|' + IPv6TwoHex + '|' + IPv6OneHex + '|' + IPv6NoneHex + '|' + IPv6NoneHex2 + '|' + IPv6NoneHex3 + ')';\n  rfc3986.ipvFuture = 'v' + hexDigitOnly + '+\\\\.[' + unreserved + subDelims + ':]+'; // IPvFuture = \"v\" 1*HEXDIG \".\" 1*( unreserved / sub-delims / \":\" )\n\n  rfc3986.scheme = '[a-zA-Z][a-zA-Z\\\\d+-\\\\.]*'; // scheme = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n\n  rfc3986.schemeRegex = new RegExp(rfc3986.scheme);\n  const userinfo = '[' + unreserved + pctEncoded + subDelims + ':]*'; // userinfo = *( unreserved / pct-encoded / sub-delims / \":\" )\n\n  const IPLiteral = '\\\\[(?:' + rfc3986.ipv6address + '|' + rfc3986.ipvFuture + ')\\\\]'; // IP-literal = \"[\" ( IPv6address / IPvFuture  ) \"]\"\n\n  const regName = '[' + unreserved + pctEncoded + subDelims + ']{1,255}'; // reg-name = *( unreserved / pct-encoded / sub-delims )\n\n  const host = '(?:' + IPLiteral + '|' + rfc3986.ipv4address + '|' + regName + ')'; // host = IP-literal / IPv4address / reg-name\n\n  const port = '\\\\d*'; // port = *DIGIT\n\n  const authority = '(?:' + userinfo + '@)?' + host + '(?::' + port + ')?'; // authority   = [ userinfo \"@\" ] host [ \":\" port ]\n\n  const authorityCapture = '(?:' + userinfo + '@)?(' + host + ')(?::' + port + ')?';\n  /*\n      segment       = *pchar\n      segment-nz    = 1*pchar\n      path          = path-abempty    ; begins with \"/\" '|' is empty\n                  / path-absolute   ; begins with \"/\" but not \"//\"\n                  / path-noscheme   ; begins with a non-colon segment\n                  / path-rootless   ; begins with a segment\n                  / path-empty      ; zero characters\n      path-abempty  = *( \"/\" segment )\n      path-absolute = \"/\" [ segment-nz *( \"/\" segment ) ]\n      path-rootless = segment-nz *( \"/\" segment )\n  */\n\n  const segment = pcharOnly + '*';\n  const segmentNz = pcharOnly + '+';\n  const segmentNzNc = '[' + unreserved + pctEncoded + subDelims + '@' + ']+';\n  const pathEmpty = '';\n  const pathAbEmpty = '(?:\\\\/' + segment + ')*';\n  const pathAbsolute = '\\\\/(?:' + segmentNz + pathAbEmpty + ')?';\n  const pathRootless = segmentNz + pathAbEmpty;\n  const pathNoScheme = segmentNzNc + pathAbEmpty;\n  const pathAbNoAuthority = '(?:\\\\/\\\\/\\\\/' + segment + pathAbEmpty + ')'; // Used by file:///\n  // hier-part = \"//\" authority path\n\n  rfc3986.hierPart = '(?:' + '(?:\\\\/\\\\/' + authority + pathAbEmpty + ')' + '|' + pathAbsolute + '|' + pathRootless + '|' + pathAbNoAuthority + ')';\n  rfc3986.hierPartCapture = '(?:' + '(?:\\\\/\\\\/' + authorityCapture + pathAbEmpty + ')' + '|' + pathAbsolute + '|' + pathRootless + ')'; // relative-part = \"//\" authority path-abempty / path-absolute / path-noscheme / path-empty\n\n  rfc3986.relativeRef = '(?:' + '(?:\\\\/\\\\/' + authority + pathAbEmpty + ')' + '|' + pathAbsolute + '|' + pathNoScheme + '|' + pathEmpty + ')';\n  rfc3986.relativeRefCapture = '(?:' + '(?:\\\\/\\\\/' + authorityCapture + pathAbEmpty + ')' + '|' + pathAbsolute + '|' + pathNoScheme + '|' + pathEmpty + ')'; // query = *( pchar / \"/\" / \"?\" )\n  // query = *( pchar / \"[\" / \"]\" / \"/\" / \"?\" )\n\n  rfc3986.query = '[' + pchar + '\\\\/\\\\?]*(?=#|$)'; //Finish matching either at the fragment part '|' end of the line.\n\n  rfc3986.queryWithSquareBrackets = '[' + pchar + '\\\\[\\\\]\\\\/\\\\?]*(?=#|$)'; // fragment = *( pchar / \"/\" / \"?\" )\n\n  rfc3986.fragment = '[' + pchar + '\\\\/\\\\?]*';\n  return rfc3986;\n};\n\ninternals.rfc3986 = internals.generate();\nexports.ip = {\n  v4Cidr: internals.rfc3986.ipv4Cidr,\n  v6Cidr: internals.rfc3986.ipv6Cidr,\n  ipv4: internals.rfc3986.ipv4address,\n  ipv6: internals.rfc3986.ipv6address,\n  ipvfuture: internals.rfc3986.ipvFuture\n};\n\ninternals.createRegex = function (options) {\n  const rfc = internals.rfc3986; // Construct expression\n\n  const query = options.allowQuerySquareBrackets ? rfc.queryWithSquareBrackets : rfc.query;\n  const suffix = '(?:\\\\?' + query + ')?' + '(?:#' + rfc.fragment + ')?'; // relative-ref = relative-part [ \"?\" query ] [ \"#\" fragment ]\n\n  const relative = options.domain ? rfc.relativeRefCapture : rfc.relativeRef;\n\n  if (options.relativeOnly) {\n    return internals.wrap(relative + suffix);\n  } // Custom schemes\n\n\n  let customScheme = '';\n\n  if (options.scheme) {\n    Assert(options.scheme instanceof RegExp || typeof options.scheme === 'string' || Array.isArray(options.scheme), 'scheme must be a RegExp, String, or Array');\n    const schemes = [].concat(options.scheme);\n    Assert(schemes.length >= 1, 'scheme must have at least 1 scheme specified'); // Flatten the array into a string to be used to match the schemes\n\n    const selections = [];\n\n    for (let i = 0; i < schemes.length; ++i) {\n      const scheme = schemes[i];\n      Assert(scheme instanceof RegExp || typeof scheme === 'string', 'scheme at position ' + i + ' must be a RegExp or String');\n\n      if (scheme instanceof RegExp) {\n        selections.push(scheme.source.toString());\n      } else {\n        Assert(rfc.schemeRegex.test(scheme), 'scheme at position ' + i + ' must be a valid scheme');\n        selections.push(EscapeRegex(scheme));\n      }\n    }\n\n    customScheme = selections.join('|');\n  } // URI = scheme \":\" hier-part [ \"?\" query ] [ \"#\" fragment ]\n\n\n  const scheme = customScheme ? '(?:' + customScheme + ')' : rfc.scheme;\n  const absolute = '(?:' + scheme + ':' + (options.domain ? rfc.hierPartCapture : rfc.hierPart) + ')';\n  const prefix = options.allowRelative ? '(?:' + absolute + '|' + relative + ')' : absolute;\n  return internals.wrap(prefix + suffix, customScheme);\n};\n\ninternals.wrap = function (raw, scheme) {\n  raw = `(?=.)(?!https?\\:/$)${raw}`; // Require at least one character and explicitly forbid 'http:/'\n\n  return {\n    raw,\n    regex: new RegExp(`^${raw}$`),\n    scheme\n  };\n};\n\ninternals.uriRegex = internals.createRegex({});\n\nexports.regex = function (options = {}) {\n  if (options.scheme || options.allowRelative || options.relativeOnly || options.allowQuerySquareBrackets || options.domain) {\n    return internals.createRegex(options);\n  }\n\n  return internals.uriRegex;\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/@sideway/address/lib/uri.js?");

/***/ }),

/***/ "./node_modules/@sideway/formula/lib/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@sideway/formula/lib/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nconst internals = {\n  operators: ['!', '^', '*', '/', '%', '+', '-', '<', '<=', '>', '>=', '==', '!=', '&&', '||', '??'],\n  operatorCharacters: ['!', '^', '*', '/', '%', '+', '-', '<', '=', '>', '&', '|', '?'],\n  operatorsOrder: [['^'], ['*', '/', '%'], ['+', '-'], ['<', '<=', '>', '>='], ['==', '!='], ['&&'], ['||', '??']],\n  operatorsPrefix: ['!', 'n'],\n  literals: {\n    '\"': '\"',\n    '`': '`',\n    '\\'': '\\'',\n    '[': ']'\n  },\n  numberRx: /^(?:[0-9]*\\.?[0-9]*){1}$/,\n  tokenRx: /^[\\w\\$\\#\\.\\@\\:\\{\\}]+$/,\n  symbol: Symbol('formula'),\n  settings: Symbol('settings')\n};\nexports.Parser = class {\n  constructor(string, options = {}) {\n    if (!options[internals.settings] && options.constants) {\n      for (const constant in options.constants) {\n        const value = options.constants[constant];\n\n        if (value !== null && !['boolean', 'number', 'string'].includes(typeof value)) {\n          throw new Error(`Formula constant ${constant} contains invalid ${typeof value} value type`);\n        }\n      }\n    }\n\n    this.settings = options[internals.settings] ? options : Object.assign({\n      [internals.settings]: true,\n      constants: {},\n      functions: {}\n    }, options);\n    this.single = null;\n    this._parts = null;\n\n    this._parse(string);\n  }\n\n  _parse(string) {\n    let parts = [];\n    let current = '';\n    let parenthesis = 0;\n    let literal = false;\n\n    const flush = inner => {\n      if (parenthesis) {\n        throw new Error('Formula missing closing parenthesis');\n      }\n\n      const last = parts.length ? parts[parts.length - 1] : null;\n\n      if (!literal && !current && !inner) {\n        return;\n      }\n\n      if (last && last.type === 'reference' && inner === ')') {\n        // Function\n        last.type = 'function';\n        last.value = this._subFormula(current, last.value);\n        current = '';\n        return;\n      }\n\n      if (inner === ')') {\n        // Segment\n        const sub = new exports.Parser(current, this.settings);\n        parts.push({\n          type: 'segment',\n          value: sub\n        });\n      } else if (literal) {\n        if (literal === ']') {\n          // Reference\n          parts.push({\n            type: 'reference',\n            value: current\n          });\n          current = '';\n          return;\n        }\n\n        parts.push({\n          type: 'literal',\n          value: current\n        }); // Literal\n      } else if (internals.operatorCharacters.includes(current)) {\n        // Operator\n        if (last && last.type === 'operator' && internals.operators.includes(last.value + current)) {\n          // 2 characters operator\n          last.value += current;\n        } else {\n          parts.push({\n            type: 'operator',\n            value: current\n          });\n        }\n      } else if (current.match(internals.numberRx)) {\n        // Number\n        parts.push({\n          type: 'constant',\n          value: parseFloat(current)\n        });\n      } else if (this.settings.constants[current] !== undefined) {\n        // Constant\n        parts.push({\n          type: 'constant',\n          value: this.settings.constants[current]\n        });\n      } else {\n        // Reference\n        if (!current.match(internals.tokenRx)) {\n          throw new Error(`Formula contains invalid token: ${current}`);\n        }\n\n        parts.push({\n          type: 'reference',\n          value: current\n        });\n      }\n\n      current = '';\n    };\n\n    for (const c of string) {\n      if (literal) {\n        if (c === literal) {\n          flush();\n          literal = false;\n        } else {\n          current += c;\n        }\n      } else if (parenthesis) {\n        if (c === '(') {\n          current += c;\n          ++parenthesis;\n        } else if (c === ')') {\n          --parenthesis;\n\n          if (!parenthesis) {\n            flush(c);\n          } else {\n            current += c;\n          }\n        } else {\n          current += c;\n        }\n      } else if (c in internals.literals) {\n        literal = internals.literals[c];\n      } else if (c === '(') {\n        flush();\n        ++parenthesis;\n      } else if (internals.operatorCharacters.includes(c)) {\n        flush();\n        current = c;\n        flush();\n      } else if (c !== ' ') {\n        current += c;\n      } else {\n        flush();\n      }\n    }\n\n    flush(); // Replace prefix - to internal negative operator\n\n    parts = parts.map((part, i) => {\n      if (part.type !== 'operator' || part.value !== '-' || i && parts[i - 1].type !== 'operator') {\n        return part;\n      }\n\n      return {\n        type: 'operator',\n        value: 'n'\n      };\n    }); // Validate tokens order\n\n    let operator = false;\n\n    for (const part of parts) {\n      if (part.type === 'operator') {\n        if (internals.operatorsPrefix.includes(part.value)) {\n          continue;\n        }\n\n        if (!operator) {\n          throw new Error('Formula contains an operator in invalid position');\n        }\n\n        if (!internals.operators.includes(part.value)) {\n          throw new Error(`Formula contains an unknown operator ${part.value}`);\n        }\n      } else if (operator) {\n        throw new Error('Formula missing expected operator');\n      }\n\n      operator = !operator;\n    }\n\n    if (!operator) {\n      throw new Error('Formula contains invalid trailing operator');\n    } // Identify single part\n\n\n    if (parts.length === 1 && ['reference', 'literal', 'constant'].includes(parts[0].type)) {\n      this.single = {\n        type: parts[0].type === 'reference' ? 'reference' : 'value',\n        value: parts[0].value\n      };\n    } // Process parts\n\n\n    this._parts = parts.map(part => {\n      // Operators\n      if (part.type === 'operator') {\n        return internals.operatorsPrefix.includes(part.value) ? part : part.value;\n      } // Literals, constants, segments\n\n\n      if (part.type !== 'reference') {\n        return part.value;\n      } // References\n\n\n      if (this.settings.tokenRx && !this.settings.tokenRx.test(part.value)) {\n        throw new Error(`Formula contains invalid reference ${part.value}`);\n      }\n\n      if (this.settings.reference) {\n        return this.settings.reference(part.value);\n      }\n\n      return internals.reference(part.value);\n    });\n  }\n\n  _subFormula(string, name) {\n    const method = this.settings.functions[name];\n\n    if (typeof method !== 'function') {\n      throw new Error(`Formula contains unknown function ${name}`);\n    }\n\n    let args = [];\n\n    if (string) {\n      let current = '';\n      let parenthesis = 0;\n      let literal = false;\n\n      const flush = () => {\n        if (!current) {\n          throw new Error(`Formula contains function ${name} with invalid arguments ${string}`);\n        }\n\n        args.push(current);\n        current = '';\n      };\n\n      for (let i = 0; i < string.length; ++i) {\n        const c = string[i];\n\n        if (literal) {\n          current += c;\n\n          if (c === literal) {\n            literal = false;\n          }\n        } else if (c in internals.literals && !parenthesis) {\n          current += c;\n          literal = internals.literals[c];\n        } else if (c === ',' && !parenthesis) {\n          flush();\n        } else {\n          current += c;\n\n          if (c === '(') {\n            ++parenthesis;\n          } else if (c === ')') {\n            --parenthesis;\n          }\n        }\n      }\n\n      flush();\n    }\n\n    args = args.map(arg => new exports.Parser(arg, this.settings));\n    return function (context) {\n      const innerValues = [];\n\n      for (const arg of args) {\n        innerValues.push(arg.evaluate(context));\n      }\n\n      return method.call(context, ...innerValues);\n    };\n  }\n\n  evaluate(context) {\n    const parts = this._parts.slice(); // Prefix operators\n\n\n    for (let i = parts.length - 2; i >= 0; --i) {\n      const part = parts[i];\n\n      if (part && part.type === 'operator') {\n        const current = parts[i + 1];\n        parts.splice(i + 1, 1);\n        const value = internals.evaluate(current, context);\n        parts[i] = internals.single(part.value, value);\n      }\n    } // Left-right operators\n\n\n    internals.operatorsOrder.forEach(set => {\n      for (let i = 1; i < parts.length - 1;) {\n        if (set.includes(parts[i])) {\n          const operator = parts[i];\n          const left = internals.evaluate(parts[i - 1], context);\n          const right = internals.evaluate(parts[i + 1], context);\n          parts.splice(i, 2);\n          const result = internals.calculate(operator, left, right);\n          parts[i - 1] = result === 0 ? 0 : result; // Convert -0\n        } else {\n          i += 2;\n        }\n      }\n    });\n    return internals.evaluate(parts[0], context);\n  }\n\n};\nexports.Parser.prototype[internals.symbol] = true;\n\ninternals.reference = function (name) {\n  return function (context) {\n    return context && context[name] !== undefined ? context[name] : null;\n  };\n};\n\ninternals.evaluate = function (part, context) {\n  if (part === null) {\n    return null;\n  }\n\n  if (typeof part === 'function') {\n    return part(context);\n  }\n\n  if (part[internals.symbol]) {\n    return part.evaluate(context);\n  }\n\n  return part;\n};\n\ninternals.single = function (operator, value) {\n  if (operator === '!') {\n    return value ? false : true;\n  } // operator === 'n'\n\n\n  const negative = -value;\n\n  if (negative === 0) {\n    // Override -0\n    return 0;\n  }\n\n  return negative;\n};\n\ninternals.calculate = function (operator, left, right) {\n  if (operator === '??') {\n    return internals.exists(left) ? left : right;\n  }\n\n  if (typeof left === 'string' || typeof right === 'string') {\n    if (operator === '+') {\n      left = internals.exists(left) ? left : '';\n      right = internals.exists(right) ? right : '';\n      return left + right;\n    }\n  } else {\n    switch (operator) {\n      case '^':\n        return Math.pow(left, right);\n\n      case '*':\n        return left * right;\n\n      case '/':\n        return left / right;\n\n      case '%':\n        return left % right;\n\n      case '+':\n        return left + right;\n\n      case '-':\n        return left - right;\n    }\n  }\n\n  switch (operator) {\n    case '<':\n      return left < right;\n\n    case '<=':\n      return left <= right;\n\n    case '>':\n      return left > right;\n\n    case '>=':\n      return left >= right;\n\n    case '==':\n      return left === right;\n\n    case '!=':\n      return left !== right;\n\n    case '&&':\n      return left && right;\n\n    case '||':\n      return left || right;\n  }\n\n  return null;\n};\n\ninternals.exists = function (value) {\n  return value !== null && value !== undefined;\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/@sideway/formula/lib/index.js?");

/***/ }),

/***/ "./node_modules/@sideway/pinpoint/lib/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@sideway/pinpoint/lib/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nconst internals = {};\n\nexports.location = function (depth = 0) {\n  const orig = Error.prepareStackTrace;\n\n  Error.prepareStackTrace = (ignore, stack) => stack;\n\n  const capture = {};\n  Error.captureStackTrace(capture, this);\n  const line = capture.stack[depth + 1];\n  Error.prepareStackTrace = orig;\n  return {\n    filename: line.getFileName(),\n    line: line.getLineNumber()\n  };\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/@sideway/pinpoint/lib/index.js?");

/***/ }),

/***/ "./node_modules/joi/lib/annotate.js":
/*!******************************************!*\
  !*** ./node_modules/joi/lib/annotate.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nconst Clone = __webpack_require__(/*! @hapi/hoek/lib/clone */ \"./node_modules/@hapi/hoek/lib/clone.js\");\n\nconst Common = __webpack_require__(/*! ./common */ \"./node_modules/joi/lib/common.js\");\n\nconst internals = {\n  annotations: Symbol('annotations')\n};\n\nexports.error = function (stripColorCodes) {\n  if (!this._original || typeof this._original !== 'object') {\n    return this.details[0].message;\n  }\n\n  const redFgEscape = stripColorCodes ? '' : '\\u001b[31m';\n  const redBgEscape = stripColorCodes ? '' : '\\u001b[41m';\n  const endColor = stripColorCodes ? '' : '\\u001b[0m';\n  const obj = Clone(this._original);\n\n  for (let i = this.details.length - 1; i >= 0; --i) {\n    // Reverse order to process deepest child first\n    const pos = i + 1;\n    const error = this.details[i];\n    const path = error.path;\n    let node = obj;\n\n    for (let j = 0;; ++j) {\n      const seg = path[j];\n\n      if (Common.isSchema(node)) {\n        node = node.clone(); // joi schemas are not cloned by hoek, we have to take this extra step\n      }\n\n      if (j + 1 < path.length && typeof node[seg] !== 'string') {\n        node = node[seg];\n      } else {\n        const refAnnotations = node[internals.annotations] || {\n          errors: {},\n          missing: {}\n        };\n        node[internals.annotations] = refAnnotations;\n        const cacheKey = seg || error.context.key;\n\n        if (node[seg] !== undefined) {\n          refAnnotations.errors[cacheKey] = refAnnotations.errors[cacheKey] || [];\n          refAnnotations.errors[cacheKey].push(pos);\n        } else {\n          refAnnotations.missing[cacheKey] = pos;\n        }\n\n        break;\n      }\n    }\n  }\n\n  const replacers = {\n    key: /_\\$key\\$_([, \\d]+)_\\$end\\$_\"/g,\n    missing: /\"_\\$miss\\$_([^|]+)\\|(\\d+)_\\$end\\$_\": \"__missing__\"/g,\n    arrayIndex: /\\s*\"_\\$idx\\$_([, \\d]+)_\\$end\\$_\",?\\n(.*)/g,\n    specials: /\"\\[(NaN|Symbol.*|-?Infinity|function.*|\\(.*)]\"/g\n  };\n  let message = internals.safeStringify(obj, 2).replace(replacers.key, ($0, $1) => `\" ${redFgEscape}[${$1}]${endColor}`).replace(replacers.missing, ($0, $1, $2) => `${redBgEscape}\"${$1}\"${endColor}${redFgEscape} [${$2}]: -- missing --${endColor}`).replace(replacers.arrayIndex, ($0, $1, $2) => `\\n${$2} ${redFgEscape}[${$1}]${endColor}`).replace(replacers.specials, ($0, $1) => $1);\n  message = `${message}\\n${redFgEscape}`;\n\n  for (let i = 0; i < this.details.length; ++i) {\n    const pos = i + 1;\n    message = `${message}\\n[${pos}] ${this.details[i].message}`;\n  }\n\n  message = message + endColor;\n  return message;\n}; // Inspired by json-stringify-safe\n\n\ninternals.safeStringify = function (obj, spaces) {\n  return JSON.stringify(obj, internals.serializer(), spaces);\n};\n\ninternals.serializer = function () {\n  const keys = [];\n  const stack = [];\n\n  const cycleReplacer = (key, value) => {\n    if (stack[0] === value) {\n      return '[Circular ~]';\n    }\n\n    return '[Circular ~.' + keys.slice(0, stack.indexOf(value)).join('.') + ']';\n  };\n\n  return function (key, value) {\n    if (stack.length > 0) {\n      const thisPos = stack.indexOf(this);\n\n      if (~thisPos) {\n        stack.length = thisPos + 1;\n        keys.length = thisPos + 1;\n        keys[thisPos] = key;\n      } else {\n        stack.push(this);\n        keys.push(key);\n      }\n\n      if (~stack.indexOf(value)) {\n        value = cycleReplacer.call(this, key, value);\n      }\n    } else {\n      stack.push(value);\n    }\n\n    if (value) {\n      const annotations = value[internals.annotations];\n\n      if (annotations) {\n        if (Array.isArray(value)) {\n          const annotated = [];\n\n          for (let i = 0; i < value.length; ++i) {\n            if (annotations.errors[i]) {\n              annotated.push(`_$idx$_${annotations.errors[i].sort().join(', ')}_$end$_`);\n            }\n\n            annotated.push(value[i]);\n          }\n\n          value = annotated;\n        } else {\n          for (const errorKey in annotations.errors) {\n            value[`${errorKey}_$key$_${annotations.errors[errorKey].sort().join(', ')}_$end$_`] = value[errorKey];\n            value[errorKey] = undefined;\n          }\n\n          for (const missingKey in annotations.missing) {\n            value[`_$miss$_${missingKey}|${annotations.missing[missingKey]}_$end$_`] = '__missing__';\n          }\n        }\n\n        return value;\n      }\n    }\n\n    if (value === Infinity || value === -Infinity || Number.isNaN(value) || typeof value === 'function' || typeof value === 'symbol') {\n      return '[' + value.toString() + ']';\n    }\n\n    return value;\n  };\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/lib/annotate.js?");

/***/ }),

/***/ "./node_modules/joi/lib/base.js":
/*!**************************************!*\
  !*** ./node_modules/joi/lib/base.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"./node_modules/@hapi/hoek/lib/assert.js\");\n\nconst Clone = __webpack_require__(/*! @hapi/hoek/lib/clone */ \"./node_modules/@hapi/hoek/lib/clone.js\");\n\nconst DeepEqual = __webpack_require__(/*! @hapi/hoek/lib/deepEqual */ \"./node_modules/@hapi/hoek/lib/deepEqual.js\");\n\nconst Merge = __webpack_require__(/*! @hapi/hoek/lib/merge */ \"./node_modules/@hapi/hoek/lib/merge.js\");\n\nconst Cache = __webpack_require__(/*! ./cache */ \"./node_modules/joi/lib/cache.js\");\n\nconst Common = __webpack_require__(/*! ./common */ \"./node_modules/joi/lib/common.js\");\n\nconst Compile = __webpack_require__(/*! ./compile */ \"./node_modules/joi/lib/compile.js\");\n\nconst Errors = __webpack_require__(/*! ./errors */ \"./node_modules/joi/lib/errors.js\");\n\nconst Extend = __webpack_require__(/*! ./extend */ \"./node_modules/joi/lib/extend.js\");\n\nconst Manifest = __webpack_require__(/*! ./manifest */ \"./node_modules/joi/lib/manifest.js\");\n\nconst Messages = __webpack_require__(/*! ./messages */ \"./node_modules/joi/lib/messages.js\");\n\nconst Modify = __webpack_require__(/*! ./modify */ \"./node_modules/joi/lib/modify.js\");\n\nconst Ref = __webpack_require__(/*! ./ref */ \"./node_modules/joi/lib/ref.js\");\n\nconst Trace = __webpack_require__(/*! ./trace */ \"./node_modules/joi/lib/trace.js\");\n\nconst Validator = __webpack_require__(/*! ./validator */ \"./node_modules/joi/lib/validator.js\");\n\nconst Values = __webpack_require__(/*! ./values */ \"./node_modules/joi/lib/values.js\");\n\nconst internals = {};\ninternals.Base = class {\n  constructor(type) {\n    // Naming: public, _private, $_extension, $_mutate{action}\n    this.type = type;\n    this.$_root = null;\n    this._definition = {};\n\n    this._reset();\n  }\n\n  _reset() {\n    this._ids = new Modify.Ids();\n    this._preferences = null;\n    this._refs = new Ref.Manager();\n    this._cache = null;\n    this._valids = null;\n    this._invalids = null;\n    this._flags = {};\n    this._rules = [];\n    this._singleRules = new Map(); // The rule options passed for non-multi rules\n\n    this.$_terms = {}; // Hash of arrays of immutable objects (extended by other types)\n\n    this.$_temp = {\n      // Runtime state (not cloned)\n      ruleset: null,\n      // null: use last, false: error, number: start position\n      whens: {} // Runtime cache of generated whens\n\n    };\n  } // Manifest\n\n\n  describe() {\n    Assert(typeof Manifest.describe === 'function', 'Manifest functionality disabled');\n    return Manifest.describe(this);\n  } // Rules\n\n\n  allow(...values) {\n    Common.verifyFlat(values, 'allow');\n    return this._values(values, '_valids');\n  }\n\n  alter(targets) {\n    Assert(targets && typeof targets === 'object' && !Array.isArray(targets), 'Invalid targets argument');\n    Assert(!this._inRuleset(), 'Cannot set alterations inside a ruleset');\n    const obj = this.clone();\n    obj.$_terms.alterations = obj.$_terms.alterations || [];\n\n    for (const target in targets) {\n      const adjuster = targets[target];\n      Assert(typeof adjuster === 'function', 'Alteration adjuster for', target, 'must be a function');\n      obj.$_terms.alterations.push({\n        target,\n        adjuster\n      });\n    }\n\n    obj.$_temp.ruleset = false;\n    return obj;\n  }\n\n  artifact(id) {\n    Assert(id !== undefined, 'Artifact cannot be undefined');\n    Assert(!this._cache, 'Cannot set an artifact with a rule cache');\n    return this.$_setFlag('artifact', id);\n  }\n\n  cast(to) {\n    Assert(to === false || typeof to === 'string', 'Invalid to value');\n    Assert(to === false || this._definition.cast[to], 'Type', this.type, 'does not support casting to', to);\n    return this.$_setFlag('cast', to === false ? undefined : to);\n  }\n\n  default(value, options) {\n    return this._default('default', value, options);\n  }\n\n  description(desc) {\n    Assert(desc && typeof desc === 'string', 'Description must be a non-empty string');\n    return this.$_setFlag('description', desc);\n  }\n\n  empty(schema) {\n    const obj = this.clone();\n\n    if (schema !== undefined) {\n      schema = obj.$_compile(schema, {\n        override: false\n      });\n    }\n\n    return obj.$_setFlag('empty', schema, {\n      clone: false\n    });\n  }\n\n  error(err) {\n    Assert(err, 'Missing error');\n    Assert(err instanceof Error || typeof err === 'function', 'Must provide a valid Error object or a function');\n    return this.$_setFlag('error', err);\n  }\n\n  example(example, options = {}) {\n    Assert(example !== undefined, 'Missing example');\n    Common.assertOptions(options, ['override']);\n    return this._inner('examples', example, {\n      single: true,\n      override: options.override\n    });\n  }\n\n  external(method, description) {\n    if (typeof method === 'object') {\n      Assert(!description, 'Cannot combine options with description');\n      description = method.description;\n      method = method.method;\n    }\n\n    Assert(typeof method === 'function', 'Method must be a function');\n    Assert(description === undefined || description && typeof description === 'string', 'Description must be a non-empty string');\n    return this._inner('externals', {\n      method,\n      description\n    }, {\n      single: true\n    });\n  }\n\n  failover(value, options) {\n    return this._default('failover', value, options);\n  }\n\n  forbidden() {\n    return this.presence('forbidden');\n  }\n\n  id(id) {\n    if (!id) {\n      return this.$_setFlag('id', undefined);\n    }\n\n    Assert(typeof id === 'string', 'id must be a non-empty string');\n    Assert(/^[^\\.]+$/.test(id), 'id cannot contain period character');\n    return this.$_setFlag('id', id);\n  }\n\n  invalid(...values) {\n    return this._values(values, '_invalids');\n  }\n\n  label(name) {\n    Assert(name && typeof name === 'string', 'Label name must be a non-empty string');\n    return this.$_setFlag('label', name);\n  }\n\n  meta(meta) {\n    Assert(meta !== undefined, 'Meta cannot be undefined');\n    return this._inner('metas', meta, {\n      single: true\n    });\n  }\n\n  note(...notes) {\n    Assert(notes.length, 'Missing notes');\n\n    for (const note of notes) {\n      Assert(note && typeof note === 'string', 'Notes must be non-empty strings');\n    }\n\n    return this._inner('notes', notes);\n  }\n\n  only(mode = true) {\n    Assert(typeof mode === 'boolean', 'Invalid mode:', mode);\n    return this.$_setFlag('only', mode);\n  }\n\n  optional() {\n    return this.presence('optional');\n  }\n\n  prefs(prefs) {\n    Assert(prefs, 'Missing preferences');\n    Assert(prefs.context === undefined, 'Cannot override context');\n    Assert(prefs.externals === undefined, 'Cannot override externals');\n    Assert(prefs.warnings === undefined, 'Cannot override warnings');\n    Assert(prefs.debug === undefined, 'Cannot override debug');\n    Common.checkPreferences(prefs);\n    const obj = this.clone();\n    obj._preferences = Common.preferences(obj._preferences, prefs);\n    return obj;\n  }\n\n  presence(mode) {\n    Assert(['optional', 'required', 'forbidden'].includes(mode), 'Unknown presence mode', mode);\n    return this.$_setFlag('presence', mode);\n  }\n\n  raw(enabled = true) {\n    return this.$_setFlag('result', enabled ? 'raw' : undefined);\n  }\n\n  result(mode) {\n    Assert(['raw', 'strip'].includes(mode), 'Unknown result mode', mode);\n    return this.$_setFlag('result', mode);\n  }\n\n  required() {\n    return this.presence('required');\n  }\n\n  strict(enabled) {\n    const obj = this.clone();\n    const convert = enabled === undefined ? false : !enabled;\n    obj._preferences = Common.preferences(obj._preferences, {\n      convert\n    });\n    return obj;\n  }\n\n  strip(enabled = true) {\n    return this.$_setFlag('result', enabled ? 'strip' : undefined);\n  }\n\n  tag(...tags) {\n    Assert(tags.length, 'Missing tags');\n\n    for (const tag of tags) {\n      Assert(tag && typeof tag === 'string', 'Tags must be non-empty strings');\n    }\n\n    return this._inner('tags', tags);\n  }\n\n  unit(name) {\n    Assert(name && typeof name === 'string', 'Unit name must be a non-empty string');\n    return this.$_setFlag('unit', name);\n  }\n\n  valid(...values) {\n    Common.verifyFlat(values, 'valid');\n    const obj = this.allow(...values);\n    obj.$_setFlag('only', !!obj._valids, {\n      clone: false\n    });\n    return obj;\n  }\n\n  when(condition, options) {\n    const obj = this.clone();\n\n    if (!obj.$_terms.whens) {\n      obj.$_terms.whens = [];\n    }\n\n    const when = Compile.when(obj, condition, options);\n\n    if (!['any', 'link'].includes(obj.type)) {\n      const conditions = when.is ? [when] : when.switch;\n\n      for (const item of conditions) {\n        Assert(!item.then || item.then.type === 'any' || item.then.type === obj.type, 'Cannot combine', obj.type, 'with', item.then && item.then.type);\n        Assert(!item.otherwise || item.otherwise.type === 'any' || item.otherwise.type === obj.type, 'Cannot combine', obj.type, 'with', item.otherwise && item.otherwise.type);\n      }\n    }\n\n    obj.$_terms.whens.push(when);\n    return obj.$_mutateRebuild();\n  } // Helpers\n\n\n  cache(cache) {\n    Assert(!this._inRuleset(), 'Cannot set caching inside a ruleset');\n    Assert(!this._cache, 'Cannot override schema cache');\n    Assert(this._flags.artifact === undefined, 'Cannot cache a rule with an artifact');\n    const obj = this.clone();\n    obj._cache = cache || Cache.provider.provision();\n    obj.$_temp.ruleset = false;\n    return obj;\n  }\n\n  clone() {\n    const obj = Object.create(Object.getPrototypeOf(this));\n    return this._assign(obj);\n  }\n\n  concat(source) {\n    Assert(Common.isSchema(source), 'Invalid schema object');\n    Assert(this.type === 'any' || source.type === 'any' || source.type === this.type, 'Cannot merge type', this.type, 'with another type:', source.type);\n    Assert(!this._inRuleset(), 'Cannot concatenate onto a schema with open ruleset');\n    Assert(!source._inRuleset(), 'Cannot concatenate a schema with open ruleset');\n    let obj = this.clone();\n\n    if (this.type === 'any' && source.type !== 'any') {\n      // Change obj to match source type\n      const tmpObj = source.clone();\n\n      for (const key of Object.keys(obj)) {\n        if (key !== 'type') {\n          tmpObj[key] = obj[key];\n        }\n      }\n\n      obj = tmpObj;\n    }\n\n    obj._ids.concat(source._ids);\n\n    obj._refs.register(source, Ref.toSibling);\n\n    obj._preferences = obj._preferences ? Common.preferences(obj._preferences, source._preferences) : source._preferences;\n    obj._valids = Values.merge(obj._valids, source._valids, source._invalids);\n    obj._invalids = Values.merge(obj._invalids, source._invalids, source._valids); // Remove unique rules present in source\n\n    for (const name of source._singleRules.keys()) {\n      if (obj._singleRules.has(name)) {\n        obj._rules = obj._rules.filter(target => target.keep || target.name !== name);\n\n        obj._singleRules.delete(name);\n      }\n    } // Rules\n\n\n    for (const test of source._rules) {\n      if (!source._definition.rules[test.method].multi) {\n        obj._singleRules.set(test.name, test);\n      }\n\n      obj._rules.push(test);\n    } // Flags\n\n\n    if (obj._flags.empty && source._flags.empty) {\n      obj._flags.empty = obj._flags.empty.concat(source._flags.empty);\n      const flags = Object.assign({}, source._flags);\n      delete flags.empty;\n      Merge(obj._flags, flags);\n    } else if (source._flags.empty) {\n      obj._flags.empty = source._flags.empty;\n      const flags = Object.assign({}, source._flags);\n      delete flags.empty;\n      Merge(obj._flags, flags);\n    } else {\n      Merge(obj._flags, source._flags);\n    } // Terms\n\n\n    for (const key in source.$_terms) {\n      const terms = source.$_terms[key];\n\n      if (!terms) {\n        if (!obj.$_terms[key]) {\n          obj.$_terms[key] = terms;\n        }\n\n        continue;\n      }\n\n      if (!obj.$_terms[key]) {\n        obj.$_terms[key] = terms.slice();\n        continue;\n      }\n\n      obj.$_terms[key] = obj.$_terms[key].concat(terms);\n    } // Tracing\n\n\n    if (this.$_root._tracer) {\n      this.$_root._tracer._combine(obj, [this, source]);\n    } // Rebuild\n\n\n    return obj.$_mutateRebuild();\n  }\n\n  extend(options) {\n    Assert(!options.base, 'Cannot extend type with another base');\n    return Extend.type(this, options);\n  }\n\n  extract(path) {\n    path = Array.isArray(path) ? path : path.split('.');\n    return this._ids.reach(path);\n  }\n\n  fork(paths, adjuster) {\n    Assert(!this._inRuleset(), 'Cannot fork inside a ruleset');\n    let obj = this; // eslint-disable-line consistent-this\n\n    for (let path of [].concat(paths)) {\n      path = Array.isArray(path) ? path : path.split('.');\n      obj = obj._ids.fork(path, adjuster, obj);\n    }\n\n    obj.$_temp.ruleset = false;\n    return obj;\n  }\n\n  rule(options) {\n    const def = this._definition;\n    Common.assertOptions(options, Object.keys(def.modifiers));\n    Assert(this.$_temp.ruleset !== false, 'Cannot apply rules to empty ruleset or the last rule added does not support rule properties');\n    const start = this.$_temp.ruleset === null ? this._rules.length - 1 : this.$_temp.ruleset;\n    Assert(start >= 0 && start < this._rules.length, 'Cannot apply rules to empty ruleset');\n    const obj = this.clone();\n\n    for (let i = start; i < obj._rules.length; ++i) {\n      const original = obj._rules[i];\n      const rule = Clone(original);\n\n      for (const name in options) {\n        def.modifiers[name](rule, options[name]);\n        Assert(rule.name === original.name, 'Cannot change rule name');\n      }\n\n      obj._rules[i] = rule;\n\n      if (obj._singleRules.get(rule.name) === original) {\n        obj._singleRules.set(rule.name, rule);\n      }\n    }\n\n    obj.$_temp.ruleset = false;\n    return obj.$_mutateRebuild();\n  }\n\n  get ruleset() {\n    Assert(!this._inRuleset(), 'Cannot start a new ruleset without closing the previous one');\n    const obj = this.clone();\n    obj.$_temp.ruleset = obj._rules.length;\n    return obj;\n  }\n\n  get $() {\n    return this.ruleset;\n  }\n\n  tailor(targets) {\n    targets = [].concat(targets);\n    Assert(!this._inRuleset(), 'Cannot tailor inside a ruleset');\n    let obj = this; // eslint-disable-line consistent-this\n\n    if (this.$_terms.alterations) {\n      for (const {\n        target,\n        adjuster\n      } of this.$_terms.alterations) {\n        if (targets.includes(target)) {\n          obj = adjuster(obj);\n          Assert(Common.isSchema(obj), 'Alteration adjuster for', target, 'failed to return a schema object');\n        }\n      }\n    }\n\n    obj = obj.$_modify({\n      each: item => item.tailor(targets),\n      ref: false\n    });\n    obj.$_temp.ruleset = false;\n    return obj.$_mutateRebuild();\n  }\n\n  tracer() {\n    return Trace.location ? Trace.location(this) : this; // $lab:coverage:ignore$\n  }\n\n  validate(value, options) {\n    return Validator.entry(value, this, options);\n  }\n\n  validateAsync(value, options) {\n    return Validator.entryAsync(value, this, options);\n  } // Extensions\n\n\n  $_addRule(options) {\n    // Normalize rule\n    if (typeof options === 'string') {\n      options = {\n        name: options\n      };\n    }\n\n    Assert(options && typeof options === 'object', 'Invalid options');\n    Assert(options.name && typeof options.name === 'string', 'Invalid rule name');\n\n    for (const key in options) {\n      Assert(key[0] !== '_', 'Cannot set private rule properties');\n    }\n\n    const rule = Object.assign({}, options); // Shallow cloned\n\n    rule._resolve = [];\n    rule.method = rule.method || rule.name;\n    const definition = this._definition.rules[rule.method];\n    const args = rule.args;\n    Assert(definition, 'Unknown rule', rule.method); // Args\n\n    const obj = this.clone();\n\n    if (args) {\n      Assert(Object.keys(args).length === 1 || Object.keys(args).length === this._definition.rules[rule.name].args.length, 'Invalid rule definition for', this.type, rule.name);\n\n      for (const key in args) {\n        let arg = args[key];\n\n        if (arg === undefined) {\n          delete args[key];\n          continue;\n        }\n\n        if (definition.argsByName) {\n          const resolver = definition.argsByName.get(key);\n\n          if (resolver.ref && Common.isResolvable(arg)) {\n            rule._resolve.push(key);\n\n            obj.$_mutateRegister(arg);\n          } else {\n            if (resolver.normalize) {\n              arg = resolver.normalize(arg);\n              args[key] = arg;\n            }\n\n            if (resolver.assert) {\n              const error = Common.validateArg(arg, key, resolver);\n              Assert(!error, error, 'or reference');\n            }\n          }\n        }\n\n        args[key] = arg;\n      }\n    } // Unique rules\n\n\n    if (!definition.multi) {\n      obj._ruleRemove(rule.name, {\n        clone: false\n      });\n\n      obj._singleRules.set(rule.name, rule);\n    }\n\n    if (obj.$_temp.ruleset === false) {\n      obj.$_temp.ruleset = null;\n    }\n\n    if (definition.priority) {\n      obj._rules.unshift(rule);\n    } else {\n      obj._rules.push(rule);\n    }\n\n    return obj;\n  }\n\n  $_compile(schema, options) {\n    return Compile.schema(this.$_root, schema, options);\n  }\n\n  $_createError(code, value, local, state, prefs, options = {}) {\n    const flags = options.flags !== false ? this._flags : {};\n    const messages = options.messages ? Messages.merge(this._definition.messages, options.messages) : this._definition.messages;\n    return new Errors.Report(code, value, local, flags, messages, state, prefs);\n  }\n\n  $_getFlag(name) {\n    return this._flags[name];\n  }\n\n  $_getRule(name) {\n    return this._singleRules.get(name);\n  }\n\n  $_mapLabels(path) {\n    path = Array.isArray(path) ? path : path.split('.');\n    return this._ids.labels(path);\n  }\n\n  $_match(value, state, prefs, overrides) {\n    prefs = Object.assign({}, prefs); // Shallow cloned\n\n    prefs.abortEarly = true;\n    prefs._externals = false;\n    state.snapshot();\n    const result = !Validator.validate(value, this, state, prefs, overrides).errors;\n    state.restore();\n    return result;\n  }\n\n  $_modify(options) {\n    Common.assertOptions(options, ['each', 'once', 'ref', 'schema']);\n    return Modify.schema(this, options) || this;\n  }\n\n  $_mutateRebuild() {\n    Assert(!this._inRuleset(), 'Cannot add this rule inside a ruleset');\n\n    this._refs.reset();\n\n    this._ids.reset();\n\n    const each = (item, {\n      source,\n      name,\n      path,\n      key\n    }) => {\n      const family = this._definition[source][name] && this._definition[source][name].register;\n\n      if (family !== false) {\n        this.$_mutateRegister(item, {\n          family,\n          key\n        });\n      }\n    };\n\n    this.$_modify({\n      each\n    });\n\n    if (this._definition.rebuild) {\n      this._definition.rebuild(this);\n    }\n\n    this.$_temp.ruleset = false;\n    return this;\n  }\n\n  $_mutateRegister(schema, {\n    family,\n    key\n  } = {}) {\n    this._refs.register(schema, family);\n\n    this._ids.register(schema, {\n      key\n    });\n  }\n\n  $_property(name) {\n    return this._definition.properties[name];\n  }\n\n  $_reach(path) {\n    return this._ids.reach(path);\n  }\n\n  $_rootReferences() {\n    return this._refs.roots();\n  }\n\n  $_setFlag(name, value, options = {}) {\n    Assert(name[0] === '_' || !this._inRuleset(), 'Cannot set flag inside a ruleset');\n    const flag = this._definition.flags[name] || {};\n\n    if (DeepEqual(value, flag.default)) {\n      value = undefined;\n    }\n\n    if (DeepEqual(value, this._flags[name])) {\n      return this;\n    }\n\n    const obj = options.clone !== false ? this.clone() : this;\n\n    if (value !== undefined) {\n      obj._flags[name] = value;\n      obj.$_mutateRegister(value);\n    } else {\n      delete obj._flags[name];\n    }\n\n    if (name[0] !== '_') {\n      obj.$_temp.ruleset = false;\n    }\n\n    return obj;\n  }\n\n  $_parent(method, ...args) {\n    return this[method][Common.symbols.parent].call(this, ...args);\n  }\n\n  $_validate(value, state, prefs) {\n    return Validator.validate(value, this, state, prefs);\n  } // Internals\n\n\n  _assign(target) {\n    target.type = this.type;\n    target.$_root = this.$_root;\n    target.$_temp = Object.assign({}, this.$_temp);\n    target.$_temp.whens = {};\n    target._ids = this._ids.clone();\n    target._preferences = this._preferences;\n    target._valids = this._valids && this._valids.clone();\n    target._invalids = this._invalids && this._invalids.clone();\n    target._rules = this._rules.slice();\n    target._singleRules = Clone(this._singleRules, {\n      shallow: true\n    });\n    target._refs = this._refs.clone();\n    target._flags = Object.assign({}, this._flags);\n    target._cache = null;\n    target.$_terms = {};\n\n    for (const key in this.$_terms) {\n      target.$_terms[key] = this.$_terms[key] ? this.$_terms[key].slice() : null;\n    } // Backwards compatibility\n\n\n    target.$_super = {};\n\n    for (const override in this.$_super) {\n      target.$_super[override] = this._super[override].bind(target);\n    }\n\n    return target;\n  }\n\n  _bare() {\n    const obj = this.clone();\n\n    obj._reset();\n\n    const terms = obj._definition.terms;\n\n    for (const name in terms) {\n      const term = terms[name];\n      obj.$_terms[name] = term.init;\n    }\n\n    return obj.$_mutateRebuild();\n  }\n\n  _default(flag, value, options = {}) {\n    Common.assertOptions(options, 'literal');\n    Assert(value !== undefined, 'Missing', flag, 'value');\n    Assert(typeof value === 'function' || !options.literal, 'Only function value supports literal option');\n\n    if (typeof value === 'function' && options.literal) {\n      value = {\n        [Common.symbols.literal]: true,\n        literal: value\n      };\n    }\n\n    const obj = this.$_setFlag(flag, value);\n    return obj;\n  }\n\n  _generate(value, state, prefs) {\n    if (!this.$_terms.whens) {\n      return {\n        schema: this\n      };\n    } // Collect matching whens\n\n\n    const whens = [];\n    const ids = [];\n\n    for (let i = 0; i < this.$_terms.whens.length; ++i) {\n      const when = this.$_terms.whens[i];\n\n      if (when.concat) {\n        whens.push(when.concat);\n        ids.push(`${i}.concat`);\n        continue;\n      }\n\n      const input = when.ref ? when.ref.resolve(value, state, prefs) : value;\n      const tests = when.is ? [when] : when.switch;\n      const before = ids.length;\n\n      for (let j = 0; j < tests.length; ++j) {\n        const {\n          is,\n          then,\n          otherwise\n        } = tests[j];\n        const baseId = `${i}${when.switch ? '.' + j : ''}`;\n\n        if (is.$_match(input, state.nest(is, `${baseId}.is`), prefs)) {\n          if (then) {\n            const localState = state.localize([...state.path, `${baseId}.then`], state.ancestors, state.schemas);\n\n            const {\n              schema: generated,\n              id\n            } = then._generate(value, localState, prefs);\n\n            whens.push(generated);\n            ids.push(`${baseId}.then${id ? `(${id})` : ''}`);\n            break;\n          }\n        } else if (otherwise) {\n          const localState = state.localize([...state.path, `${baseId}.otherwise`], state.ancestors, state.schemas);\n\n          const {\n            schema: generated,\n            id\n          } = otherwise._generate(value, localState, prefs);\n\n          whens.push(generated);\n          ids.push(`${baseId}.otherwise${id ? `(${id})` : ''}`);\n          break;\n        }\n      }\n\n      if (when.break && ids.length > before) {\n        // Something matched\n        break;\n      }\n    } // Check cache\n\n\n    const id = ids.join(', ');\n    state.mainstay.tracer.debug(state, 'rule', 'when', id);\n\n    if (!id) {\n      return {\n        schema: this\n      };\n    }\n\n    if (!state.mainstay.tracer.active && this.$_temp.whens[id]) {\n      return {\n        schema: this.$_temp.whens[id],\n        id\n      };\n    } // Generate dynamic schema\n\n\n    let obj = this; // eslint-disable-line consistent-this\n\n    if (this._definition.generate) {\n      obj = this._definition.generate(this, value, state, prefs);\n    } // Apply whens\n\n\n    for (const when of whens) {\n      obj = obj.concat(when);\n    } // Tracing\n\n\n    if (this.$_root._tracer) {\n      this.$_root._tracer._combine(obj, [this, ...whens]);\n    } // Cache result\n\n\n    this.$_temp.whens[id] = obj;\n    return {\n      schema: obj,\n      id\n    };\n  }\n\n  _inner(type, values, options = {}) {\n    Assert(!this._inRuleset(), `Cannot set ${type} inside a ruleset`);\n    const obj = this.clone();\n\n    if (!obj.$_terms[type] || options.override) {\n      obj.$_terms[type] = [];\n    }\n\n    if (options.single) {\n      obj.$_terms[type].push(values);\n    } else {\n      obj.$_terms[type].push(...values);\n    }\n\n    obj.$_temp.ruleset = false;\n    return obj;\n  }\n\n  _inRuleset() {\n    return this.$_temp.ruleset !== null && this.$_temp.ruleset !== false;\n  }\n\n  _ruleRemove(name, options = {}) {\n    if (!this._singleRules.has(name)) {\n      return this;\n    }\n\n    const obj = options.clone !== false ? this.clone() : this;\n\n    obj._singleRules.delete(name);\n\n    const filtered = [];\n\n    for (let i = 0; i < obj._rules.length; ++i) {\n      const test = obj._rules[i];\n\n      if (test.name === name && !test.keep) {\n        if (obj._inRuleset() && i < obj.$_temp.ruleset) {\n          --obj.$_temp.ruleset;\n        }\n\n        continue;\n      }\n\n      filtered.push(test);\n    }\n\n    obj._rules = filtered;\n    return obj;\n  }\n\n  _values(values, key) {\n    Common.verifyFlat(values, key.slice(1, -1));\n    const obj = this.clone();\n    const override = values[0] === Common.symbols.override;\n\n    if (override) {\n      values = values.slice(1);\n    }\n\n    if (!obj[key] && values.length) {\n      obj[key] = new Values();\n    } else if (override) {\n      obj[key] = values.length ? new Values() : null;\n      obj.$_mutateRebuild();\n    }\n\n    if (!obj[key]) {\n      return obj;\n    }\n\n    if (override) {\n      obj[key].override();\n    }\n\n    for (const value of values) {\n      Assert(value !== undefined, 'Cannot call allow/valid/invalid with undefined');\n      Assert(value !== Common.symbols.override, 'Override must be the first value');\n      const other = key === '_invalids' ? '_valids' : '_invalids';\n\n      if (obj[other]) {\n        obj[other].remove(value);\n\n        if (!obj[other].length) {\n          Assert(key === '_valids' || !obj._flags.only, 'Setting invalid value', value, 'leaves schema rejecting all values due to previous valid rule');\n          obj[other] = null;\n        }\n      }\n\n      obj[key].add(value, obj._refs);\n    }\n\n    return obj;\n  }\n\n};\ninternals.Base.prototype[Common.symbols.any] = {\n  version: Common.version,\n  compile: Compile.compile,\n  root: '$_root'\n};\ninternals.Base.prototype.isImmutable = true; // Prevents Hoek from deep cloning schema objects (must be on prototype)\n// Aliases\n\ninternals.Base.prototype.deny = internals.Base.prototype.invalid;\ninternals.Base.prototype.disallow = internals.Base.prototype.invalid;\ninternals.Base.prototype.equal = internals.Base.prototype.valid;\ninternals.Base.prototype.exist = internals.Base.prototype.required;\ninternals.Base.prototype.not = internals.Base.prototype.invalid;\ninternals.Base.prototype.options = internals.Base.prototype.prefs;\ninternals.Base.prototype.preferences = internals.Base.prototype.prefs;\nmodule.exports = new internals.Base();\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/lib/base.js?");

/***/ }),

/***/ "./node_modules/joi/lib/cache.js":
/*!***************************************!*\
  !*** ./node_modules/joi/lib/cache.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"./node_modules/@hapi/hoek/lib/assert.js\");\n\nconst Clone = __webpack_require__(/*! @hapi/hoek/lib/clone */ \"./node_modules/@hapi/hoek/lib/clone.js\");\n\nconst Common = __webpack_require__(/*! ./common */ \"./node_modules/joi/lib/common.js\");\n\nconst internals = {\n  max: 1000,\n  supported: new Set(['undefined', 'boolean', 'number', 'string'])\n};\nexports.provider = {\n  provision(options) {\n    return new internals.Cache(options);\n  }\n\n}; // Least Recently Used (LRU) Cache\n\ninternals.Cache = class {\n  constructor(options = {}) {\n    Common.assertOptions(options, ['max']);\n    Assert(options.max === undefined || options.max && options.max > 0 && isFinite(options.max), 'Invalid max cache size');\n    this._max = options.max || internals.max;\n    this._map = new Map(); // Map of nodes by key\n\n    this._list = new internals.List(); // List of nodes (most recently used in head)\n  }\n\n  get length() {\n    return this._map.size;\n  }\n\n  set(key, value) {\n    if (key !== null && !internals.supported.has(typeof key)) {\n      return;\n    }\n\n    let node = this._map.get(key);\n\n    if (node) {\n      node.value = value;\n\n      this._list.first(node);\n\n      return;\n    }\n\n    node = this._list.unshift({\n      key,\n      value\n    });\n\n    this._map.set(key, node);\n\n    this._compact();\n  }\n\n  get(key) {\n    const node = this._map.get(key);\n\n    if (node) {\n      this._list.first(node);\n\n      return Clone(node.value);\n    }\n  }\n\n  _compact() {\n    if (this._map.size > this._max) {\n      const node = this._list.pop();\n\n      this._map.delete(node.key);\n    }\n  }\n\n};\ninternals.List = class {\n  constructor() {\n    this.tail = null;\n    this.head = null;\n  }\n\n  unshift(node) {\n    node.next = null;\n    node.prev = this.head;\n\n    if (this.head) {\n      this.head.next = node;\n    }\n\n    this.head = node;\n\n    if (!this.tail) {\n      this.tail = node;\n    }\n\n    return node;\n  }\n\n  first(node) {\n    if (node === this.head) {\n      return;\n    }\n\n    this._remove(node);\n\n    this.unshift(node);\n  }\n\n  pop() {\n    return this._remove(this.tail);\n  }\n\n  _remove(node) {\n    const {\n      next,\n      prev\n    } = node;\n    next.prev = prev;\n\n    if (prev) {\n      prev.next = next;\n    }\n\n    if (node === this.tail) {\n      this.tail = next;\n    }\n\n    node.prev = null;\n    node.next = null;\n    return node;\n  }\n\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/lib/cache.js?");

/***/ }),

/***/ "./node_modules/joi/lib/common.js":
/*!****************************************!*\
  !*** ./node_modules/joi/lib/common.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"./node_modules/@hapi/hoek/lib/assert.js\");\n\nconst AssertError = __webpack_require__(/*! @hapi/hoek/lib/error */ \"./node_modules/@hapi/hoek/lib/error.js\");\n\nconst Pkg = __webpack_require__(/*! ../package.json */ \"./node_modules/joi/package.json\");\n\nlet Messages;\nlet Schemas;\nconst internals = {\n  isoDate: /^(?:[-+]\\d{2})?(?:\\d{4}(?!\\d{2}\\b))(?:(-?)(?:(?:0[1-9]|1[0-2])(?:\\1(?:[12]\\d|0[1-9]|3[01]))?|W(?:[0-4]\\d|5[0-2])(?:-?[1-7])?|(?:00[1-9]|0[1-9]\\d|[12]\\d{2}|3(?:[0-5]\\d|6[1-6])))(?![T]$|[T][\\d]+Z$)(?:[T\\s](?:(?:(?:[01]\\d|2[0-3])(?:(:?)[0-5]\\d)?|24\\:?00)(?:[.,]\\d+(?!:))?)(?:\\2[0-5]\\d(?:[.,]\\d+)?)?(?:[Z]|(?:[+-])(?:[01]\\d|2[0-3])(?::?[0-5]\\d)?)?)?)?$/\n};\nexports.version = Pkg.version;\nexports.defaults = {\n  abortEarly: true,\n  allowUnknown: false,\n  artifacts: false,\n  cache: true,\n  context: null,\n  convert: true,\n  dateFormat: 'iso',\n  errors: {\n    escapeHtml: false,\n    label: 'path',\n    language: null,\n    render: true,\n    stack: false,\n    wrap: {\n      label: '\"',\n      array: '[]'\n    }\n  },\n  externals: true,\n  messages: {},\n  nonEnumerables: false,\n  noDefaults: false,\n  presence: 'optional',\n  skipFunctions: false,\n  stripUnknown: false,\n  warnings: false\n};\nexports.symbols = {\n  any: Symbol.for('@hapi/joi/schema'),\n  // Used to internally identify any-based types (shared with other joi versions)\n  arraySingle: Symbol('arraySingle'),\n  deepDefault: Symbol('deepDefault'),\n  errors: Symbol('errors'),\n  literal: Symbol('literal'),\n  override: Symbol('override'),\n  parent: Symbol('parent'),\n  prefs: Symbol('prefs'),\n  ref: Symbol('ref'),\n  template: Symbol('template'),\n  values: Symbol('values')\n};\n\nexports.assertOptions = function (options, keys, name = 'Options') {\n  Assert(options && typeof options === 'object' && !Array.isArray(options), 'Options must be of type object');\n  const unknownKeys = Object.keys(options).filter(k => !keys.includes(k));\n  Assert(unknownKeys.length === 0, `${name} contain unknown keys: ${unknownKeys}`);\n};\n\nexports.checkPreferences = function (prefs) {\n  Schemas = Schemas || __webpack_require__(/*! ./schemas */ \"./node_modules/joi/lib/schemas.js\");\n  const result = Schemas.preferences.validate(prefs);\n\n  if (result.error) {\n    throw new AssertError([result.error.details[0].message]);\n  }\n};\n\nexports.compare = function (a, b, operator) {\n  switch (operator) {\n    case '=':\n      return a === b;\n\n    case '>':\n      return a > b;\n\n    case '<':\n      return a < b;\n\n    case '>=':\n      return a >= b;\n\n    case '<=':\n      return a <= b;\n  }\n};\n\nexports[\"default\"] = function (value, defaultValue) {\n  return value === undefined ? defaultValue : value;\n};\n\nexports.isIsoDate = function (date) {\n  return internals.isoDate.test(date);\n};\n\nexports.isNumber = function (value) {\n  return typeof value === 'number' && !isNaN(value);\n};\n\nexports.isResolvable = function (obj) {\n  if (!obj) {\n    return false;\n  }\n\n  return obj[exports.symbols.ref] || obj[exports.symbols.template];\n};\n\nexports.isSchema = function (schema, options = {}) {\n  const any = schema && schema[exports.symbols.any];\n\n  if (!any) {\n    return false;\n  }\n\n  Assert(options.legacy || any.version === exports.version, 'Cannot mix different versions of joi schemas');\n  return true;\n};\n\nexports.isValues = function (obj) {\n  return obj[exports.symbols.values];\n};\n\nexports.limit = function (value) {\n  return Number.isSafeInteger(value) && value >= 0;\n};\n\nexports.preferences = function (target, source) {\n  Messages = Messages || __webpack_require__(/*! ./messages */ \"./node_modules/joi/lib/messages.js\");\n  target = target || {};\n  source = source || {};\n  const merged = Object.assign({}, target, source);\n\n  if (source.errors && target.errors) {\n    merged.errors = Object.assign({}, target.errors, source.errors);\n    merged.errors.wrap = Object.assign({}, target.errors.wrap, source.errors.wrap);\n  }\n\n  if (source.messages) {\n    merged.messages = Messages.compile(source.messages, target.messages);\n  }\n\n  delete merged[exports.symbols.prefs];\n  return merged;\n};\n\nexports.tryWithPath = function (fn, key, options = {}) {\n  try {\n    return fn();\n  } catch (err) {\n    if (err.path !== undefined) {\n      err.path = key + '.' + err.path;\n    } else {\n      err.path = key;\n    }\n\n    if (options.append) {\n      err.message = `${err.message} (${err.path})`;\n    }\n\n    throw err;\n  }\n};\n\nexports.validateArg = function (value, label, {\n  assert,\n  message\n}) {\n  if (exports.isSchema(assert)) {\n    const result = assert.validate(value);\n\n    if (!result.error) {\n      return;\n    }\n\n    return result.error.message;\n  } else if (!assert(value)) {\n    return label ? `${label} ${message}` : message;\n  }\n};\n\nexports.verifyFlat = function (args, method) {\n  for (const arg of args) {\n    Assert(!Array.isArray(arg), 'Method no longer accepts array arguments:', method);\n  }\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/lib/common.js?");

/***/ }),

/***/ "./node_modules/joi/lib/compile.js":
/*!*****************************************!*\
  !*** ./node_modules/joi/lib/compile.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"./node_modules/@hapi/hoek/lib/assert.js\");\n\nconst Common = __webpack_require__(/*! ./common */ \"./node_modules/joi/lib/common.js\");\n\nconst Ref = __webpack_require__(/*! ./ref */ \"./node_modules/joi/lib/ref.js\");\n\nconst internals = {};\n\nexports.schema = function (Joi, config, options = {}) {\n  Common.assertOptions(options, ['appendPath', 'override']);\n\n  try {\n    return internals.schema(Joi, config, options);\n  } catch (err) {\n    if (options.appendPath && err.path !== undefined) {\n      err.message = `${err.message} (${err.path})`;\n    }\n\n    throw err;\n  }\n};\n\ninternals.schema = function (Joi, config, options) {\n  Assert(config !== undefined, 'Invalid undefined schema');\n\n  if (Array.isArray(config)) {\n    Assert(config.length, 'Invalid empty array schema');\n\n    if (config.length === 1) {\n      config = config[0];\n    }\n  }\n\n  const valid = (base, ...values) => {\n    if (options.override !== false) {\n      return base.valid(Joi.override, ...values);\n    }\n\n    return base.valid(...values);\n  };\n\n  if (internals.simple(config)) {\n    return valid(Joi, config);\n  }\n\n  if (typeof config === 'function') {\n    return Joi.custom(config);\n  }\n\n  Assert(typeof config === 'object', 'Invalid schema content:', typeof config);\n\n  if (Common.isResolvable(config)) {\n    return valid(Joi, config);\n  }\n\n  if (Common.isSchema(config)) {\n    return config;\n  }\n\n  if (Array.isArray(config)) {\n    for (const item of config) {\n      if (!internals.simple(item)) {\n        return Joi.alternatives().try(...config);\n      }\n    }\n\n    return valid(Joi, ...config);\n  }\n\n  if (config instanceof RegExp) {\n    return Joi.string().regex(config);\n  }\n\n  if (config instanceof Date) {\n    return valid(Joi.date(), config);\n  }\n\n  Assert(Object.getPrototypeOf(config) === Object.getPrototypeOf({}), 'Schema can only contain plain objects');\n  return Joi.object().keys(config);\n};\n\nexports.ref = function (id, options) {\n  return Ref.isRef(id) ? id : Ref.create(id, options);\n};\n\nexports.compile = function (root, schema, options = {}) {\n  Common.assertOptions(options, ['legacy']); // Compiled by any supported version\n\n  const any = schema && schema[Common.symbols.any];\n\n  if (any) {\n    Assert(options.legacy || any.version === Common.version, 'Cannot mix different versions of joi schemas:', any.version, Common.version);\n    return schema;\n  } // Uncompiled root\n\n\n  if (typeof schema !== 'object' || !options.legacy) {\n    return exports.schema(root, schema, {\n      appendPath: true\n    }); // Will error if schema contains other versions\n  } // Scan schema for compiled parts\n\n\n  const compiler = internals.walk(schema);\n\n  if (!compiler) {\n    return exports.schema(root, schema, {\n      appendPath: true\n    });\n  }\n\n  return compiler.compile(compiler.root, schema);\n};\n\ninternals.walk = function (schema) {\n  if (typeof schema !== 'object') {\n    return null;\n  }\n\n  if (Array.isArray(schema)) {\n    for (const item of schema) {\n      const compiler = internals.walk(item);\n\n      if (compiler) {\n        return compiler;\n      }\n    }\n\n    return null;\n  }\n\n  const any = schema[Common.symbols.any];\n\n  if (any) {\n    return {\n      root: schema[any.root],\n      compile: any.compile\n    };\n  }\n\n  Assert(Object.getPrototypeOf(schema) === Object.getPrototypeOf({}), 'Schema can only contain plain objects');\n\n  for (const key in schema) {\n    const compiler = internals.walk(schema[key]);\n\n    if (compiler) {\n      return compiler;\n    }\n  }\n\n  return null;\n};\n\ninternals.simple = function (value) {\n  return value === null || ['boolean', 'string', 'number'].includes(typeof value);\n};\n\nexports.when = function (schema, condition, options) {\n  if (options === undefined) {\n    Assert(condition && typeof condition === 'object', 'Missing options');\n    options = condition;\n    condition = Ref.create('.');\n  }\n\n  if (Array.isArray(options)) {\n    options = {\n      switch: options\n    };\n  }\n\n  Common.assertOptions(options, ['is', 'not', 'then', 'otherwise', 'switch', 'break']); // Schema condition\n\n  if (Common.isSchema(condition)) {\n    Assert(options.is === undefined, '\"is\" can not be used with a schema condition');\n    Assert(options.not === undefined, '\"not\" can not be used with a schema condition');\n    Assert(options.switch === undefined, '\"switch\" can not be used with a schema condition');\n    return internals.condition(schema, {\n      is: condition,\n      then: options.then,\n      otherwise: options.otherwise,\n      break: options.break\n    });\n  } // Single condition\n\n\n  Assert(Ref.isRef(condition) || typeof condition === 'string', 'Invalid condition:', condition);\n  Assert(options.not === undefined || options.is === undefined, 'Cannot combine \"is\" with \"not\"');\n\n  if (options.switch === undefined) {\n    let rule = options;\n\n    if (options.not !== undefined) {\n      rule = {\n        is: options.not,\n        then: options.otherwise,\n        otherwise: options.then,\n        break: options.break\n      };\n    }\n\n    let is = rule.is !== undefined ? schema.$_compile(rule.is) : schema.$_root.invalid(null, false, 0, '').required();\n    Assert(rule.then !== undefined || rule.otherwise !== undefined, 'options must have at least one of \"then\", \"otherwise\", or \"switch\"');\n    Assert(rule.break === undefined || rule.then === undefined || rule.otherwise === undefined, 'Cannot specify then, otherwise, and break all together');\n\n    if (options.is !== undefined && !Ref.isRef(options.is) && !Common.isSchema(options.is)) {\n      is = is.required(); // Only apply required if this wasn't already a schema or a ref\n    }\n\n    return internals.condition(schema, {\n      ref: exports.ref(condition),\n      is,\n      then: rule.then,\n      otherwise: rule.otherwise,\n      break: rule.break\n    });\n  } // Switch statement\n\n\n  Assert(Array.isArray(options.switch), '\"switch\" must be an array');\n  Assert(options.is === undefined, 'Cannot combine \"switch\" with \"is\"');\n  Assert(options.not === undefined, 'Cannot combine \"switch\" with \"not\"');\n  Assert(options.then === undefined, 'Cannot combine \"switch\" with \"then\"');\n  const rule = {\n    ref: exports.ref(condition),\n    switch: [],\n    break: options.break\n  };\n\n  for (let i = 0; i < options.switch.length; ++i) {\n    const test = options.switch[i];\n    const last = i === options.switch.length - 1;\n    Common.assertOptions(test, last ? ['is', 'then', 'otherwise'] : ['is', 'then']);\n    Assert(test.is !== undefined, 'Switch statement missing \"is\"');\n    Assert(test.then !== undefined, 'Switch statement missing \"then\"');\n    const item = {\n      is: schema.$_compile(test.is),\n      then: schema.$_compile(test.then)\n    };\n\n    if (!Ref.isRef(test.is) && !Common.isSchema(test.is)) {\n      item.is = item.is.required(); // Only apply required if this wasn't already a schema or a ref\n    }\n\n    if (last) {\n      Assert(options.otherwise === undefined || test.otherwise === undefined, 'Cannot specify \"otherwise\" inside and outside a \"switch\"');\n      const otherwise = options.otherwise !== undefined ? options.otherwise : test.otherwise;\n\n      if (otherwise !== undefined) {\n        Assert(rule.break === undefined, 'Cannot specify both otherwise and break');\n        item.otherwise = schema.$_compile(otherwise);\n      }\n    }\n\n    rule.switch.push(item);\n  }\n\n  return rule;\n};\n\ninternals.condition = function (schema, condition) {\n  for (const key of ['then', 'otherwise']) {\n    if (condition[key] === undefined) {\n      delete condition[key];\n    } else {\n      condition[key] = schema.$_compile(condition[key]);\n    }\n  }\n\n  return condition;\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/lib/compile.js?");

/***/ }),

/***/ "./node_modules/joi/lib/errors.js":
/*!****************************************!*\
  !*** ./node_modules/joi/lib/errors.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nconst Annotate = __webpack_require__(/*! ./annotate */ \"./node_modules/joi/lib/annotate.js\");\n\nconst Common = __webpack_require__(/*! ./common */ \"./node_modules/joi/lib/common.js\");\n\nconst Template = __webpack_require__(/*! ./template */ \"./node_modules/joi/lib/template.js\");\n\nconst internals = {};\nexports.Report = class {\n  constructor(code, value, local, flags, messages, state, prefs) {\n    this.code = code;\n    this.flags = flags;\n    this.messages = messages;\n    this.path = state.path;\n    this.prefs = prefs;\n    this.state = state;\n    this.value = value;\n    this.message = null;\n    this.template = null;\n    this.local = local || {};\n    this.local.label = exports.label(this.flags, this.state, this.prefs, this.messages);\n\n    if (this.value !== undefined && !this.local.hasOwnProperty('value')) {\n      this.local.value = this.value;\n    }\n\n    if (this.path.length) {\n      const key = this.path[this.path.length - 1];\n\n      if (typeof key !== 'object') {\n        this.local.key = key;\n      }\n    }\n  }\n\n  _setTemplate(template) {\n    this.template = template;\n\n    if (!this.flags.label && this.path.length === 0) {\n      const localized = this._template(this.template, 'root');\n\n      if (localized) {\n        this.local.label = localized;\n      }\n    }\n  }\n\n  toString() {\n    if (this.message) {\n      return this.message;\n    }\n\n    const code = this.code;\n\n    if (!this.prefs.errors.render) {\n      return this.code;\n    }\n\n    const template = this._template(this.template) || this._template(this.prefs.messages) || this._template(this.messages);\n\n    if (template === undefined) {\n      return `Error code \"${code}\" is not defined, your custom type is missing the correct messages definition`;\n    } // Render and cache result\n\n\n    this.message = template.render(this.value, this.state, this.prefs, this.local, {\n      errors: this.prefs.errors,\n      messages: [this.prefs.messages, this.messages]\n    });\n\n    if (!this.prefs.errors.label) {\n      this.message = this.message.replace(/^\"\" /, '').trim();\n    }\n\n    return this.message;\n  }\n\n  _template(messages, code) {\n    return exports.template(this.value, messages, code || this.code, this.state, this.prefs);\n  }\n\n};\n\nexports.path = function (path) {\n  let label = '';\n\n  for (const segment of path) {\n    if (typeof segment === 'object') {\n      // Exclude array single path segment\n      continue;\n    }\n\n    if (typeof segment === 'string') {\n      if (label) {\n        label += '.';\n      }\n\n      label += segment;\n    } else {\n      label += `[${segment}]`;\n    }\n  }\n\n  return label;\n};\n\nexports.template = function (value, messages, code, state, prefs) {\n  if (!messages) {\n    return;\n  }\n\n  if (Template.isTemplate(messages)) {\n    return code !== 'root' ? messages : null;\n  }\n\n  let lang = prefs.errors.language;\n\n  if (Common.isResolvable(lang)) {\n    lang = lang.resolve(value, state, prefs);\n  }\n\n  if (lang && messages[lang] && messages[lang][code] !== undefined) {\n    return messages[lang][code];\n  }\n\n  return messages[code];\n};\n\nexports.label = function (flags, state, prefs, messages) {\n  if (flags.label) {\n    return flags.label;\n  }\n\n  if (!prefs.errors.label) {\n    return '';\n  }\n\n  let path = state.path;\n\n  if (prefs.errors.label === 'key' && state.path.length > 1) {\n    path = state.path.slice(-1);\n  }\n\n  const normalized = exports.path(path);\n\n  if (normalized) {\n    return normalized;\n  }\n\n  return exports.template(null, prefs.messages, 'root', state, prefs) || messages && exports.template(null, messages, 'root', state, prefs) || 'value';\n};\n\nexports.process = function (errors, original, prefs) {\n  if (!errors) {\n    return null;\n  }\n\n  const {\n    override,\n    message,\n    details\n  } = exports.details(errors);\n\n  if (override) {\n    return override;\n  }\n\n  if (prefs.errors.stack) {\n    return new exports.ValidationError(message, details, original);\n  }\n\n  const limit = Error.stackTraceLimit;\n  Error.stackTraceLimit = 0;\n  const validationError = new exports.ValidationError(message, details, original);\n  Error.stackTraceLimit = limit;\n  return validationError;\n};\n\nexports.details = function (errors, options = {}) {\n  let messages = [];\n  const details = [];\n\n  for (const item of errors) {\n    // Override\n    if (item instanceof Error) {\n      if (options.override !== false) {\n        return {\n          override: item\n        };\n      }\n\n      const message = item.toString();\n      messages.push(message);\n      details.push({\n        message,\n        type: 'override',\n        context: {\n          error: item\n        }\n      });\n      continue;\n    } // Report\n\n\n    const message = item.toString();\n    messages.push(message);\n    details.push({\n      message,\n      path: item.path.filter(v => typeof v !== 'object'),\n      type: item.code,\n      context: item.local\n    });\n  }\n\n  if (messages.length > 1) {\n    messages = [...new Set(messages)];\n  }\n\n  return {\n    message: messages.join('. '),\n    details\n  };\n};\n\nexports.ValidationError = class extends Error {\n  constructor(message, details, original) {\n    super(message);\n    this._original = original;\n    this.details = details;\n  }\n\n  static isError(err) {\n    return err instanceof exports.ValidationError;\n  }\n\n};\nexports.ValidationError.prototype.isJoi = true;\nexports.ValidationError.prototype.name = 'ValidationError';\nexports.ValidationError.prototype.annotate = Annotate.error;\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/lib/errors.js?");

/***/ }),

/***/ "./node_modules/joi/lib/extend.js":
/*!****************************************!*\
  !*** ./node_modules/joi/lib/extend.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"./node_modules/@hapi/hoek/lib/assert.js\");\n\nconst Clone = __webpack_require__(/*! @hapi/hoek/lib/clone */ \"./node_modules/@hapi/hoek/lib/clone.js\");\n\nconst Common = __webpack_require__(/*! ./common */ \"./node_modules/joi/lib/common.js\");\n\nconst Messages = __webpack_require__(/*! ./messages */ \"./node_modules/joi/lib/messages.js\");\n\nconst internals = {};\n\nexports.type = function (from, options) {\n  const base = Object.getPrototypeOf(from);\n  const prototype = Clone(base);\n\n  const schema = from._assign(Object.create(prototype));\n\n  const def = Object.assign({}, options); // Shallow cloned\n\n  delete def.base;\n  prototype._definition = def;\n  const parent = base._definition || {};\n  def.messages = Messages.merge(parent.messages, def.messages);\n  def.properties = Object.assign({}, parent.properties, def.properties); // Type\n\n  schema.type = def.type; // Flags\n\n  def.flags = Object.assign({}, parent.flags, def.flags); // Terms\n\n  const terms = Object.assign({}, parent.terms);\n\n  if (def.terms) {\n    for (const name in def.terms) {\n      // Only apply own terms\n      const term = def.terms[name];\n      Assert(schema.$_terms[name] === undefined, 'Invalid term override for', def.type, name);\n      schema.$_terms[name] = term.init;\n      terms[name] = term;\n    }\n  }\n\n  def.terms = terms; // Constructor arguments\n\n  if (!def.args) {\n    def.args = parent.args;\n  } // Prepare\n\n\n  def.prepare = internals.prepare(def.prepare, parent.prepare); // Coerce\n\n  if (def.coerce) {\n    if (typeof def.coerce === 'function') {\n      def.coerce = {\n        method: def.coerce\n      };\n    }\n\n    if (def.coerce.from && !Array.isArray(def.coerce.from)) {\n      def.coerce = {\n        method: def.coerce.method,\n        from: [].concat(def.coerce.from)\n      };\n    }\n  }\n\n  def.coerce = internals.coerce(def.coerce, parent.coerce); // Validate\n\n  def.validate = internals.validate(def.validate, parent.validate); // Rules\n\n  const rules = Object.assign({}, parent.rules);\n\n  if (def.rules) {\n    for (const name in def.rules) {\n      const rule = def.rules[name];\n      Assert(typeof rule === 'object', 'Invalid rule definition for', def.type, name);\n      let method = rule.method;\n\n      if (method === undefined) {\n        method = function () {\n          return this.$_addRule(name);\n        };\n      }\n\n      if (method) {\n        Assert(!prototype[name], 'Rule conflict in', def.type, name);\n        prototype[name] = method;\n      }\n\n      Assert(!rules[name], 'Rule conflict in', def.type, name);\n      rules[name] = rule;\n\n      if (rule.alias) {\n        const aliases = [].concat(rule.alias);\n\n        for (const alias of aliases) {\n          prototype[alias] = rule.method;\n        }\n      }\n\n      if (rule.args) {\n        rule.argsByName = new Map();\n        rule.args = rule.args.map(arg => {\n          if (typeof arg === 'string') {\n            arg = {\n              name: arg\n            };\n          }\n\n          Assert(!rule.argsByName.has(arg.name), 'Duplicated argument name', arg.name);\n\n          if (Common.isSchema(arg.assert)) {\n            arg.assert = arg.assert.strict().label(arg.name);\n          }\n\n          rule.argsByName.set(arg.name, arg);\n          return arg;\n        });\n      }\n    }\n  }\n\n  def.rules = rules; // Modifiers\n\n  const modifiers = Object.assign({}, parent.modifiers);\n\n  if (def.modifiers) {\n    for (const name in def.modifiers) {\n      Assert(!prototype[name], 'Rule conflict in', def.type, name);\n      const modifier = def.modifiers[name];\n      Assert(typeof modifier === 'function', 'Invalid modifier definition for', def.type, name);\n\n      const method = function (arg) {\n        return this.rule({\n          [name]: arg\n        });\n      };\n\n      prototype[name] = method;\n      modifiers[name] = modifier;\n    }\n  }\n\n  def.modifiers = modifiers; // Overrides\n\n  if (def.overrides) {\n    prototype._super = base;\n    schema.$_super = {}; // Backwards compatibility\n\n    for (const override in def.overrides) {\n      Assert(base[override], 'Cannot override missing', override);\n      def.overrides[override][Common.symbols.parent] = base[override];\n      schema.$_super[override] = base[override].bind(schema); // Backwards compatibility\n    }\n\n    Object.assign(prototype, def.overrides);\n  } // Casts\n\n\n  def.cast = Object.assign({}, parent.cast, def.cast); // Manifest\n\n  const manifest = Object.assign({}, parent.manifest, def.manifest);\n  manifest.build = internals.build(def.manifest && def.manifest.build, parent.manifest && parent.manifest.build);\n  def.manifest = manifest; // Rebuild\n\n  def.rebuild = internals.rebuild(def.rebuild, parent.rebuild);\n  return schema;\n}; // Helpers\n\n\ninternals.build = function (child, parent) {\n  if (!child || !parent) {\n    return child || parent;\n  }\n\n  return function (obj, desc) {\n    return parent(child(obj, desc), desc);\n  };\n};\n\ninternals.coerce = function (child, parent) {\n  if (!child || !parent) {\n    return child || parent;\n  }\n\n  return {\n    from: child.from && parent.from ? [...new Set([...child.from, ...parent.from])] : null,\n\n    method(value, helpers) {\n      let coerced;\n\n      if (!parent.from || parent.from.includes(typeof value)) {\n        coerced = parent.method(value, helpers);\n\n        if (coerced) {\n          if (coerced.errors || coerced.value === undefined) {\n            return coerced;\n          }\n\n          value = coerced.value;\n        }\n      }\n\n      if (!child.from || child.from.includes(typeof value)) {\n        const own = child.method(value, helpers);\n\n        if (own) {\n          return own;\n        }\n      }\n\n      return coerced;\n    }\n\n  };\n};\n\ninternals.prepare = function (child, parent) {\n  if (!child || !parent) {\n    return child || parent;\n  }\n\n  return function (value, helpers) {\n    const prepared = child(value, helpers);\n\n    if (prepared) {\n      if (prepared.errors || prepared.value === undefined) {\n        return prepared;\n      }\n\n      value = prepared.value;\n    }\n\n    return parent(value, helpers) || prepared;\n  };\n};\n\ninternals.rebuild = function (child, parent) {\n  if (!child || !parent) {\n    return child || parent;\n  }\n\n  return function (schema) {\n    parent(schema);\n    child(schema);\n  };\n};\n\ninternals.validate = function (child, parent) {\n  if (!child || !parent) {\n    return child || parent;\n  }\n\n  return function (value, helpers) {\n    const result = parent(value, helpers);\n\n    if (result) {\n      if (result.errors && (!Array.isArray(result.errors) || result.errors.length)) {\n        return result;\n      }\n\n      value = result.value;\n    }\n\n    return child(value, helpers) || result;\n  };\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/lib/extend.js?");

/***/ }),

/***/ "./node_modules/joi/lib/index.js":
/*!***************************************!*\
  !*** ./node_modules/joi/lib/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"./node_modules/@hapi/hoek/lib/assert.js\");\n\nconst Clone = __webpack_require__(/*! @hapi/hoek/lib/clone */ \"./node_modules/@hapi/hoek/lib/clone.js\");\n\nconst Cache = __webpack_require__(/*! ./cache */ \"./node_modules/joi/lib/cache.js\");\n\nconst Common = __webpack_require__(/*! ./common */ \"./node_modules/joi/lib/common.js\");\n\nconst Compile = __webpack_require__(/*! ./compile */ \"./node_modules/joi/lib/compile.js\");\n\nconst Errors = __webpack_require__(/*! ./errors */ \"./node_modules/joi/lib/errors.js\");\n\nconst Extend = __webpack_require__(/*! ./extend */ \"./node_modules/joi/lib/extend.js\");\n\nconst Manifest = __webpack_require__(/*! ./manifest */ \"./node_modules/joi/lib/manifest.js\");\n\nconst Ref = __webpack_require__(/*! ./ref */ \"./node_modules/joi/lib/ref.js\");\n\nconst Template = __webpack_require__(/*! ./template */ \"./node_modules/joi/lib/template.js\");\n\nconst Trace = __webpack_require__(/*! ./trace */ \"./node_modules/joi/lib/trace.js\");\n\nlet Schemas;\nconst internals = {\n  types: {\n    alternatives: __webpack_require__(/*! ./types/alternatives */ \"./node_modules/joi/lib/types/alternatives.js\"),\n    any: __webpack_require__(/*! ./types/any */ \"./node_modules/joi/lib/types/any.js\"),\n    array: __webpack_require__(/*! ./types/array */ \"./node_modules/joi/lib/types/array.js\"),\n    boolean: __webpack_require__(/*! ./types/boolean */ \"./node_modules/joi/lib/types/boolean.js\"),\n    date: __webpack_require__(/*! ./types/date */ \"./node_modules/joi/lib/types/date.js\"),\n    function: __webpack_require__(/*! ./types/function */ \"./node_modules/joi/lib/types/function.js\"),\n    link: __webpack_require__(/*! ./types/link */ \"./node_modules/joi/lib/types/link.js\"),\n    number: __webpack_require__(/*! ./types/number */ \"./node_modules/joi/lib/types/number.js\"),\n    object: __webpack_require__(/*! ./types/object */ \"./node_modules/joi/lib/types/object.js\"),\n    string: __webpack_require__(/*! ./types/string */ \"./node_modules/joi/lib/types/string.js\"),\n    symbol: __webpack_require__(/*! ./types/symbol */ \"./node_modules/joi/lib/types/symbol.js\")\n  },\n  aliases: {\n    alt: 'alternatives',\n    bool: 'boolean',\n    func: 'function'\n  }\n};\n\nif (Buffer) {\n  // $lab:coverage:ignore$\n  internals.types.binary = __webpack_require__(/*! ./types/binary */ \"./node_modules/joi/lib/types/binary.js\");\n}\n\ninternals.root = function () {\n  const root = {\n    _types: new Set(Object.keys(internals.types))\n  }; // Types\n\n  for (const type of root._types) {\n    root[type] = function (...args) {\n      Assert(!args.length || ['alternatives', 'link', 'object'].includes(type), 'The', type, 'type does not allow arguments');\n      return internals.generate(this, internals.types[type], args);\n    };\n  } // Shortcuts\n\n\n  for (const method of ['allow', 'custom', 'disallow', 'equal', 'exist', 'forbidden', 'invalid', 'not', 'only', 'optional', 'options', 'prefs', 'preferences', 'required', 'strip', 'valid', 'when']) {\n    root[method] = function (...args) {\n      return this.any()[method](...args);\n    };\n  } // Methods\n\n\n  Object.assign(root, internals.methods); // Aliases\n\n  for (const alias in internals.aliases) {\n    const target = internals.aliases[alias];\n    root[alias] = root[target];\n  }\n\n  root.x = root.expression; // Trace\n\n  if (Trace.setup) {\n    // $lab:coverage:ignore$\n    Trace.setup(root);\n  }\n\n  return root;\n};\n\ninternals.methods = {\n  ValidationError: Errors.ValidationError,\n  version: Common.version,\n  cache: Cache.provider,\n\n  assert(value, schema, ...args\n  /* [message], [options] */\n  ) {\n    internals.assert(value, schema, true, args);\n  },\n\n  attempt(value, schema, ...args\n  /* [message], [options] */\n  ) {\n    return internals.assert(value, schema, false, args);\n  },\n\n  build(desc) {\n    Assert(typeof Manifest.build === 'function', 'Manifest functionality disabled');\n    return Manifest.build(this, desc);\n  },\n\n  checkPreferences(prefs) {\n    Common.checkPreferences(prefs);\n  },\n\n  compile(schema, options) {\n    return Compile.compile(this, schema, options);\n  },\n\n  defaults(modifier) {\n    Assert(typeof modifier === 'function', 'modifier must be a function');\n    const joi = Object.assign({}, this);\n\n    for (const type of joi._types) {\n      const schema = modifier(joi[type]());\n      Assert(Common.isSchema(schema), 'modifier must return a valid schema object');\n\n      joi[type] = function (...args) {\n        return internals.generate(this, schema, args);\n      };\n    }\n\n    return joi;\n  },\n\n  expression(...args) {\n    return new Template(...args);\n  },\n\n  extend(...extensions) {\n    Common.verifyFlat(extensions, 'extend');\n    Schemas = Schemas || __webpack_require__(/*! ./schemas */ \"./node_modules/joi/lib/schemas.js\");\n    Assert(extensions.length, 'You need to provide at least one extension');\n    this.assert(extensions, Schemas.extensions);\n    const joi = Object.assign({}, this);\n    joi._types = new Set(joi._types);\n\n    for (let extension of extensions) {\n      if (typeof extension === 'function') {\n        extension = extension(joi);\n      }\n\n      this.assert(extension, Schemas.extension);\n      const expanded = internals.expandExtension(extension, joi);\n\n      for (const item of expanded) {\n        Assert(joi[item.type] === undefined || joi._types.has(item.type), 'Cannot override name', item.type);\n        const base = item.base || this.any();\n        const schema = Extend.type(base, item);\n\n        joi._types.add(item.type);\n\n        joi[item.type] = function (...args) {\n          return internals.generate(this, schema, args);\n        };\n      }\n    }\n\n    return joi;\n  },\n\n  isError: Errors.ValidationError.isError,\n  isExpression: Template.isTemplate,\n  isRef: Ref.isRef,\n  isSchema: Common.isSchema,\n\n  in(...args) {\n    return Ref.in(...args);\n  },\n\n  override: Common.symbols.override,\n\n  ref(...args) {\n    return Ref.create(...args);\n  },\n\n  types() {\n    const types = {};\n\n    for (const type of this._types) {\n      types[type] = this[type]();\n    }\n\n    for (const target in internals.aliases) {\n      types[target] = this[target]();\n    }\n\n    return types;\n  }\n\n}; // Helpers\n\ninternals.assert = function (value, schema, annotate, args\n/* [message], [options] */\n) {\n  const message = args[0] instanceof Error || typeof args[0] === 'string' ? args[0] : null;\n  const options = message ? args[1] : args[0];\n  const result = schema.validate(value, Common.preferences({\n    errors: {\n      stack: true\n    }\n  }, options || {}));\n  let error = result.error;\n\n  if (!error) {\n    return result.value;\n  }\n\n  if (message instanceof Error) {\n    throw message;\n  }\n\n  const display = annotate && typeof error.annotate === 'function' ? error.annotate() : error.message;\n\n  if (error instanceof Errors.ValidationError === false) {\n    error = Clone(error);\n  }\n\n  error.message = message ? `${message} ${display}` : display;\n  throw error;\n};\n\ninternals.generate = function (root, schema, args) {\n  Assert(root, 'Must be invoked on a Joi instance.');\n  schema.$_root = root;\n\n  if (!schema._definition.args || !args.length) {\n    return schema;\n  }\n\n  return schema._definition.args(schema, ...args);\n};\n\ninternals.expandExtension = function (extension, joi) {\n  if (typeof extension.type === 'string') {\n    return [extension];\n  }\n\n  const extended = [];\n\n  for (const type of joi._types) {\n    if (extension.type.test(type)) {\n      const item = Object.assign({}, extension);\n      item.type = type;\n      item.base = joi[type]();\n      extended.push(item);\n    }\n  }\n\n  return extended;\n};\n\nmodule.exports = internals.root();\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/lib/index.js?");

/***/ }),

/***/ "./node_modules/joi/lib/manifest.js":
/*!******************************************!*\
  !*** ./node_modules/joi/lib/manifest.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"./node_modules/@hapi/hoek/lib/assert.js\");\n\nconst Clone = __webpack_require__(/*! @hapi/hoek/lib/clone */ \"./node_modules/@hapi/hoek/lib/clone.js\");\n\nconst Common = __webpack_require__(/*! ./common */ \"./node_modules/joi/lib/common.js\");\n\nconst Messages = __webpack_require__(/*! ./messages */ \"./node_modules/joi/lib/messages.js\");\n\nconst Ref = __webpack_require__(/*! ./ref */ \"./node_modules/joi/lib/ref.js\");\n\nconst Template = __webpack_require__(/*! ./template */ \"./node_modules/joi/lib/template.js\");\n\nlet Schemas;\nconst internals = {};\n\nexports.describe = function (schema) {\n  const def = schema._definition; // Type\n\n  const desc = {\n    type: schema.type,\n    flags: {},\n    rules: []\n  }; // Flags\n\n  for (const flag in schema._flags) {\n    if (flag[0] !== '_') {\n      desc.flags[flag] = internals.describe(schema._flags[flag]);\n    }\n  }\n\n  if (!Object.keys(desc.flags).length) {\n    delete desc.flags;\n  } // Preferences\n\n\n  if (schema._preferences) {\n    desc.preferences = Clone(schema._preferences, {\n      shallow: ['messages']\n    });\n    delete desc.preferences[Common.symbols.prefs];\n\n    if (desc.preferences.messages) {\n      desc.preferences.messages = Messages.decompile(desc.preferences.messages);\n    }\n  } // Allow / Invalid\n\n\n  if (schema._valids) {\n    desc.allow = schema._valids.describe();\n  }\n\n  if (schema._invalids) {\n    desc.invalid = schema._invalids.describe();\n  } // Rules\n\n\n  for (const rule of schema._rules) {\n    const ruleDef = def.rules[rule.name];\n\n    if (ruleDef.manifest === false) {\n      // Defaults to true\n      continue;\n    }\n\n    const item = {\n      name: rule.name\n    };\n\n    for (const custom in def.modifiers) {\n      if (rule[custom] !== undefined) {\n        item[custom] = internals.describe(rule[custom]);\n      }\n    }\n\n    if (rule.args) {\n      item.args = {};\n\n      for (const key in rule.args) {\n        const arg = rule.args[key];\n\n        if (key === 'options' && !Object.keys(arg).length) {\n          continue;\n        }\n\n        item.args[key] = internals.describe(arg, {\n          assign: key\n        });\n      }\n\n      if (!Object.keys(item.args).length) {\n        delete item.args;\n      }\n    }\n\n    desc.rules.push(item);\n  }\n\n  if (!desc.rules.length) {\n    delete desc.rules;\n  } // Terms (must be last to verify no name conflicts)\n\n\n  for (const term in schema.$_terms) {\n    if (term[0] === '_') {\n      continue;\n    }\n\n    Assert(!desc[term], 'Cannot describe schema due to internal name conflict with', term);\n    const items = schema.$_terms[term];\n\n    if (!items) {\n      continue;\n    }\n\n    if (items instanceof Map) {\n      if (items.size) {\n        desc[term] = [...items.entries()];\n      }\n\n      continue;\n    }\n\n    if (Common.isValues(items)) {\n      desc[term] = items.describe();\n      continue;\n    }\n\n    Assert(def.terms[term], 'Term', term, 'missing configuration');\n    const manifest = def.terms[term].manifest;\n    const mapped = typeof manifest === 'object';\n\n    if (!items.length && !mapped) {\n      continue;\n    }\n\n    const normalized = [];\n\n    for (const item of items) {\n      normalized.push(internals.describe(item));\n    } // Mapped\n\n\n    if (mapped) {\n      const {\n        from,\n        to\n      } = manifest.mapped;\n      desc[term] = {};\n\n      for (const item of normalized) {\n        desc[term][item[to]] = item[from];\n      }\n\n      continue;\n    } // Single\n\n\n    if (manifest === 'single') {\n      Assert(normalized.length === 1, 'Term', term, 'contains more than one item');\n      desc[term] = normalized[0];\n      continue;\n    } // Array\n\n\n    desc[term] = normalized;\n  }\n\n  internals.validate(schema.$_root, desc);\n  return desc;\n};\n\ninternals.describe = function (item, options = {}) {\n  if (Array.isArray(item)) {\n    return item.map(internals.describe);\n  }\n\n  if (item === Common.symbols.deepDefault) {\n    return {\n      special: 'deep'\n    };\n  }\n\n  if (typeof item !== 'object' || item === null) {\n    return item;\n  }\n\n  if (options.assign === 'options') {\n    return Clone(item);\n  }\n\n  if (Buffer && Buffer.isBuffer(item)) {\n    // $lab:coverage:ignore$\n    return {\n      buffer: item.toString('binary')\n    };\n  }\n\n  if (item instanceof Date) {\n    return item.toISOString();\n  }\n\n  if (item instanceof Error) {\n    return item;\n  }\n\n  if (item instanceof RegExp) {\n    if (options.assign === 'regex') {\n      return item.toString();\n    }\n\n    return {\n      regex: item.toString()\n    };\n  }\n\n  if (item[Common.symbols.literal]) {\n    return {\n      function: item.literal\n    };\n  }\n\n  if (typeof item.describe === 'function') {\n    if (options.assign === 'ref') {\n      return item.describe().ref;\n    }\n\n    return item.describe();\n  }\n\n  const normalized = {};\n\n  for (const key in item) {\n    const value = item[key];\n\n    if (value === undefined) {\n      continue;\n    }\n\n    normalized[key] = internals.describe(value, {\n      assign: key\n    });\n  }\n\n  return normalized;\n};\n\nexports.build = function (joi, desc) {\n  const builder = new internals.Builder(joi);\n  return builder.parse(desc);\n};\n\ninternals.Builder = class {\n  constructor(joi) {\n    this.joi = joi;\n  }\n\n  parse(desc) {\n    internals.validate(this.joi, desc); // Type\n\n    let schema = this.joi[desc.type]()._bare();\n\n    const def = schema._definition; // Flags\n\n    if (desc.flags) {\n      for (const flag in desc.flags) {\n        const setter = def.flags[flag] && def.flags[flag].setter || flag;\n        Assert(typeof schema[setter] === 'function', 'Invalid flag', flag, 'for type', desc.type);\n        schema = schema[setter](this.build(desc.flags[flag]));\n      }\n    } // Preferences\n\n\n    if (desc.preferences) {\n      schema = schema.preferences(this.build(desc.preferences));\n    } // Allow / Invalid\n\n\n    if (desc.allow) {\n      schema = schema.allow(...this.build(desc.allow));\n    }\n\n    if (desc.invalid) {\n      schema = schema.invalid(...this.build(desc.invalid));\n    } // Rules\n\n\n    if (desc.rules) {\n      for (const rule of desc.rules) {\n        Assert(typeof schema[rule.name] === 'function', 'Invalid rule', rule.name, 'for type', desc.type);\n        const args = [];\n\n        if (rule.args) {\n          const built = {};\n\n          for (const key in rule.args) {\n            built[key] = this.build(rule.args[key], {\n              assign: key\n            });\n          }\n\n          const keys = Object.keys(built);\n          const definition = def.rules[rule.name].args;\n\n          if (definition) {\n            Assert(keys.length <= definition.length, 'Invalid number of arguments for', desc.type, rule.name, '(expected up to', definition.length, ', found', keys.length, ')');\n\n            for (const {\n              name\n            } of definition) {\n              args.push(built[name]);\n            }\n          } else {\n            Assert(keys.length === 1, 'Invalid number of arguments for', desc.type, rule.name, '(expected up to 1, found', keys.length, ')');\n            args.push(built[keys[0]]);\n          }\n        } // Apply\n\n\n        schema = schema[rule.name](...args); // Ruleset\n\n        const options = {};\n\n        for (const custom in def.modifiers) {\n          if (rule[custom] !== undefined) {\n            options[custom] = this.build(rule[custom]);\n          }\n        }\n\n        if (Object.keys(options).length) {\n          schema = schema.rule(options);\n        }\n      }\n    } // Terms\n\n\n    const terms = {};\n\n    for (const key in desc) {\n      if (['allow', 'flags', 'invalid', 'whens', 'preferences', 'rules', 'type'].includes(key)) {\n        continue;\n      }\n\n      Assert(def.terms[key], 'Term', key, 'missing configuration');\n      const manifest = def.terms[key].manifest;\n\n      if (manifest === 'schema') {\n        terms[key] = desc[key].map(item => this.parse(item));\n        continue;\n      }\n\n      if (manifest === 'values') {\n        terms[key] = desc[key].map(item => this.build(item));\n        continue;\n      }\n\n      if (manifest === 'single') {\n        terms[key] = this.build(desc[key]);\n        continue;\n      }\n\n      if (typeof manifest === 'object') {\n        terms[key] = {};\n\n        for (const name in desc[key]) {\n          const value = desc[key][name];\n          terms[key][name] = this.parse(value);\n        }\n\n        continue;\n      }\n\n      terms[key] = this.build(desc[key]);\n    }\n\n    if (desc.whens) {\n      terms.whens = desc.whens.map(when => this.build(when));\n    }\n\n    schema = def.manifest.build(schema, terms);\n    schema.$_temp.ruleset = false;\n    return schema;\n  }\n\n  build(desc, options = {}) {\n    if (desc === null) {\n      return null;\n    }\n\n    if (Array.isArray(desc)) {\n      return desc.map(item => this.build(item));\n    }\n\n    if (desc instanceof Error) {\n      return desc;\n    }\n\n    if (options.assign === 'options') {\n      return Clone(desc);\n    }\n\n    if (options.assign === 'regex') {\n      return internals.regex(desc);\n    }\n\n    if (options.assign === 'ref') {\n      return Ref.build(desc);\n    }\n\n    if (typeof desc !== 'object') {\n      return desc;\n    }\n\n    if (Object.keys(desc).length === 1) {\n      if (desc.buffer) {\n        Assert(Buffer, 'Buffers are not supported');\n        return Buffer && Buffer.from(desc.buffer, 'binary'); // $lab:coverage:ignore$\n      }\n\n      if (desc.function) {\n        return {\n          [Common.symbols.literal]: true,\n          literal: desc.function\n        };\n      }\n\n      if (desc.override) {\n        return Common.symbols.override;\n      }\n\n      if (desc.ref) {\n        return Ref.build(desc.ref);\n      }\n\n      if (desc.regex) {\n        return internals.regex(desc.regex);\n      }\n\n      if (desc.special) {\n        Assert(['deep'].includes(desc.special), 'Unknown special value', desc.special);\n        return Common.symbols.deepDefault;\n      }\n\n      if (desc.value) {\n        return Clone(desc.value);\n      }\n    }\n\n    if (desc.type) {\n      return this.parse(desc);\n    }\n\n    if (desc.template) {\n      return Template.build(desc);\n    }\n\n    const normalized = {};\n\n    for (const key in desc) {\n      normalized[key] = this.build(desc[key], {\n        assign: key\n      });\n    }\n\n    return normalized;\n  }\n\n};\n\ninternals.regex = function (string) {\n  const end = string.lastIndexOf('/');\n  const exp = string.slice(1, end);\n  const flags = string.slice(end + 1);\n  return new RegExp(exp, flags);\n};\n\ninternals.validate = function (joi, desc) {\n  Schemas = Schemas || __webpack_require__(/*! ./schemas */ \"./node_modules/joi/lib/schemas.js\");\n  joi.assert(desc, Schemas.description);\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/lib/manifest.js?");

/***/ }),

/***/ "./node_modules/joi/lib/messages.js":
/*!******************************************!*\
  !*** ./node_modules/joi/lib/messages.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"./node_modules/@hapi/hoek/lib/assert.js\");\n\nconst Clone = __webpack_require__(/*! @hapi/hoek/lib/clone */ \"./node_modules/@hapi/hoek/lib/clone.js\");\n\nconst Template = __webpack_require__(/*! ./template */ \"./node_modules/joi/lib/template.js\");\n\nconst internals = {};\n\nexports.compile = function (messages, target) {\n  // Single value string ('plain error message', 'template {error} message')\n  if (typeof messages === 'string') {\n    Assert(!target, 'Cannot set single message string');\n    return new Template(messages);\n  } // Single value template\n\n\n  if (Template.isTemplate(messages)) {\n    Assert(!target, 'Cannot set single message template');\n    return messages;\n  } // By error code { 'number.min': <string | template> }\n\n\n  Assert(typeof messages === 'object' && !Array.isArray(messages), 'Invalid message options');\n  target = target ? Clone(target) : {};\n\n  for (let code in messages) {\n    const message = messages[code];\n\n    if (code === 'root' || Template.isTemplate(message)) {\n      target[code] = message;\n      continue;\n    }\n\n    if (typeof message === 'string') {\n      target[code] = new Template(message);\n      continue;\n    } // By language { english: { 'number.min': <string | template> } }\n\n\n    Assert(typeof message === 'object' && !Array.isArray(message), 'Invalid message for', code);\n    const language = code;\n    target[language] = target[language] || {};\n\n    for (code in message) {\n      const localized = message[code];\n\n      if (code === 'root' || Template.isTemplate(localized)) {\n        target[language][code] = localized;\n        continue;\n      }\n\n      Assert(typeof localized === 'string', 'Invalid message for', code, 'in', language);\n      target[language][code] = new Template(localized);\n    }\n  }\n\n  return target;\n};\n\nexports.decompile = function (messages) {\n  // By error code { 'number.min': <string | template> }\n  const target = {};\n\n  for (let code in messages) {\n    const message = messages[code];\n\n    if (code === 'root') {\n      target[code] = message;\n      continue;\n    }\n\n    if (Template.isTemplate(message)) {\n      target[code] = message.describe({\n        compact: true\n      });\n      continue;\n    } // By language { english: { 'number.min': <string | template> } }\n\n\n    const language = code;\n    target[language] = {};\n\n    for (code in message) {\n      const localized = message[code];\n\n      if (code === 'root') {\n        target[language][code] = localized;\n        continue;\n      }\n\n      target[language][code] = localized.describe({\n        compact: true\n      });\n    }\n  }\n\n  return target;\n};\n\nexports.merge = function (base, extended) {\n  if (!base) {\n    return exports.compile(extended);\n  }\n\n  if (!extended) {\n    return base;\n  } // Single value string\n\n\n  if (typeof extended === 'string') {\n    return new Template(extended);\n  } // Single value template\n\n\n  if (Template.isTemplate(extended)) {\n    return extended;\n  } // By error code { 'number.min': <string | template> }\n\n\n  const target = Clone(base);\n\n  for (let code in extended) {\n    const message = extended[code];\n\n    if (code === 'root' || Template.isTemplate(message)) {\n      target[code] = message;\n      continue;\n    }\n\n    if (typeof message === 'string') {\n      target[code] = new Template(message);\n      continue;\n    } // By language { english: { 'number.min': <string | template> } }\n\n\n    Assert(typeof message === 'object' && !Array.isArray(message), 'Invalid message for', code);\n    const language = code;\n    target[language] = target[language] || {};\n\n    for (code in message) {\n      const localized = message[code];\n\n      if (code === 'root' || Template.isTemplate(localized)) {\n        target[language][code] = localized;\n        continue;\n      }\n\n      Assert(typeof localized === 'string', 'Invalid message for', code, 'in', language);\n      target[language][code] = new Template(localized);\n    }\n  }\n\n  return target;\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/lib/messages.js?");

/***/ }),

/***/ "./node_modules/joi/lib/modify.js":
/*!****************************************!*\
  !*** ./node_modules/joi/lib/modify.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"./node_modules/@hapi/hoek/lib/assert.js\");\n\nconst Common = __webpack_require__(/*! ./common */ \"./node_modules/joi/lib/common.js\");\n\nconst Ref = __webpack_require__(/*! ./ref */ \"./node_modules/joi/lib/ref.js\");\n\nconst internals = {};\nexports.Ids = internals.Ids = class {\n  constructor() {\n    this._byId = new Map();\n    this._byKey = new Map();\n    this._schemaChain = false;\n  }\n\n  clone() {\n    const clone = new internals.Ids();\n    clone._byId = new Map(this._byId);\n    clone._byKey = new Map(this._byKey);\n    clone._schemaChain = this._schemaChain;\n    return clone;\n  }\n\n  concat(source) {\n    if (source._schemaChain) {\n      this._schemaChain = true;\n    }\n\n    for (const [id, value] of source._byId.entries()) {\n      Assert(!this._byKey.has(id), 'Schema id conflicts with existing key:', id);\n\n      this._byId.set(id, value);\n    }\n\n    for (const [key, value] of source._byKey.entries()) {\n      Assert(!this._byId.has(key), 'Schema key conflicts with existing id:', key);\n\n      this._byKey.set(key, value);\n    }\n  }\n\n  fork(path, adjuster, root) {\n    const chain = this._collect(path);\n\n    chain.push({\n      schema: root\n    });\n    const tail = chain.shift();\n    let adjusted = {\n      id: tail.id,\n      schema: adjuster(tail.schema)\n    };\n    Assert(Common.isSchema(adjusted.schema), 'adjuster function failed to return a joi schema type');\n\n    for (const node of chain) {\n      adjusted = {\n        id: node.id,\n        schema: internals.fork(node.schema, adjusted.id, adjusted.schema)\n      };\n    }\n\n    return adjusted.schema;\n  }\n\n  labels(path, behind = []) {\n    const current = path[0];\n\n    const node = this._get(current);\n\n    if (!node) {\n      return [...behind, ...path].join('.');\n    }\n\n    const forward = path.slice(1);\n    behind = [...behind, node.schema._flags.label || current];\n\n    if (!forward.length) {\n      return behind.join('.');\n    }\n\n    return node.schema._ids.labels(forward, behind);\n  }\n\n  reach(path, behind = []) {\n    const current = path[0];\n\n    const node = this._get(current);\n\n    Assert(node, 'Schema does not contain path', [...behind, ...path].join('.'));\n    const forward = path.slice(1);\n\n    if (!forward.length) {\n      return node.schema;\n    }\n\n    return node.schema._ids.reach(forward, [...behind, current]);\n  }\n\n  register(schema, {\n    key\n  } = {}) {\n    if (!schema || !Common.isSchema(schema)) {\n      return;\n    }\n\n    if (schema.$_property('schemaChain') || schema._ids._schemaChain) {\n      this._schemaChain = true;\n    }\n\n    const id = schema._flags.id;\n\n    if (id) {\n      const existing = this._byId.get(id);\n\n      Assert(!existing || existing.schema === schema, 'Cannot add different schemas with the same id:', id);\n      Assert(!this._byKey.has(id), 'Schema id conflicts with existing key:', id);\n\n      this._byId.set(id, {\n        schema,\n        id\n      });\n    }\n\n    if (key) {\n      Assert(!this._byKey.has(key), 'Schema already contains key:', key);\n      Assert(!this._byId.has(key), 'Schema key conflicts with existing id:', key);\n\n      this._byKey.set(key, {\n        schema,\n        id: key\n      });\n    }\n  }\n\n  reset() {\n    this._byId = new Map();\n    this._byKey = new Map();\n    this._schemaChain = false;\n  }\n\n  _collect(path, behind = [], nodes = []) {\n    const current = path[0];\n\n    const node = this._get(current);\n\n    Assert(node, 'Schema does not contain path', [...behind, ...path].join('.'));\n    nodes = [node, ...nodes];\n    const forward = path.slice(1);\n\n    if (!forward.length) {\n      return nodes;\n    }\n\n    return node.schema._ids._collect(forward, [...behind, current], nodes);\n  }\n\n  _get(id) {\n    return this._byId.get(id) || this._byKey.get(id);\n  }\n\n};\n\ninternals.fork = function (schema, id, replacement) {\n  const each = (item, {\n    key\n  }) => {\n    if (id === (item._flags.id || key)) {\n      return replacement;\n    }\n  };\n\n  const obj = exports.schema(schema, {\n    each,\n    ref: false\n  });\n  return obj ? obj.$_mutateRebuild() : schema;\n};\n\nexports.schema = function (schema, options) {\n  let obj;\n\n  for (const name in schema._flags) {\n    if (name[0] === '_') {\n      continue;\n    }\n\n    const result = internals.scan(schema._flags[name], {\n      source: 'flags',\n      name\n    }, options);\n\n    if (result !== undefined) {\n      obj = obj || schema.clone();\n      obj._flags[name] = result;\n    }\n  }\n\n  for (let i = 0; i < schema._rules.length; ++i) {\n    const rule = schema._rules[i];\n    const result = internals.scan(rule.args, {\n      source: 'rules',\n      name: rule.name\n    }, options);\n\n    if (result !== undefined) {\n      obj = obj || schema.clone();\n      const clone = Object.assign({}, rule);\n      clone.args = result;\n      obj._rules[i] = clone;\n\n      const existingUnique = obj._singleRules.get(rule.name);\n\n      if (existingUnique === rule) {\n        obj._singleRules.set(rule.name, clone);\n      }\n    }\n  }\n\n  for (const name in schema.$_terms) {\n    if (name[0] === '_') {\n      continue;\n    }\n\n    const result = internals.scan(schema.$_terms[name], {\n      source: 'terms',\n      name\n    }, options);\n\n    if (result !== undefined) {\n      obj = obj || schema.clone();\n      obj.$_terms[name] = result;\n    }\n  }\n\n  return obj;\n};\n\ninternals.scan = function (item, source, options, _path, _key) {\n  const path = _path || [];\n\n  if (item === null || typeof item !== 'object') {\n    return;\n  }\n\n  let clone;\n\n  if (Array.isArray(item)) {\n    for (let i = 0; i < item.length; ++i) {\n      const key = source.source === 'terms' && source.name === 'keys' && item[i].key;\n      const result = internals.scan(item[i], source, options, [i, ...path], key);\n\n      if (result !== undefined) {\n        clone = clone || item.slice();\n        clone[i] = result;\n      }\n    }\n\n    return clone;\n  }\n\n  if (options.schema !== false && Common.isSchema(item) || options.ref !== false && Ref.isRef(item)) {\n    const result = options.each(item, { ...source,\n      path,\n      key: _key\n    });\n\n    if (result === item) {\n      return;\n    }\n\n    return result;\n  }\n\n  for (const key in item) {\n    if (key[0] === '_') {\n      continue;\n    }\n\n    const result = internals.scan(item[key], source, options, [key, ...path], _key);\n\n    if (result !== undefined) {\n      clone = clone || Object.assign({}, item);\n      clone[key] = result;\n    }\n  }\n\n  return clone;\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/lib/modify.js?");

/***/ }),

/***/ "./node_modules/joi/lib/ref.js":
/*!*************************************!*\
  !*** ./node_modules/joi/lib/ref.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"./node_modules/@hapi/hoek/lib/assert.js\");\n\nconst Clone = __webpack_require__(/*! @hapi/hoek/lib/clone */ \"./node_modules/@hapi/hoek/lib/clone.js\");\n\nconst Reach = __webpack_require__(/*! @hapi/hoek/lib/reach */ \"./node_modules/@hapi/hoek/lib/reach.js\");\n\nconst Common = __webpack_require__(/*! ./common */ \"./node_modules/joi/lib/common.js\");\n\nlet Template;\nconst internals = {\n  symbol: Symbol('ref'),\n  // Used to internally identify references (shared with other joi versions)\n  defaults: {\n    adjust: null,\n    in: false,\n    iterables: null,\n    map: null,\n    separator: '.',\n    type: 'value'\n  }\n};\n\nexports.create = function (key, options = {}) {\n  Assert(typeof key === 'string', 'Invalid reference key:', key);\n  Common.assertOptions(options, ['adjust', 'ancestor', 'in', 'iterables', 'map', 'prefix', 'render', 'separator']);\n  Assert(!options.prefix || typeof options.prefix === 'object', 'options.prefix must be of type object');\n  const ref = Object.assign({}, internals.defaults, options);\n  delete ref.prefix;\n  const separator = ref.separator;\n  const context = internals.context(key, separator, options.prefix);\n  ref.type = context.type;\n  key = context.key;\n\n  if (ref.type === 'value') {\n    if (context.root) {\n      Assert(!separator || key[0] !== separator, 'Cannot specify relative path with root prefix');\n      ref.ancestor = 'root';\n\n      if (!key) {\n        key = null;\n      }\n    }\n\n    if (separator && separator === key) {\n      key = null;\n      ref.ancestor = 0;\n    } else {\n      if (ref.ancestor !== undefined) {\n        Assert(!separator || !key || key[0] !== separator, 'Cannot combine prefix with ancestor option');\n      } else {\n        const [ancestor, slice] = internals.ancestor(key, separator);\n\n        if (slice) {\n          key = key.slice(slice);\n\n          if (key === '') {\n            key = null;\n          }\n        }\n\n        ref.ancestor = ancestor;\n      }\n    }\n  }\n\n  ref.path = separator ? key === null ? [] : key.split(separator) : [key];\n  return new internals.Ref(ref);\n};\n\nexports[\"in\"] = function (key, options = {}) {\n  return exports.create(key, { ...options,\n    in: true\n  });\n};\n\nexports.isRef = function (ref) {\n  return ref ? !!ref[Common.symbols.ref] : false;\n};\n\ninternals.Ref = class {\n  constructor(options) {\n    Assert(typeof options === 'object', 'Invalid reference construction');\n    Common.assertOptions(options, ['adjust', 'ancestor', 'in', 'iterables', 'map', 'path', 'render', 'separator', 'type', // Copied\n    'depth', 'key', 'root', 'display' // Overridden\n    ]);\n    Assert([false, undefined].includes(options.separator) || typeof options.separator === 'string' && options.separator.length === 1, 'Invalid separator');\n    Assert(!options.adjust || typeof options.adjust === 'function', 'options.adjust must be a function');\n    Assert(!options.map || Array.isArray(options.map), 'options.map must be an array');\n    Assert(!options.map || !options.adjust, 'Cannot set both map and adjust options');\n    Object.assign(this, internals.defaults, options);\n    Assert(this.type === 'value' || this.ancestor === undefined, 'Non-value references cannot reference ancestors');\n\n    if (Array.isArray(this.map)) {\n      this.map = new Map(this.map);\n    }\n\n    this.depth = this.path.length;\n    this.key = this.path.length ? this.path.join(this.separator) : null;\n    this.root = this.path[0];\n    this.updateDisplay();\n  }\n\n  resolve(value, state, prefs, local, options = {}) {\n    Assert(!this.in || options.in, 'Invalid in() reference usage');\n\n    if (this.type === 'global') {\n      return this._resolve(prefs.context, state, options);\n    }\n\n    if (this.type === 'local') {\n      return this._resolve(local, state, options);\n    }\n\n    if (!this.ancestor) {\n      return this._resolve(value, state, options);\n    }\n\n    if (this.ancestor === 'root') {\n      return this._resolve(state.ancestors[state.ancestors.length - 1], state, options);\n    }\n\n    Assert(this.ancestor <= state.ancestors.length, 'Invalid reference exceeds the schema root:', this.display);\n    return this._resolve(state.ancestors[this.ancestor - 1], state, options);\n  }\n\n  _resolve(target, state, options) {\n    let resolved;\n\n    if (this.type === 'value' && state.mainstay.shadow && options.shadow !== false) {\n      resolved = state.mainstay.shadow.get(this.absolute(state));\n    }\n\n    if (resolved === undefined) {\n      resolved = Reach(target, this.path, {\n        iterables: this.iterables,\n        functions: true\n      });\n    }\n\n    if (this.adjust) {\n      resolved = this.adjust(resolved);\n    }\n\n    if (this.map) {\n      const mapped = this.map.get(resolved);\n\n      if (mapped !== undefined) {\n        resolved = mapped;\n      }\n    }\n\n    if (state.mainstay) {\n      state.mainstay.tracer.resolve(state, this, resolved);\n    }\n\n    return resolved;\n  }\n\n  toString() {\n    return this.display;\n  }\n\n  absolute(state) {\n    return [...state.path.slice(0, -this.ancestor), ...this.path];\n  }\n\n  clone() {\n    return new internals.Ref(this);\n  }\n\n  describe() {\n    const ref = {\n      path: this.path\n    };\n\n    if (this.type !== 'value') {\n      ref.type = this.type;\n    }\n\n    if (this.separator !== '.') {\n      ref.separator = this.separator;\n    }\n\n    if (this.type === 'value' && this.ancestor !== 1) {\n      ref.ancestor = this.ancestor;\n    }\n\n    if (this.map) {\n      ref.map = [...this.map];\n    }\n\n    for (const key of ['adjust', 'iterables', 'render']) {\n      if (this[key] !== null && this[key] !== undefined) {\n        ref[key] = this[key];\n      }\n    }\n\n    if (this.in !== false) {\n      ref.in = true;\n    }\n\n    return {\n      ref\n    };\n  }\n\n  updateDisplay() {\n    const key = this.key !== null ? this.key : '';\n\n    if (this.type !== 'value') {\n      this.display = `ref:${this.type}:${key}`;\n      return;\n    }\n\n    if (!this.separator) {\n      this.display = `ref:${key}`;\n      return;\n    }\n\n    if (!this.ancestor) {\n      this.display = `ref:${this.separator}${key}`;\n      return;\n    }\n\n    if (this.ancestor === 'root') {\n      this.display = `ref:root:${key}`;\n      return;\n    }\n\n    if (this.ancestor === 1) {\n      this.display = `ref:${key || '..'}`;\n      return;\n    }\n\n    const lead = new Array(this.ancestor + 1).fill(this.separator).join('');\n    this.display = `ref:${lead}${key || ''}`;\n  }\n\n};\ninternals.Ref.prototype[Common.symbols.ref] = true;\n\nexports.build = function (desc) {\n  desc = Object.assign({}, internals.defaults, desc);\n\n  if (desc.type === 'value' && desc.ancestor === undefined) {\n    desc.ancestor = 1;\n  }\n\n  return new internals.Ref(desc);\n};\n\ninternals.context = function (key, separator, prefix = {}) {\n  key = key.trim();\n\n  if (prefix) {\n    const globalp = prefix.global === undefined ? '$' : prefix.global;\n\n    if (globalp !== separator && key.startsWith(globalp)) {\n      return {\n        key: key.slice(globalp.length),\n        type: 'global'\n      };\n    }\n\n    const local = prefix.local === undefined ? '#' : prefix.local;\n\n    if (local !== separator && key.startsWith(local)) {\n      return {\n        key: key.slice(local.length),\n        type: 'local'\n      };\n    }\n\n    const root = prefix.root === undefined ? '/' : prefix.root;\n\n    if (root !== separator && key.startsWith(root)) {\n      return {\n        key: key.slice(root.length),\n        type: 'value',\n        root: true\n      };\n    }\n  }\n\n  return {\n    key,\n    type: 'value'\n  };\n};\n\ninternals.ancestor = function (key, separator) {\n  if (!separator) {\n    return [1, 0]; // 'a_b' -> 1 (parent)\n  }\n\n  if (key[0] !== separator) {\n    // 'a.b' -> 1 (parent)\n    return [1, 0];\n  }\n\n  if (key[1] !== separator) {\n    // '.a.b' -> 0 (self)\n    return [0, 1];\n  }\n\n  let i = 2;\n\n  while (key[i] === separator) {\n    ++i;\n  }\n\n  return [i - 1, i]; // '...a.b.' -> 2 (grandparent)\n};\n\nexports.toSibling = 0;\nexports.toParent = 1;\nexports.Manager = class {\n  constructor() {\n    this.refs = []; // 0: [self refs], 1: [parent refs], 2: [grandparent refs], ...\n  }\n\n  register(source, target) {\n    if (!source) {\n      return;\n    }\n\n    target = target === undefined ? exports.toParent : target; // Array\n\n    if (Array.isArray(source)) {\n      for (const ref of source) {\n        this.register(ref, target);\n      }\n\n      return;\n    } // Schema\n\n\n    if (Common.isSchema(source)) {\n      for (const item of source._refs.refs) {\n        if (item.ancestor - target >= 0) {\n          this.refs.push({\n            ancestor: item.ancestor - target,\n            root: item.root\n          });\n        }\n      }\n\n      return;\n    } // Reference\n\n\n    if (exports.isRef(source) && source.type === 'value' && source.ancestor - target >= 0) {\n      this.refs.push({\n        ancestor: source.ancestor - target,\n        root: source.root\n      });\n    } // Template\n\n\n    Template = Template || __webpack_require__(/*! ./template */ \"./node_modules/joi/lib/template.js\");\n\n    if (Template.isTemplate(source)) {\n      this.register(source.refs(), target);\n    }\n  }\n\n  get length() {\n    return this.refs.length;\n  }\n\n  clone() {\n    const copy = new exports.Manager();\n    copy.refs = Clone(this.refs);\n    return copy;\n  }\n\n  reset() {\n    this.refs = [];\n  }\n\n  roots() {\n    return this.refs.filter(ref => !ref.ancestor).map(ref => ref.root);\n  }\n\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/lib/ref.js?");

/***/ }),

/***/ "./node_modules/joi/lib/schemas.js":
/*!*****************************************!*\
  !*** ./node_modules/joi/lib/schemas.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nconst Joi = __webpack_require__(/*! ./index */ \"./node_modules/joi/lib/index.js\");\n\nconst internals = {}; // Preferences\n\ninternals.wrap = Joi.string().min(1).max(2).allow(false);\nexports.preferences = Joi.object({\n  allowUnknown: Joi.boolean(),\n  abortEarly: Joi.boolean(),\n  artifacts: Joi.boolean(),\n  cache: Joi.boolean(),\n  context: Joi.object(),\n  convert: Joi.boolean(),\n  dateFormat: Joi.valid('date', 'iso', 'string', 'time', 'utc'),\n  debug: Joi.boolean(),\n  errors: {\n    escapeHtml: Joi.boolean(),\n    label: Joi.valid('path', 'key', false),\n    language: [Joi.string(), Joi.object().ref()],\n    render: Joi.boolean(),\n    stack: Joi.boolean(),\n    wrap: {\n      label: internals.wrap,\n      array: internals.wrap\n    }\n  },\n  externals: Joi.boolean(),\n  messages: Joi.object(),\n  noDefaults: Joi.boolean(),\n  nonEnumerables: Joi.boolean(),\n  presence: Joi.valid('required', 'optional', 'forbidden'),\n  skipFunctions: Joi.boolean(),\n  stripUnknown: Joi.object({\n    arrays: Joi.boolean(),\n    objects: Joi.boolean()\n  }).or('arrays', 'objects').allow(true, false),\n  warnings: Joi.boolean()\n}).strict(); // Extensions\n\ninternals.nameRx = /^[a-zA-Z0-9]\\w*$/;\ninternals.rule = Joi.object({\n  alias: Joi.array().items(Joi.string().pattern(internals.nameRx)).single(),\n  args: Joi.array().items(Joi.string(), Joi.object({\n    name: Joi.string().pattern(internals.nameRx).required(),\n    ref: Joi.boolean(),\n    assert: Joi.alternatives([Joi.function(), Joi.object().schema()]).conditional('ref', {\n      is: true,\n      then: Joi.required()\n    }),\n    normalize: Joi.function(),\n    message: Joi.string().when('assert', {\n      is: Joi.function(),\n      then: Joi.required()\n    })\n  })),\n  convert: Joi.boolean(),\n  manifest: Joi.boolean(),\n  method: Joi.function().allow(false),\n  multi: Joi.boolean(),\n  validate: Joi.function()\n});\nexports.extension = Joi.object({\n  type: Joi.alternatives([Joi.string(), Joi.object().regex()]).required(),\n  args: Joi.function(),\n  cast: Joi.object().pattern(internals.nameRx, Joi.object({\n    from: Joi.function().maxArity(1).required(),\n    to: Joi.function().minArity(1).maxArity(2).required()\n  })),\n  base: Joi.object().schema().when('type', {\n    is: Joi.object().regex(),\n    then: Joi.forbidden()\n  }),\n  coerce: [Joi.function().maxArity(3), Joi.object({\n    method: Joi.function().maxArity(3).required(),\n    from: Joi.array().items(Joi.string()).single()\n  })],\n  flags: Joi.object().pattern(internals.nameRx, Joi.object({\n    setter: Joi.string(),\n    default: Joi.any()\n  })),\n  manifest: {\n    build: Joi.function().arity(2)\n  },\n  messages: [Joi.object(), Joi.string()],\n  modifiers: Joi.object().pattern(internals.nameRx, Joi.function().minArity(1).maxArity(2)),\n  overrides: Joi.object().pattern(internals.nameRx, Joi.function()),\n  prepare: Joi.function().maxArity(3),\n  rebuild: Joi.function().arity(1),\n  rules: Joi.object().pattern(internals.nameRx, internals.rule),\n  terms: Joi.object().pattern(internals.nameRx, Joi.object({\n    init: Joi.array().allow(null).required(),\n    manifest: Joi.object().pattern(/.+/, [Joi.valid('schema', 'single'), Joi.object({\n      mapped: Joi.object({\n        from: Joi.string().required(),\n        to: Joi.string().required()\n      }).required()\n    })])\n  })),\n  validate: Joi.function().maxArity(3)\n}).strict();\nexports.extensions = Joi.array().items(Joi.object(), Joi.function().arity(1)).strict(); // Manifest\n\ninternals.desc = {\n  buffer: Joi.object({\n    buffer: Joi.string()\n  }),\n  func: Joi.object({\n    function: Joi.function().required(),\n    options: {\n      literal: true\n    }\n  }),\n  override: Joi.object({\n    override: true\n  }),\n  ref: Joi.object({\n    ref: Joi.object({\n      type: Joi.valid('value', 'global', 'local'),\n      path: Joi.array().required(),\n      separator: Joi.string().length(1).allow(false),\n      ancestor: Joi.number().min(0).integer().allow('root'),\n      map: Joi.array().items(Joi.array().length(2)).min(1),\n      adjust: Joi.function(),\n      iterables: Joi.boolean(),\n      in: Joi.boolean(),\n      render: Joi.boolean()\n    }).required()\n  }),\n  regex: Joi.object({\n    regex: Joi.string().min(3)\n  }),\n  special: Joi.object({\n    special: Joi.valid('deep').required()\n  }),\n  template: Joi.object({\n    template: Joi.string().required(),\n    options: Joi.object()\n  }),\n  value: Joi.object({\n    value: Joi.alternatives([Joi.object(), Joi.array()]).required()\n  })\n};\ninternals.desc.entity = Joi.alternatives([Joi.array().items(Joi.link('...')), Joi.boolean(), Joi.function(), Joi.number(), Joi.string(), internals.desc.buffer, internals.desc.func, internals.desc.ref, internals.desc.regex, internals.desc.special, internals.desc.template, internals.desc.value, Joi.link('/')]);\ninternals.desc.values = Joi.array().items(null, Joi.boolean(), Joi.function(), Joi.number().allow(Infinity, -Infinity), Joi.string().allow(''), Joi.symbol(), internals.desc.buffer, internals.desc.func, internals.desc.override, internals.desc.ref, internals.desc.regex, internals.desc.template, internals.desc.value);\ninternals.desc.messages = Joi.object().pattern(/.+/, [Joi.string(), internals.desc.template, Joi.object().pattern(/.+/, [Joi.string(), internals.desc.template])]);\nexports.description = Joi.object({\n  type: Joi.string().required(),\n  flags: Joi.object({\n    cast: Joi.string(),\n    default: Joi.any(),\n    description: Joi.string(),\n    empty: Joi.link('/'),\n    failover: internals.desc.entity,\n    id: Joi.string(),\n    label: Joi.string(),\n    only: true,\n    presence: ['optional', 'required', 'forbidden'],\n    result: ['raw', 'strip'],\n    strip: Joi.boolean(),\n    unit: Joi.string()\n  }).unknown(),\n  preferences: {\n    allowUnknown: Joi.boolean(),\n    abortEarly: Joi.boolean(),\n    artifacts: Joi.boolean(),\n    cache: Joi.boolean(),\n    convert: Joi.boolean(),\n    dateFormat: ['date', 'iso', 'string', 'time', 'utc'],\n    errors: {\n      escapeHtml: Joi.boolean(),\n      label: ['path', 'key'],\n      language: [Joi.string(), internals.desc.ref],\n      wrap: {\n        label: internals.wrap,\n        array: internals.wrap\n      }\n    },\n    externals: Joi.boolean(),\n    messages: internals.desc.messages,\n    noDefaults: Joi.boolean(),\n    nonEnumerables: Joi.boolean(),\n    presence: ['required', 'optional', 'forbidden'],\n    skipFunctions: Joi.boolean(),\n    stripUnknown: Joi.object({\n      arrays: Joi.boolean(),\n      objects: Joi.boolean()\n    }).or('arrays', 'objects').allow(true, false),\n    warnings: Joi.boolean()\n  },\n  allow: internals.desc.values,\n  invalid: internals.desc.values,\n  rules: Joi.array().min(1).items({\n    name: Joi.string().required(),\n    args: Joi.object().min(1),\n    keep: Joi.boolean(),\n    message: [Joi.string(), internals.desc.messages],\n    warn: Joi.boolean()\n  }),\n  // Terms\n  keys: Joi.object().pattern(/.*/, Joi.link('/')),\n  link: internals.desc.ref\n}).pattern(/^[a-z]\\w*$/, Joi.any());\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/lib/schemas.js?");

/***/ }),

/***/ "./node_modules/joi/lib/state.js":
/*!***************************************!*\
  !*** ./node_modules/joi/lib/state.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst Clone = __webpack_require__(/*! @hapi/hoek/lib/clone */ \"./node_modules/@hapi/hoek/lib/clone.js\");\n\nconst Reach = __webpack_require__(/*! @hapi/hoek/lib/reach */ \"./node_modules/@hapi/hoek/lib/reach.js\");\n\nconst Common = __webpack_require__(/*! ./common */ \"./node_modules/joi/lib/common.js\");\n\nconst internals = {\n  value: Symbol('value')\n};\nmodule.exports = internals.State = class {\n  constructor(path, ancestors, state) {\n    this.path = path;\n    this.ancestors = ancestors; // [parent, ..., root]\n\n    this.mainstay = state.mainstay;\n    this.schemas = state.schemas; // [current, ..., root]\n\n    this.debug = null;\n  }\n\n  localize(path, ancestors = null, schema = null) {\n    const state = new internals.State(path, ancestors, this);\n\n    if (schema && state.schemas) {\n      state.schemas = [internals.schemas(schema), ...state.schemas];\n    }\n\n    return state;\n  }\n\n  nest(schema, debug) {\n    const state = new internals.State(this.path, this.ancestors, this);\n    state.schemas = state.schemas && [internals.schemas(schema), ...state.schemas];\n    state.debug = debug;\n    return state;\n  }\n\n  shadow(value, reason) {\n    this.mainstay.shadow = this.mainstay.shadow || new internals.Shadow();\n    this.mainstay.shadow.set(this.path, value, reason);\n  }\n\n  snapshot() {\n    if (this.mainstay.shadow) {\n      this._snapshot = Clone(this.mainstay.shadow.node(this.path));\n    }\n  }\n\n  restore() {\n    if (this.mainstay.shadow) {\n      this.mainstay.shadow.override(this.path, this._snapshot);\n      this._snapshot = undefined;\n    }\n  }\n\n};\n\ninternals.schemas = function (schema) {\n  if (Common.isSchema(schema)) {\n    return {\n      schema\n    };\n  }\n\n  return schema;\n};\n\ninternals.Shadow = class {\n  constructor() {\n    this._values = null;\n  }\n\n  set(path, value, reason) {\n    if (!path.length) {\n      // No need to store root value\n      return;\n    }\n\n    if (reason === 'strip' && typeof path[path.length - 1] === 'number') {\n      // Cannot store stripped array values (due to shift)\n      return;\n    }\n\n    this._values = this._values || new Map();\n    let node = this._values;\n\n    for (let i = 0; i < path.length; ++i) {\n      const segment = path[i];\n      let next = node.get(segment);\n\n      if (!next) {\n        next = new Map();\n        node.set(segment, next);\n      }\n\n      node = next;\n    }\n\n    node[internals.value] = value;\n  }\n\n  get(path) {\n    const node = this.node(path);\n\n    if (node) {\n      return node[internals.value];\n    }\n  }\n\n  node(path) {\n    if (!this._values) {\n      return;\n    }\n\n    return Reach(this._values, path, {\n      iterables: true\n    });\n  }\n\n  override(path, node) {\n    if (!this._values) {\n      return;\n    }\n\n    const parents = path.slice(0, -1);\n    const own = path[path.length - 1];\n    const parent = Reach(this._values, parents, {\n      iterables: true\n    });\n\n    if (node) {\n      parent.set(own, node);\n      return;\n    }\n\n    if (parent) {\n      parent.delete(own);\n    }\n  }\n\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/lib/state.js?");

/***/ }),

/***/ "./node_modules/joi/lib/template.js":
/*!******************************************!*\
  !*** ./node_modules/joi/lib/template.js ***!
  \******************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"./node_modules/@hapi/hoek/lib/assert.js\");\n\nconst Clone = __webpack_require__(/*! @hapi/hoek/lib/clone */ \"./node_modules/@hapi/hoek/lib/clone.js\");\n\nconst EscapeHtml = __webpack_require__(/*! @hapi/hoek/lib/escapeHtml */ \"./node_modules/@hapi/hoek/lib/escapeHtml.js\");\n\nconst Formula = __webpack_require__(/*! @sideway/formula */ \"./node_modules/@sideway/formula/lib/index.js\");\n\nconst Common = __webpack_require__(/*! ./common */ \"./node_modules/joi/lib/common.js\");\n\nconst Errors = __webpack_require__(/*! ./errors */ \"./node_modules/joi/lib/errors.js\");\n\nconst Ref = __webpack_require__(/*! ./ref */ \"./node_modules/joi/lib/ref.js\");\n\nconst internals = {\n  symbol: Symbol('template'),\n  opens: new Array(1000).join('\\u0000'),\n  closes: new Array(1000).join('\\u0001'),\n  dateFormat: {\n    date: Date.prototype.toDateString,\n    iso: Date.prototype.toISOString,\n    string: Date.prototype.toString,\n    time: Date.prototype.toTimeString,\n    utc: Date.prototype.toUTCString\n  }\n};\nmodule.exports = exports = internals.Template = class {\n  constructor(source, options) {\n    Assert(typeof source === 'string', 'Template source must be a string');\n    Assert(!source.includes('\\u0000') && !source.includes('\\u0001'), 'Template source cannot contain reserved control characters');\n    this.source = source;\n    this.rendered = source;\n    this._template = null;\n    this._settings = Clone(options);\n\n    this._parse();\n  }\n\n  _parse() {\n    // 'text {raw} {{ref}} \\\\{{ignore}} {{ignore\\\\}} {{ignore {{ignore}'\n    if (!this.source.includes('{')) {\n      return;\n    } // Encode escaped \\\\{{{{{\n\n\n    const encoded = internals.encode(this.source); // Split on first { in each set\n\n    const parts = internals.split(encoded); // Process parts\n\n    let refs = false;\n    const processed = [];\n    const head = parts.shift();\n\n    if (head) {\n      processed.push(head);\n    }\n\n    for (const part of parts) {\n      const raw = part[0] !== '{';\n      const ender = raw ? '}' : '}}';\n      const end = part.indexOf(ender);\n\n      if (end === -1 || // Ignore non-matching closing\n      part[1] === '{') {\n        // Ignore more than two {\n        processed.push(`{${internals.decode(part)}`);\n        continue;\n      }\n\n      let variable = part.slice(raw ? 0 : 1, end);\n      const wrapped = variable[0] === ':';\n\n      if (wrapped) {\n        variable = variable.slice(1);\n      }\n\n      const dynamic = this._ref(internals.decode(variable), {\n        raw,\n        wrapped\n      });\n\n      processed.push(dynamic);\n\n      if (typeof dynamic !== 'string') {\n        refs = true;\n      }\n\n      const rest = part.slice(end + ender.length);\n\n      if (rest) {\n        processed.push(internals.decode(rest));\n      }\n    }\n\n    if (!refs) {\n      this.rendered = processed.join('');\n      return;\n    }\n\n    this._template = processed;\n  }\n\n  static date(date, prefs) {\n    return internals.dateFormat[prefs.dateFormat].call(date);\n  }\n\n  describe(options = {}) {\n    if (!this._settings && options.compact) {\n      return this.source;\n    }\n\n    const desc = {\n      template: this.source\n    };\n\n    if (this._settings) {\n      desc.options = this._settings;\n    }\n\n    return desc;\n  }\n\n  static build(desc) {\n    return new internals.Template(desc.template, desc.options);\n  }\n\n  isDynamic() {\n    return !!this._template;\n  }\n\n  static isTemplate(template) {\n    return template ? !!template[Common.symbols.template] : false;\n  }\n\n  refs() {\n    if (!this._template) {\n      return;\n    }\n\n    const refs = [];\n\n    for (const part of this._template) {\n      if (typeof part !== 'string') {\n        refs.push(...part.refs);\n      }\n    }\n\n    return refs;\n  }\n\n  resolve(value, state, prefs, local) {\n    if (this._template && this._template.length === 1) {\n      return this._part(this._template[0],\n      /* context -> [*/\n      value, state, prefs, local, {}\n      /*] */\n      );\n    }\n\n    return this.render(value, state, prefs, local);\n  }\n\n  _part(part, ...args) {\n    if (part.ref) {\n      return part.ref.resolve(...args);\n    }\n\n    return part.formula.evaluate(args);\n  }\n\n  render(value, state, prefs, local, options = {}) {\n    if (!this.isDynamic()) {\n      return this.rendered;\n    }\n\n    const parts = [];\n\n    for (const part of this._template) {\n      if (typeof part === 'string') {\n        parts.push(part);\n      } else {\n        const rendered = this._part(part,\n        /* context -> [*/\n        value, state, prefs, local, options\n        /*] */\n        );\n\n        const string = internals.stringify(rendered, value, state, prefs, local, options);\n\n        if (string !== undefined) {\n          const result = part.raw || (options.errors && options.errors.escapeHtml) === false ? string : EscapeHtml(string);\n          parts.push(internals.wrap(result, part.wrapped && prefs.errors.wrap.label));\n        }\n      }\n    }\n\n    return parts.join('');\n  }\n\n  _ref(content, {\n    raw,\n    wrapped\n  }) {\n    const refs = [];\n\n    const reference = variable => {\n      const ref = Ref.create(variable, this._settings);\n      refs.push(ref);\n      return context => ref.resolve(...context);\n    };\n\n    try {\n      var formula = new Formula.Parser(content, {\n        reference,\n        functions: internals.functions,\n        constants: internals.constants\n      });\n    } catch (err) {\n      err.message = `Invalid template variable \"${content}\" fails due to: ${err.message}`;\n      throw err;\n    }\n\n    if (formula.single) {\n      if (formula.single.type === 'reference') {\n        const ref = refs[0];\n        return {\n          ref,\n          raw,\n          refs,\n          wrapped: wrapped || ref.type === 'local' && ref.key === 'label'\n        };\n      }\n\n      return internals.stringify(formula.single.value);\n    }\n\n    return {\n      formula,\n      raw,\n      refs\n    };\n  }\n\n  toString() {\n    return this.source;\n  }\n\n};\ninternals.Template.prototype[Common.symbols.template] = true;\ninternals.Template.prototype.isImmutable = true; // Prevents Hoek from deep cloning schema objects\n\ninternals.encode = function (string) {\n  return string.replace(/\\\\(\\{+)/g, ($0, $1) => {\n    return internals.opens.slice(0, $1.length);\n  }).replace(/\\\\(\\}+)/g, ($0, $1) => {\n    return internals.closes.slice(0, $1.length);\n  });\n};\n\ninternals.decode = function (string) {\n  return string.replace(/\\u0000/g, '{').replace(/\\u0001/g, '}');\n};\n\ninternals.split = function (string) {\n  const parts = [];\n  let current = '';\n\n  for (let i = 0; i < string.length; ++i) {\n    const char = string[i];\n\n    if (char === '{') {\n      let next = '';\n\n      while (i + 1 < string.length && string[i + 1] === '{') {\n        next += '{';\n        ++i;\n      }\n\n      parts.push(current);\n      current = next;\n    } else {\n      current += char;\n    }\n  }\n\n  parts.push(current);\n  return parts;\n};\n\ninternals.wrap = function (value, ends) {\n  if (!ends) {\n    return value;\n  }\n\n  if (ends.length === 1) {\n    return `${ends}${value}${ends}`;\n  }\n\n  return `${ends[0]}${value}${ends[1]}`;\n};\n\ninternals.stringify = function (value, original, state, prefs, local, options) {\n  const type = typeof value;\n  let skipWrap = false;\n\n  if (Ref.isRef(value) && value.render) {\n    skipWrap = value.in;\n    value = value.resolve(original, state, prefs, local, {\n      in: value.in,\n      ...options\n    });\n  }\n\n  if (value === null) {\n    return 'null';\n  }\n\n  if (type === 'string') {\n    return value;\n  }\n\n  if (type === 'number' || type === 'function' || type === 'symbol') {\n    return value.toString();\n  }\n\n  if (type !== 'object') {\n    return JSON.stringify(value);\n  }\n\n  if (value instanceof Date) {\n    return internals.Template.date(value, prefs);\n  }\n\n  if (value instanceof Map) {\n    const pairs = [];\n\n    for (const [key, sym] of value.entries()) {\n      pairs.push(`${key.toString()} -> ${sym.toString()}`);\n    }\n\n    value = pairs;\n  }\n\n  if (!Array.isArray(value)) {\n    return value.toString();\n  }\n\n  let partial = '';\n\n  for (const item of value) {\n    partial = partial + (partial.length ? ', ' : '') + internals.stringify(item, original, state, prefs, local, options);\n  }\n\n  if (skipWrap) {\n    return partial;\n  }\n\n  return internals.wrap(partial, prefs.errors.wrap.array);\n};\n\ninternals.constants = {\n  true: true,\n  false: false,\n  null: null,\n  second: 1000,\n  minute: 60 * 1000,\n  hour: 60 * 60 * 1000,\n  day: 24 * 60 * 60 * 1000\n};\ninternals.functions = {\n  if(condition, then, otherwise) {\n    return condition ? then : otherwise;\n  },\n\n  msg(code) {\n    const [value, state, prefs, local, options] = this;\n    const messages = options.messages;\n\n    if (!messages) {\n      return '';\n    }\n\n    const template = Errors.template(value, messages[0], code, state, prefs) || Errors.template(value, messages[1], code, state, prefs);\n\n    if (!template) {\n      return '';\n    }\n\n    return template.render(value, state, prefs, local, options);\n  },\n\n  number(value) {\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      return parseFloat(value);\n    }\n\n    if (typeof value === 'boolean') {\n      return value ? 1 : 0;\n    }\n\n    if (value instanceof Date) {\n      return value.getTime();\n    }\n\n    return null;\n  }\n\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/lib/template.js?");

/***/ }),

/***/ "./node_modules/joi/lib/trace.js":
/*!***************************************!*\
  !*** ./node_modules/joi/lib/trace.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nconst DeepEqual = __webpack_require__(/*! @hapi/hoek/lib/deepEqual */ \"./node_modules/@hapi/hoek/lib/deepEqual.js\");\n\nconst Pinpoint = __webpack_require__(/*! @sideway/pinpoint */ \"./node_modules/@sideway/pinpoint/lib/index.js\");\n\nconst Errors = __webpack_require__(/*! ./errors */ \"./node_modules/joi/lib/errors.js\");\n\nconst internals = {\n  codes: {\n    error: 1,\n    pass: 2,\n    full: 3\n  },\n  labels: {\n    0: 'never used',\n    1: 'always error',\n    2: 'always pass'\n  }\n};\n\nexports.setup = function (root) {\n  const trace = function () {\n    root._tracer = root._tracer || new internals.Tracer();\n    return root._tracer;\n  };\n\n  root.trace = trace;\n  root[Symbol.for('@hapi/lab/coverage/initialize')] = trace;\n\n  root.untrace = () => {\n    root._tracer = null;\n  };\n};\n\nexports.location = function (schema) {\n  return schema.$_setFlag('_tracerLocation', Pinpoint.location(2)); // base.tracer(), caller\n};\n\ninternals.Tracer = class {\n  constructor() {\n    this.name = 'Joi';\n    this._schemas = new Map();\n  }\n\n  _register(schema) {\n    const existing = this._schemas.get(schema);\n\n    if (existing) {\n      return existing.store;\n    }\n\n    const store = new internals.Store(schema);\n    const {\n      filename,\n      line\n    } = schema._flags._tracerLocation || Pinpoint.location(5); // internals.tracer(), internals.entry(), exports.entry(), validate(), caller\n\n    this._schemas.set(schema, {\n      filename,\n      line,\n      store\n    });\n\n    return store;\n  }\n\n  _combine(merged, sources) {\n    for (const {\n      store\n    } of this._schemas.values()) {\n      store._combine(merged, sources);\n    }\n  }\n\n  report(file) {\n    const coverage = []; // Process each registered schema\n\n    for (const {\n      filename,\n      line,\n      store\n    } of this._schemas.values()) {\n      if (file && file !== filename) {\n        continue;\n      } // Process sub schemas of the registered root\n\n\n      const missing = [];\n      const skipped = [];\n\n      for (const [schema, log] of store._sources.entries()) {\n        // Check if sub schema parent skipped\n        if (internals.sub(log.paths, skipped)) {\n          continue;\n        } // Check if sub schema reached\n\n\n        if (!log.entry) {\n          missing.push({\n            status: 'never reached',\n            paths: [...log.paths]\n          });\n          skipped.push(...log.paths);\n          continue;\n        } // Check values\n\n\n        for (const type of ['valid', 'invalid']) {\n          const set = schema[`_${type}s`];\n\n          if (!set) {\n            continue;\n          }\n\n          const values = new Set(set._values);\n          const refs = new Set(set._refs);\n\n          for (const {\n            value,\n            ref\n          } of log[type]) {\n            values.delete(value);\n            refs.delete(ref);\n          }\n\n          if (values.size || refs.size) {\n            missing.push({\n              status: [...values, ...[...refs].map(ref => ref.display)],\n              rule: `${type}s`\n            });\n          }\n        } // Check rules status\n\n\n        const rules = schema._rules.map(rule => rule.name);\n\n        for (const type of ['default', 'failover']) {\n          if (schema._flags[type] !== undefined) {\n            rules.push(type);\n          }\n        }\n\n        for (const name of rules) {\n          const status = internals.labels[log.rule[name] || 0];\n\n          if (status) {\n            const report = {\n              rule: name,\n              status\n            };\n\n            if (log.paths.size) {\n              report.paths = [...log.paths];\n            }\n\n            missing.push(report);\n          }\n        }\n      }\n\n      if (missing.length) {\n        coverage.push({\n          filename,\n          line,\n          missing,\n          severity: 'error',\n          message: `Schema missing tests for ${missing.map(internals.message).join(', ')}`\n        });\n      }\n    }\n\n    return coverage.length ? coverage : null;\n  }\n\n};\ninternals.Store = class {\n  constructor(schema) {\n    this.active = true;\n    this._sources = new Map(); // schema -> { paths, entry, rule, valid, invalid }\n\n    this._combos = new Map(); // merged -> [sources]\n\n    this._scan(schema);\n  }\n\n  debug(state, source, name, result) {\n    state.mainstay.debug && state.mainstay.debug.push({\n      type: source,\n      name,\n      result,\n      path: state.path\n    });\n  }\n\n  entry(schema, state) {\n    internals.debug(state, {\n      type: 'entry'\n    });\n\n    this._record(schema, log => {\n      log.entry = true;\n    });\n  }\n\n  filter(schema, state, source, value) {\n    internals.debug(state, {\n      type: source,\n      ...value\n    });\n\n    this._record(schema, log => {\n      log[source].add(value);\n    });\n  }\n\n  log(schema, state, source, name, result) {\n    internals.debug(state, {\n      type: source,\n      name,\n      result: result === 'full' ? 'pass' : result\n    });\n\n    this._record(schema, log => {\n      log[source][name] = log[source][name] || 0;\n      log[source][name] |= internals.codes[result];\n    });\n  }\n\n  resolve(state, ref, to) {\n    if (!state.mainstay.debug) {\n      return;\n    }\n\n    const log = {\n      type: 'resolve',\n      ref: ref.display,\n      to,\n      path: state.path\n    };\n    state.mainstay.debug.push(log);\n  }\n\n  value(state, by, from, to, name) {\n    if (!state.mainstay.debug || DeepEqual(from, to)) {\n      return;\n    }\n\n    const log = {\n      type: 'value',\n      by,\n      from,\n      to,\n      path: state.path\n    };\n\n    if (name) {\n      log.name = name;\n    }\n\n    state.mainstay.debug.push(log);\n  }\n\n  _record(schema, each) {\n    const log = this._sources.get(schema);\n\n    if (log) {\n      each(log);\n      return;\n    }\n\n    const sources = this._combos.get(schema);\n\n    for (const source of sources) {\n      this._record(source, each);\n    }\n  }\n\n  _scan(schema, _path) {\n    const path = _path || [];\n\n    let log = this._sources.get(schema);\n\n    if (!log) {\n      log = {\n        paths: new Set(),\n        entry: false,\n        rule: {},\n        valid: new Set(),\n        invalid: new Set()\n      };\n\n      this._sources.set(schema, log);\n    }\n\n    if (path.length) {\n      log.paths.add(path);\n    }\n\n    const each = (sub, source) => {\n      const subId = internals.id(sub, source);\n\n      this._scan(sub, path.concat(subId));\n    };\n\n    schema.$_modify({\n      each,\n      ref: false\n    });\n  }\n\n  _combine(merged, sources) {\n    this._combos.set(merged, sources);\n  }\n\n};\n\ninternals.message = function (item) {\n  const path = item.paths ? Errors.path(item.paths[0]) + (item.rule ? ':' : '') : '';\n  return `${path}${item.rule || ''} (${item.status})`;\n};\n\ninternals.id = function (schema, {\n  source,\n  name,\n  path,\n  key\n}) {\n  if (schema._flags.id) {\n    return schema._flags.id;\n  }\n\n  if (key) {\n    return key;\n  }\n\n  name = `@${name}`;\n\n  if (source === 'terms') {\n    return [name, path[Math.min(path.length - 1, 1)]];\n  }\n\n  return name;\n};\n\ninternals.sub = function (paths, skipped) {\n  for (const path of paths) {\n    for (const skip of skipped) {\n      if (DeepEqual(path.slice(0, skip.length), skip)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\ninternals.debug = function (state, event) {\n  if (state.mainstay.debug) {\n    event.path = state.debug ? [...state.path, state.debug] : state.path;\n    state.mainstay.debug.push(event);\n  }\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/lib/trace.js?");

/***/ }),

/***/ "./node_modules/joi/lib/types/alternatives.js":
/*!****************************************************!*\
  !*** ./node_modules/joi/lib/types/alternatives.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"./node_modules/@hapi/hoek/lib/assert.js\");\n\nconst Merge = __webpack_require__(/*! @hapi/hoek/lib/merge */ \"./node_modules/@hapi/hoek/lib/merge.js\");\n\nconst Any = __webpack_require__(/*! ./any */ \"./node_modules/joi/lib/types/any.js\");\n\nconst Common = __webpack_require__(/*! ../common */ \"./node_modules/joi/lib/common.js\");\n\nconst Compile = __webpack_require__(/*! ../compile */ \"./node_modules/joi/lib/compile.js\");\n\nconst Errors = __webpack_require__(/*! ../errors */ \"./node_modules/joi/lib/errors.js\");\n\nconst Ref = __webpack_require__(/*! ../ref */ \"./node_modules/joi/lib/ref.js\");\n\nconst internals = {};\nmodule.exports = Any.extend({\n  type: 'alternatives',\n  flags: {\n    match: {\n      default: 'any'\n    } // 'any', 'one', 'all'\n\n  },\n  terms: {\n    matches: {\n      init: [],\n      register: Ref.toSibling\n    }\n  },\n\n  args(schema, ...schemas) {\n    if (schemas.length === 1) {\n      if (Array.isArray(schemas[0])) {\n        return schema.try(...schemas[0]);\n      }\n    }\n\n    return schema.try(...schemas);\n  },\n\n  validate(value, helpers) {\n    const {\n      schema,\n      error,\n      state,\n      prefs\n    } = helpers; // Match all or one\n\n    if (schema._flags.match) {\n      const matched = [];\n\n      for (let i = 0; i < schema.$_terms.matches.length; ++i) {\n        const item = schema.$_terms.matches[i];\n        const localState = state.nest(item.schema, `match.${i}`);\n        localState.snapshot();\n        const result = item.schema.$_validate(value, localState, prefs);\n\n        if (!result.errors) {\n          matched.push(result.value);\n        } else {\n          localState.restore();\n        }\n      }\n\n      if (matched.length === 0) {\n        return {\n          errors: error('alternatives.any')\n        };\n      }\n\n      if (schema._flags.match === 'one') {\n        return matched.length === 1 ? {\n          value: matched[0]\n        } : {\n          errors: error('alternatives.one')\n        };\n      }\n\n      if (matched.length !== schema.$_terms.matches.length) {\n        return {\n          errors: error('alternatives.all')\n        };\n      }\n\n      const allobj = schema.$_terms.matches.reduce((acc, v) => acc && v.schema.type === 'object', true);\n      return allobj ? {\n        value: matched.reduce((acc, v) => Merge(acc, v, {\n          mergeArrays: false\n        }))\n      } : {\n        value: matched[matched.length - 1]\n      };\n    } // Match any\n\n\n    const errors = [];\n\n    for (let i = 0; i < schema.$_terms.matches.length; ++i) {\n      const item = schema.$_terms.matches[i]; // Try\n\n      if (item.schema) {\n        const localState = state.nest(item.schema, `match.${i}`);\n        localState.snapshot();\n        const result = item.schema.$_validate(value, localState, prefs);\n\n        if (!result.errors) {\n          return result;\n        }\n\n        localState.restore();\n        errors.push({\n          schema: item.schema,\n          reports: result.errors\n        });\n        continue;\n      } // Conditional\n\n\n      const input = item.ref ? item.ref.resolve(value, state, prefs) : value;\n      const tests = item.is ? [item] : item.switch;\n\n      for (let j = 0; j < tests.length; ++j) {\n        const test = tests[j];\n        const {\n          is,\n          then,\n          otherwise\n        } = test;\n        const id = `match.${i}${item.switch ? '.' + j : ''}`;\n\n        if (!is.$_match(input, state.nest(is, `${id}.is`), prefs)) {\n          if (otherwise) {\n            return otherwise.$_validate(value, state.nest(otherwise, `${id}.otherwise`), prefs);\n          }\n        } else if (then) {\n          return then.$_validate(value, state.nest(then, `${id}.then`), prefs);\n        }\n      }\n    }\n\n    return internals.errors(errors, helpers);\n  },\n\n  rules: {\n    conditional: {\n      method(condition, options) {\n        Assert(!this._flags._endedSwitch, 'Unreachable condition');\n        Assert(!this._flags.match, 'Cannot combine match mode', this._flags.match, 'with conditional rule');\n        Assert(options.break === undefined, 'Cannot use break option with alternatives conditional');\n        const obj = this.clone();\n        const match = Compile.when(obj, condition, options);\n        const conditions = match.is ? [match] : match.switch;\n\n        for (const item of conditions) {\n          if (item.then && item.otherwise) {\n            obj.$_setFlag('_endedSwitch', true, {\n              clone: false\n            });\n            break;\n          }\n        }\n\n        obj.$_terms.matches.push(match);\n        return obj.$_mutateRebuild();\n      }\n\n    },\n    match: {\n      method(mode) {\n        Assert(['any', 'one', 'all'].includes(mode), 'Invalid alternatives match mode', mode);\n\n        if (mode !== 'any') {\n          for (const match of this.$_terms.matches) {\n            Assert(match.schema, 'Cannot combine match mode', mode, 'with conditional rules');\n          }\n        }\n\n        return this.$_setFlag('match', mode);\n      }\n\n    },\n    try: {\n      method(...schemas) {\n        Assert(schemas.length, 'Missing alternative schemas');\n        Common.verifyFlat(schemas, 'try');\n        Assert(!this._flags._endedSwitch, 'Unreachable condition');\n        const obj = this.clone();\n\n        for (const schema of schemas) {\n          obj.$_terms.matches.push({\n            schema: obj.$_compile(schema)\n          });\n        }\n\n        return obj.$_mutateRebuild();\n      }\n\n    }\n  },\n  overrides: {\n    label(name) {\n      const obj = this.$_parent('label', name);\n\n      const each = (item, source) => source.path[0] !== 'is' ? item.label(name) : undefined;\n\n      return obj.$_modify({\n        each,\n        ref: false\n      });\n    }\n\n  },\n\n  rebuild(schema) {\n    // Flag when an alternative type is an array\n    const each = item => {\n      if (Common.isSchema(item) && item.type === 'array') {\n        schema.$_setFlag('_arrayItems', true, {\n          clone: false\n        });\n      }\n    };\n\n    schema.$_modify({\n      each\n    });\n  },\n\n  manifest: {\n    build(obj, desc) {\n      if (desc.matches) {\n        for (const match of desc.matches) {\n          const {\n            schema,\n            ref,\n            is,\n            not,\n            then,\n            otherwise\n          } = match;\n\n          if (schema) {\n            obj = obj.try(schema);\n          } else if (ref) {\n            obj = obj.conditional(ref, {\n              is,\n              then,\n              not,\n              otherwise,\n              switch: match.switch\n            });\n          } else {\n            obj = obj.conditional(is, {\n              then,\n              otherwise\n            });\n          }\n        }\n      }\n\n      return obj;\n    }\n\n  },\n  messages: {\n    'alternatives.all': '{{#label}} does not match all of the required types',\n    'alternatives.any': '{{#label}} does not match any of the allowed types',\n    'alternatives.match': '{{#label}} does not match any of the allowed types',\n    'alternatives.one': '{{#label}} matches more than one allowed type',\n    'alternatives.types': '{{#label}} must be one of {{#types}}'\n  }\n}); // Helpers\n\ninternals.errors = function (failures, {\n  error,\n  state\n}) {\n  // Nothing matched due to type criteria rules\n  if (!failures.length) {\n    return {\n      errors: error('alternatives.any')\n    };\n  } // Single error\n\n\n  if (failures.length === 1) {\n    return {\n      errors: failures[0].reports\n    };\n  } // Analyze reasons\n\n\n  const valids = new Set();\n  const complex = [];\n\n  for (const {\n    reports,\n    schema\n  } of failures) {\n    // Multiple errors (!abortEarly)\n    if (reports.length > 1) {\n      return internals.unmatched(failures, error);\n    } // Custom error\n\n\n    const report = reports[0];\n\n    if (report instanceof Errors.Report === false) {\n      return internals.unmatched(failures, error);\n    } // Internal object or array error\n\n\n    if (report.state.path.length !== state.path.length) {\n      complex.push({\n        type: schema.type,\n        report\n      });\n      continue;\n    } // Valids\n\n\n    if (report.code === 'any.only') {\n      for (const valid of report.local.valids) {\n        valids.add(valid);\n      }\n\n      continue;\n    } // Base type\n\n\n    const [type, code] = report.code.split('.');\n\n    if (code !== 'base') {\n      complex.push({\n        type: schema.type,\n        report\n      });\n      continue;\n    }\n\n    valids.add(type);\n  } // All errors are base types or valids\n\n\n  if (!complex.length) {\n    return {\n      errors: error('alternatives.types', {\n        types: [...valids]\n      })\n    };\n  } // Single complex error\n\n\n  if (complex.length === 1) {\n    return {\n      errors: complex[0].report\n    };\n  }\n\n  return internals.unmatched(failures, error);\n};\n\ninternals.unmatched = function (failures, error) {\n  const errors = [];\n\n  for (const failure of failures) {\n    errors.push(...failure.reports);\n  }\n\n  return {\n    errors: error('alternatives.match', Errors.details(errors, {\n      override: false\n    }))\n  };\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/lib/types/alternatives.js?");

/***/ }),

/***/ "./node_modules/joi/lib/types/any.js":
/*!*******************************************!*\
  !*** ./node_modules/joi/lib/types/any.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"./node_modules/@hapi/hoek/lib/assert.js\");\n\nconst Base = __webpack_require__(/*! ../base */ \"./node_modules/joi/lib/base.js\");\n\nconst Common = __webpack_require__(/*! ../common */ \"./node_modules/joi/lib/common.js\");\n\nconst Messages = __webpack_require__(/*! ../messages */ \"./node_modules/joi/lib/messages.js\");\n\nconst internals = {};\nmodule.exports = Base.extend({\n  type: 'any',\n  flags: {\n    only: {\n      default: false\n    }\n  },\n  terms: {\n    alterations: {\n      init: null\n    },\n    examples: {\n      init: null\n    },\n    externals: {\n      init: null\n    },\n    metas: {\n      init: []\n    },\n    notes: {\n      init: []\n    },\n    shared: {\n      init: null\n    },\n    tags: {\n      init: []\n    },\n    whens: {\n      init: null\n    }\n  },\n  rules: {\n    custom: {\n      method(method, description) {\n        Assert(typeof method === 'function', 'Method must be a function');\n        Assert(description === undefined || description && typeof description === 'string', 'Description must be a non-empty string');\n        return this.$_addRule({\n          name: 'custom',\n          args: {\n            method,\n            description\n          }\n        });\n      },\n\n      validate(value, helpers, {\n        method\n      }) {\n        try {\n          return method(value, helpers);\n        } catch (err) {\n          return helpers.error('any.custom', {\n            error: err\n          });\n        }\n      },\n\n      args: ['method', 'description'],\n      multi: true\n    },\n    messages: {\n      method(messages) {\n        return this.prefs({\n          messages\n        });\n      }\n\n    },\n    shared: {\n      method(schema) {\n        Assert(Common.isSchema(schema) && schema._flags.id, 'Schema must be a schema with an id');\n        const obj = this.clone();\n        obj.$_terms.shared = obj.$_terms.shared || [];\n        obj.$_terms.shared.push(schema);\n        obj.$_mutateRegister(schema);\n        return obj;\n      }\n\n    },\n    warning: {\n      method(code, local) {\n        Assert(code && typeof code === 'string', 'Invalid warning code');\n        return this.$_addRule({\n          name: 'warning',\n          args: {\n            code,\n            local\n          },\n          warn: true\n        });\n      },\n\n      validate(value, helpers, {\n        code,\n        local\n      }) {\n        return helpers.error(code, local);\n      },\n\n      args: ['code', 'local'],\n      multi: true\n    }\n  },\n  modifiers: {\n    keep(rule, enabled = true) {\n      rule.keep = enabled;\n    },\n\n    message(rule, message) {\n      rule.message = Messages.compile(message);\n    },\n\n    warn(rule, enabled = true) {\n      rule.warn = enabled;\n    }\n\n  },\n  manifest: {\n    build(obj, desc) {\n      for (const key in desc) {\n        const values = desc[key];\n\n        if (['examples', 'externals', 'metas', 'notes', 'tags'].includes(key)) {\n          for (const value of values) {\n            obj = obj[key.slice(0, -1)](value);\n          }\n\n          continue;\n        }\n\n        if (key === 'alterations') {\n          const alter = {};\n\n          for (const {\n            target,\n            adjuster\n          } of values) {\n            alter[target] = adjuster;\n          }\n\n          obj = obj.alter(alter);\n          continue;\n        }\n\n        if (key === 'whens') {\n          for (const value of values) {\n            const {\n              ref,\n              is,\n              not,\n              then,\n              otherwise,\n              concat\n            } = value;\n\n            if (concat) {\n              obj = obj.concat(concat);\n            } else if (ref) {\n              obj = obj.when(ref, {\n                is,\n                not,\n                then,\n                otherwise,\n                switch: value.switch,\n                break: value.break\n              });\n            } else {\n              obj = obj.when(is, {\n                then,\n                otherwise,\n                break: value.break\n              });\n            }\n          }\n\n          continue;\n        }\n\n        if (key === 'shared') {\n          for (const value of values) {\n            obj = obj.shared(value);\n          }\n        }\n      }\n\n      return obj;\n    }\n\n  },\n  messages: {\n    'any.custom': '{{#label}} failed custom validation because {{#error.message}}',\n    'any.default': '{{#label}} threw an error when running default method',\n    'any.failover': '{{#label}} threw an error when running failover method',\n    'any.invalid': '{{#label}} contains an invalid value',\n    'any.only': '{{#label}} must be {if(#valids.length == 1, \"\", \"one of \")}{{#valids}}',\n    'any.ref': '{{#label}} {{#arg}} references {{:#ref}} which {{#reason}}',\n    'any.required': '{{#label}} is required',\n    'any.unknown': '{{#label}} is not allowed'\n  }\n});\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/lib/types/any.js?");

/***/ }),

/***/ "./node_modules/joi/lib/types/array.js":
/*!*********************************************!*\
  !*** ./node_modules/joi/lib/types/array.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"./node_modules/@hapi/hoek/lib/assert.js\");\n\nconst DeepEqual = __webpack_require__(/*! @hapi/hoek/lib/deepEqual */ \"./node_modules/@hapi/hoek/lib/deepEqual.js\");\n\nconst Reach = __webpack_require__(/*! @hapi/hoek/lib/reach */ \"./node_modules/@hapi/hoek/lib/reach.js\");\n\nconst Any = __webpack_require__(/*! ./any */ \"./node_modules/joi/lib/types/any.js\");\n\nconst Common = __webpack_require__(/*! ../common */ \"./node_modules/joi/lib/common.js\");\n\nconst Compile = __webpack_require__(/*! ../compile */ \"./node_modules/joi/lib/compile.js\");\n\nconst internals = {};\nmodule.exports = Any.extend({\n  type: 'array',\n  flags: {\n    single: {\n      default: false\n    },\n    sparse: {\n      default: false\n    }\n  },\n  terms: {\n    items: {\n      init: [],\n      manifest: 'schema'\n    },\n    ordered: {\n      init: [],\n      manifest: 'schema'\n    },\n    _exclusions: {\n      init: []\n    },\n    _inclusions: {\n      init: []\n    },\n    _requireds: {\n      init: []\n    }\n  },\n  coerce: {\n    from: 'object',\n\n    method(value, {\n      schema,\n      state,\n      prefs\n    }) {\n      if (!Array.isArray(value)) {\n        return;\n      }\n\n      const sort = schema.$_getRule('sort');\n\n      if (!sort) {\n        return;\n      }\n\n      return internals.sort(schema, value, sort.args.options, state, prefs);\n    }\n\n  },\n\n  validate(value, {\n    schema,\n    error\n  }) {\n    if (!Array.isArray(value)) {\n      if (schema._flags.single) {\n        const single = [value];\n        single[Common.symbols.arraySingle] = true;\n        return {\n          value: single\n        };\n      }\n\n      return {\n        errors: error('array.base')\n      };\n    }\n\n    if (!schema.$_getRule('items') && !schema.$_terms.externals) {\n      return;\n    }\n\n    return {\n      value: value.slice()\n    }; // Clone the array so that we don't modify the original\n  },\n\n  rules: {\n    has: {\n      method(schema) {\n        schema = this.$_compile(schema, {\n          appendPath: true\n        });\n        const obj = this.$_addRule({\n          name: 'has',\n          args: {\n            schema\n          }\n        });\n        obj.$_mutateRegister(schema);\n        return obj;\n      },\n\n      validate(value, {\n        state,\n        prefs,\n        error\n      }, {\n        schema: has\n      }) {\n        const ancestors = [value, ...state.ancestors];\n\n        for (let i = 0; i < value.length; ++i) {\n          const localState = state.localize([...state.path, i], ancestors, has);\n\n          if (has.$_match(value[i], localState, prefs)) {\n            return value;\n          }\n        }\n\n        const patternLabel = has._flags.label;\n\n        if (patternLabel) {\n          return error('array.hasKnown', {\n            patternLabel\n          });\n        }\n\n        return error('array.hasUnknown', null);\n      },\n\n      multi: true\n    },\n    items: {\n      method(...schemas) {\n        Common.verifyFlat(schemas, 'items');\n        const obj = this.$_addRule('items');\n\n        for (let i = 0; i < schemas.length; ++i) {\n          const type = Common.tryWithPath(() => this.$_compile(schemas[i]), i, {\n            append: true\n          });\n          obj.$_terms.items.push(type);\n        }\n\n        return obj.$_mutateRebuild();\n      },\n\n      validate(value, {\n        schema,\n        error,\n        state,\n        prefs,\n        errorsArray\n      }) {\n        const requireds = schema.$_terms._requireds.slice();\n\n        const ordereds = schema.$_terms.ordered.slice();\n        const inclusions = [...schema.$_terms._inclusions, ...requireds];\n        const wasArray = !value[Common.symbols.arraySingle];\n        delete value[Common.symbols.arraySingle];\n        const errors = errorsArray();\n        let il = value.length;\n\n        for (let i = 0; i < il; ++i) {\n          const item = value[i];\n          let errored = false;\n          let isValid = false;\n          const key = wasArray ? i : new Number(i); // eslint-disable-line no-new-wrappers\n\n          const path = [...state.path, key]; // Sparse\n\n          if (!schema._flags.sparse && item === undefined) {\n            errors.push(error('array.sparse', {\n              key,\n              path,\n              pos: i,\n              value: undefined\n            }, state.localize(path)));\n\n            if (prefs.abortEarly) {\n              return errors;\n            }\n\n            ordereds.shift();\n            continue;\n          } // Exclusions\n\n\n          const ancestors = [value, ...state.ancestors];\n\n          for (const exclusion of schema.$_terms._exclusions) {\n            if (!exclusion.$_match(item, state.localize(path, ancestors, exclusion), prefs, {\n              presence: 'ignore'\n            })) {\n              continue;\n            }\n\n            errors.push(error('array.excludes', {\n              pos: i,\n              value: item\n            }, state.localize(path)));\n\n            if (prefs.abortEarly) {\n              return errors;\n            }\n\n            errored = true;\n            ordereds.shift();\n            break;\n          }\n\n          if (errored) {\n            continue;\n          } // Ordered\n\n\n          if (schema.$_terms.ordered.length) {\n            if (ordereds.length) {\n              const ordered = ordereds.shift();\n              const res = ordered.$_validate(item, state.localize(path, ancestors, ordered), prefs);\n\n              if (!res.errors) {\n                if (ordered._flags.result === 'strip') {\n                  internals.fastSplice(value, i);\n                  --i;\n                  --il;\n                } else if (!schema._flags.sparse && res.value === undefined) {\n                  errors.push(error('array.sparse', {\n                    key,\n                    path,\n                    pos: i,\n                    value: undefined\n                  }, state.localize(path)));\n\n                  if (prefs.abortEarly) {\n                    return errors;\n                  }\n\n                  continue;\n                } else {\n                  value[i] = res.value;\n                }\n              } else {\n                errors.push(...res.errors);\n\n                if (prefs.abortEarly) {\n                  return errors;\n                }\n              }\n\n              continue;\n            } else if (!schema.$_terms.items.length) {\n              errors.push(error('array.orderedLength', {\n                pos: i,\n                limit: schema.$_terms.ordered.length\n              }));\n\n              if (prefs.abortEarly) {\n                return errors;\n              }\n\n              break; // No reason to continue since there are no other rules to validate other than array.orderedLength\n            }\n          } // Requireds\n\n\n          const requiredChecks = [];\n          let jl = requireds.length;\n\n          for (let j = 0; j < jl; ++j) {\n            const localState = state.localize(path, ancestors, requireds[j]);\n            localState.snapshot();\n            const res = requireds[j].$_validate(item, localState, prefs);\n            requiredChecks[j] = res;\n\n            if (!res.errors) {\n              value[i] = res.value;\n              isValid = true;\n              internals.fastSplice(requireds, j);\n              --j;\n              --jl;\n\n              if (!schema._flags.sparse && res.value === undefined) {\n                errors.push(error('array.sparse', {\n                  key,\n                  path,\n                  pos: i,\n                  value: undefined\n                }, state.localize(path)));\n\n                if (prefs.abortEarly) {\n                  return errors;\n                }\n              }\n\n              break;\n            }\n\n            localState.restore();\n          }\n\n          if (isValid) {\n            continue;\n          } // Inclusions\n\n\n          const stripUnknown = prefs.stripUnknown && !!prefs.stripUnknown.arrays || false;\n          jl = inclusions.length;\n\n          for (const inclusion of inclusions) {\n            // Avoid re-running requireds that already didn't match in the previous loop\n            let res;\n            const previousCheck = requireds.indexOf(inclusion);\n\n            if (previousCheck !== -1) {\n              res = requiredChecks[previousCheck];\n            } else {\n              const localState = state.localize(path, ancestors, inclusion);\n              localState.snapshot();\n              res = inclusion.$_validate(item, localState, prefs);\n\n              if (!res.errors) {\n                if (inclusion._flags.result === 'strip') {\n                  internals.fastSplice(value, i);\n                  --i;\n                  --il;\n                } else if (!schema._flags.sparse && res.value === undefined) {\n                  errors.push(error('array.sparse', {\n                    key,\n                    path,\n                    pos: i,\n                    value: undefined\n                  }, state.localize(path)));\n                  errored = true;\n                } else {\n                  value[i] = res.value;\n                }\n\n                isValid = true;\n                break;\n              }\n\n              localState.restore();\n            } // Return the actual error if only one inclusion defined\n\n\n            if (jl === 1) {\n              if (stripUnknown) {\n                internals.fastSplice(value, i);\n                --i;\n                --il;\n                isValid = true;\n                break;\n              }\n\n              errors.push(...res.errors);\n\n              if (prefs.abortEarly) {\n                return errors;\n              }\n\n              errored = true;\n              break;\n            }\n          }\n\n          if (errored) {\n            continue;\n          }\n\n          if ((schema.$_terms._inclusions.length || schema.$_terms._requireds.length) && !isValid) {\n            if (stripUnknown) {\n              internals.fastSplice(value, i);\n              --i;\n              --il;\n              continue;\n            }\n\n            errors.push(error('array.includes', {\n              pos: i,\n              value: item\n            }, state.localize(path)));\n\n            if (prefs.abortEarly) {\n              return errors;\n            }\n          }\n        }\n\n        if (requireds.length) {\n          internals.fillMissedErrors(schema, errors, requireds, value, state, prefs);\n        }\n\n        if (ordereds.length) {\n          internals.fillOrderedErrors(schema, errors, ordereds, value, state, prefs);\n\n          if (!errors.length) {\n            internals.fillDefault(ordereds, value, state, prefs);\n          }\n        }\n\n        return errors.length ? errors : value;\n      },\n\n      priority: true,\n      manifest: false\n    },\n    length: {\n      method(limit) {\n        return this.$_addRule({\n          name: 'length',\n          args: {\n            limit\n          },\n          operator: '='\n        });\n      },\n\n      validate(value, helpers, {\n        limit\n      }, {\n        name,\n        operator,\n        args\n      }) {\n        if (Common.compare(value.length, limit, operator)) {\n          return value;\n        }\n\n        return helpers.error('array.' + name, {\n          limit: args.limit,\n          value\n        });\n      },\n\n      args: [{\n        name: 'limit',\n        ref: true,\n        assert: Common.limit,\n        message: 'must be a positive integer'\n      }]\n    },\n    max: {\n      method(limit) {\n        return this.$_addRule({\n          name: 'max',\n          method: 'length',\n          args: {\n            limit\n          },\n          operator: '<='\n        });\n      }\n\n    },\n    min: {\n      method(limit) {\n        return this.$_addRule({\n          name: 'min',\n          method: 'length',\n          args: {\n            limit\n          },\n          operator: '>='\n        });\n      }\n\n    },\n    ordered: {\n      method(...schemas) {\n        Common.verifyFlat(schemas, 'ordered');\n        const obj = this.$_addRule('items');\n\n        for (let i = 0; i < schemas.length; ++i) {\n          const type = Common.tryWithPath(() => this.$_compile(schemas[i]), i, {\n            append: true\n          });\n          internals.validateSingle(type, obj);\n          obj.$_mutateRegister(type);\n          obj.$_terms.ordered.push(type);\n        }\n\n        return obj.$_mutateRebuild();\n      }\n\n    },\n    single: {\n      method(enabled) {\n        const value = enabled === undefined ? true : !!enabled;\n        Assert(!value || !this._flags._arrayItems, 'Cannot specify single rule when array has array items');\n        return this.$_setFlag('single', value);\n      }\n\n    },\n    sort: {\n      method(options = {}) {\n        Common.assertOptions(options, ['by', 'order']);\n        const settings = {\n          order: options.order || 'ascending'\n        };\n\n        if (options.by) {\n          settings.by = Compile.ref(options.by, {\n            ancestor: 0\n          });\n          Assert(!settings.by.ancestor, 'Cannot sort by ancestor');\n        }\n\n        return this.$_addRule({\n          name: 'sort',\n          args: {\n            options: settings\n          }\n        });\n      },\n\n      validate(value, {\n        error,\n        state,\n        prefs,\n        schema\n      }, {\n        options\n      }) {\n        const {\n          value: sorted,\n          errors\n        } = internals.sort(schema, value, options, state, prefs);\n\n        if (errors) {\n          return errors;\n        }\n\n        for (let i = 0; i < value.length; ++i) {\n          if (value[i] !== sorted[i]) {\n            return error('array.sort', {\n              order: options.order,\n              by: options.by ? options.by.key : 'value'\n            });\n          }\n        }\n\n        return value;\n      },\n\n      convert: true\n    },\n    sparse: {\n      method(enabled) {\n        const value = enabled === undefined ? true : !!enabled;\n\n        if (this._flags.sparse === value) {\n          return this;\n        }\n\n        const obj = value ? this.clone() : this.$_addRule('items');\n        return obj.$_setFlag('sparse', value, {\n          clone: false\n        });\n      }\n\n    },\n    unique: {\n      method(comparator, options = {}) {\n        Assert(!comparator || typeof comparator === 'function' || typeof comparator === 'string', 'comparator must be a function or a string');\n        Common.assertOptions(options, ['ignoreUndefined', 'separator']);\n        const rule = {\n          name: 'unique',\n          args: {\n            options,\n            comparator\n          }\n        };\n\n        if (comparator) {\n          if (typeof comparator === 'string') {\n            const separator = Common.default(options.separator, '.');\n            rule.path = separator ? comparator.split(separator) : [comparator];\n          } else {\n            rule.comparator = comparator;\n          }\n        }\n\n        return this.$_addRule(rule);\n      },\n\n      validate(value, {\n        state,\n        error,\n        schema\n      }, {\n        comparator: raw,\n        options\n      }, {\n        comparator,\n        path\n      }) {\n        const found = {\n          string: Object.create(null),\n          number: Object.create(null),\n          undefined: Object.create(null),\n          boolean: Object.create(null),\n          object: new Map(),\n          function: new Map(),\n          custom: new Map()\n        };\n        const compare = comparator || DeepEqual;\n        const ignoreUndefined = options.ignoreUndefined;\n\n        for (let i = 0; i < value.length; ++i) {\n          const item = path ? Reach(value[i], path) : value[i];\n          const records = comparator ? found.custom : found[typeof item];\n          Assert(records, 'Failed to find unique map container for type', typeof item);\n\n          if (records instanceof Map) {\n            const entries = records.entries();\n            let current;\n\n            while (!(current = entries.next()).done) {\n              if (compare(current.value[0], item)) {\n                const localState = state.localize([...state.path, i], [value, ...state.ancestors]);\n                const context = {\n                  pos: i,\n                  value: value[i],\n                  dupePos: current.value[1],\n                  dupeValue: value[current.value[1]]\n                };\n\n                if (path) {\n                  context.path = raw;\n                }\n\n                return error('array.unique', context, localState);\n              }\n            }\n\n            records.set(item, i);\n          } else {\n            if ((!ignoreUndefined || item !== undefined) && records[item] !== undefined) {\n              const context = {\n                pos: i,\n                value: value[i],\n                dupePos: records[item],\n                dupeValue: value[records[item]]\n              };\n\n              if (path) {\n                context.path = raw;\n              }\n\n              const localState = state.localize([...state.path, i], [value, ...state.ancestors]);\n              return error('array.unique', context, localState);\n            }\n\n            records[item] = i;\n          }\n        }\n\n        return value;\n      },\n\n      args: ['comparator', 'options'],\n      multi: true\n    }\n  },\n  cast: {\n    set: {\n      from: Array.isArray,\n\n      to(value, helpers) {\n        return new Set(value);\n      }\n\n    }\n  },\n\n  rebuild(schema) {\n    schema.$_terms._inclusions = [];\n    schema.$_terms._exclusions = [];\n    schema.$_terms._requireds = [];\n\n    for (const type of schema.$_terms.items) {\n      internals.validateSingle(type, schema);\n\n      if (type._flags.presence === 'required') {\n        schema.$_terms._requireds.push(type);\n      } else if (type._flags.presence === 'forbidden') {\n        schema.$_terms._exclusions.push(type);\n      } else {\n        schema.$_terms._inclusions.push(type);\n      }\n    }\n\n    for (const type of schema.$_terms.ordered) {\n      internals.validateSingle(type, schema);\n    }\n  },\n\n  manifest: {\n    build(obj, desc) {\n      if (desc.items) {\n        obj = obj.items(...desc.items);\n      }\n\n      if (desc.ordered) {\n        obj = obj.ordered(...desc.ordered);\n      }\n\n      return obj;\n    }\n\n  },\n  messages: {\n    'array.base': '{{#label}} must be an array',\n    'array.excludes': '{{#label}} contains an excluded value',\n    'array.hasKnown': '{{#label}} does not contain at least one required match for type {:#patternLabel}',\n    'array.hasUnknown': '{{#label}} does not contain at least one required match',\n    'array.includes': '{{#label}} does not match any of the allowed types',\n    'array.includesRequiredBoth': '{{#label}} does not contain {{#knownMisses}} and {{#unknownMisses}} other required value(s)',\n    'array.includesRequiredKnowns': '{{#label}} does not contain {{#knownMisses}}',\n    'array.includesRequiredUnknowns': '{{#label}} does not contain {{#unknownMisses}} required value(s)',\n    'array.length': '{{#label}} must contain {{#limit}} items',\n    'array.max': '{{#label}} must contain less than or equal to {{#limit}} items',\n    'array.min': '{{#label}} must contain at least {{#limit}} items',\n    'array.orderedLength': '{{#label}} must contain at most {{#limit}} items',\n    'array.sort': '{{#label}} must be sorted in {#order} order by {{#by}}',\n    'array.sort.mismatching': '{{#label}} cannot be sorted due to mismatching types',\n    'array.sort.unsupported': '{{#label}} cannot be sorted due to unsupported type {#type}',\n    'array.sparse': '{{#label}} must not be a sparse array item',\n    'array.unique': '{{#label}} contains a duplicate value'\n  }\n}); // Helpers\n\ninternals.fillMissedErrors = function (schema, errors, requireds, value, state, prefs) {\n  const knownMisses = [];\n  let unknownMisses = 0;\n\n  for (const required of requireds) {\n    const label = required._flags.label;\n\n    if (label) {\n      knownMisses.push(label);\n    } else {\n      ++unknownMisses;\n    }\n  }\n\n  if (knownMisses.length) {\n    if (unknownMisses) {\n      errors.push(schema.$_createError('array.includesRequiredBoth', value, {\n        knownMisses,\n        unknownMisses\n      }, state, prefs));\n    } else {\n      errors.push(schema.$_createError('array.includesRequiredKnowns', value, {\n        knownMisses\n      }, state, prefs));\n    }\n  } else {\n    errors.push(schema.$_createError('array.includesRequiredUnknowns', value, {\n      unknownMisses\n    }, state, prefs));\n  }\n};\n\ninternals.fillOrderedErrors = function (schema, errors, ordereds, value, state, prefs) {\n  const requiredOrdereds = [];\n\n  for (const ordered of ordereds) {\n    if (ordered._flags.presence === 'required') {\n      requiredOrdereds.push(ordered);\n    }\n  }\n\n  if (requiredOrdereds.length) {\n    internals.fillMissedErrors(schema, errors, requiredOrdereds, value, state, prefs);\n  }\n};\n\ninternals.fillDefault = function (ordereds, value, state, prefs) {\n  const overrides = [];\n  let trailingUndefined = true;\n\n  for (let i = ordereds.length - 1; i >= 0; --i) {\n    const ordered = ordereds[i];\n    const ancestors = [value, ...state.ancestors];\n    const override = ordered.$_validate(undefined, state.localize(state.path, ancestors, ordered), prefs).value;\n\n    if (trailingUndefined) {\n      if (override === undefined) {\n        continue;\n      }\n\n      trailingUndefined = false;\n    }\n\n    overrides.unshift(override);\n  }\n\n  if (overrides.length) {\n    value.push(...overrides);\n  }\n};\n\ninternals.fastSplice = function (arr, i) {\n  let pos = i;\n\n  while (pos < arr.length) {\n    arr[pos++] = arr[pos];\n  }\n\n  --arr.length;\n};\n\ninternals.validateSingle = function (type, obj) {\n  if (type.type === 'array' || type._flags._arrayItems) {\n    Assert(!obj._flags.single, 'Cannot specify array item with single rule enabled');\n    obj.$_setFlag('_arrayItems', true, {\n      clone: false\n    });\n  }\n};\n\ninternals.sort = function (schema, value, settings, state, prefs) {\n  const order = settings.order === 'ascending' ? 1 : -1;\n  const aFirst = -1 * order;\n  const bFirst = order;\n\n  const sort = (a, b) => {\n    let compare = internals.compare(a, b, aFirst, bFirst);\n\n    if (compare !== null) {\n      return compare;\n    }\n\n    if (settings.by) {\n      a = settings.by.resolve(a, state, prefs);\n      b = settings.by.resolve(b, state, prefs);\n    }\n\n    compare = internals.compare(a, b, aFirst, bFirst);\n\n    if (compare !== null) {\n      return compare;\n    }\n\n    const type = typeof a;\n\n    if (type !== typeof b) {\n      throw schema.$_createError('array.sort.mismatching', value, null, state, prefs);\n    }\n\n    if (type !== 'number' && type !== 'string') {\n      throw schema.$_createError('array.sort.unsupported', value, {\n        type\n      }, state, prefs);\n    }\n\n    if (type === 'number') {\n      return (a - b) * order;\n    }\n\n    return a < b ? aFirst : bFirst;\n  };\n\n  try {\n    return {\n      value: value.slice().sort(sort)\n    };\n  } catch (err) {\n    return {\n      errors: err\n    };\n  }\n};\n\ninternals.compare = function (a, b, aFirst, bFirst) {\n  if (a === b) {\n    return 0;\n  }\n\n  if (a === undefined) {\n    return 1; // Always last regardless of sort order\n  }\n\n  if (b === undefined) {\n    return -1; // Always last regardless of sort order\n  }\n\n  if (a === null) {\n    return bFirst;\n  }\n\n  if (b === null) {\n    return aFirst;\n  }\n\n  return null;\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/lib/types/array.js?");

/***/ }),

/***/ "./node_modules/joi/lib/types/binary.js":
/*!**********************************************!*\
  !*** ./node_modules/joi/lib/types/binary.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"./node_modules/@hapi/hoek/lib/assert.js\");\n\nconst Any = __webpack_require__(/*! ./any */ \"./node_modules/joi/lib/types/any.js\");\n\nconst Common = __webpack_require__(/*! ../common */ \"./node_modules/joi/lib/common.js\");\n\nconst internals = {};\nmodule.exports = Any.extend({\n  type: 'binary',\n  coerce: {\n    from: 'string',\n\n    method(value, {\n      schema\n    }) {\n      try {\n        return {\n          value: Buffer.from(value, schema._flags.encoding)\n        };\n      } catch (ignoreErr) {}\n    }\n\n  },\n\n  validate(value, {\n    error\n  }) {\n    if (!Buffer.isBuffer(value)) {\n      return {\n        value,\n        errors: error('binary.base')\n      };\n    }\n  },\n\n  rules: {\n    encoding: {\n      method(encoding) {\n        Assert(Buffer.isEncoding(encoding), 'Invalid encoding:', encoding);\n        return this.$_setFlag('encoding', encoding);\n      }\n\n    },\n    length: {\n      method(limit) {\n        return this.$_addRule({\n          name: 'length',\n          method: 'length',\n          args: {\n            limit\n          },\n          operator: '='\n        });\n      },\n\n      validate(value, helpers, {\n        limit\n      }, {\n        name,\n        operator,\n        args\n      }) {\n        if (Common.compare(value.length, limit, operator)) {\n          return value;\n        }\n\n        return helpers.error('binary.' + name, {\n          limit: args.limit,\n          value\n        });\n      },\n\n      args: [{\n        name: 'limit',\n        ref: true,\n        assert: Common.limit,\n        message: 'must be a positive integer'\n      }]\n    },\n    max: {\n      method(limit) {\n        return this.$_addRule({\n          name: 'max',\n          method: 'length',\n          args: {\n            limit\n          },\n          operator: '<='\n        });\n      }\n\n    },\n    min: {\n      method(limit) {\n        return this.$_addRule({\n          name: 'min',\n          method: 'length',\n          args: {\n            limit\n          },\n          operator: '>='\n        });\n      }\n\n    }\n  },\n  cast: {\n    string: {\n      from: value => Buffer.isBuffer(value),\n\n      to(value, helpers) {\n        return value.toString();\n      }\n\n    }\n  },\n  messages: {\n    'binary.base': '{{#label}} must be a buffer or a string',\n    'binary.length': '{{#label}} must be {{#limit}} bytes',\n    'binary.max': '{{#label}} must be less than or equal to {{#limit}} bytes',\n    'binary.min': '{{#label}} must be at least {{#limit}} bytes'\n  }\n});\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/lib/types/binary.js?");

/***/ }),

/***/ "./node_modules/joi/lib/types/boolean.js":
/*!***********************************************!*\
  !*** ./node_modules/joi/lib/types/boolean.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"./node_modules/@hapi/hoek/lib/assert.js\");\n\nconst Any = __webpack_require__(/*! ./any */ \"./node_modules/joi/lib/types/any.js\");\n\nconst Common = __webpack_require__(/*! ../common */ \"./node_modules/joi/lib/common.js\");\n\nconst Values = __webpack_require__(/*! ../values */ \"./node_modules/joi/lib/values.js\");\n\nconst internals = {};\n\ninternals.isBool = function (value) {\n  return typeof value === 'boolean';\n};\n\nmodule.exports = Any.extend({\n  type: 'boolean',\n  flags: {\n    sensitive: {\n      default: false\n    }\n  },\n  terms: {\n    falsy: {\n      init: null,\n      manifest: 'values'\n    },\n    truthy: {\n      init: null,\n      manifest: 'values'\n    }\n  },\n\n  coerce(value, {\n    schema\n  }) {\n    if (typeof value === 'boolean') {\n      return;\n    }\n\n    if (typeof value === 'string') {\n      const normalized = schema._flags.sensitive ? value : value.toLowerCase();\n      value = normalized === 'true' ? true : normalized === 'false' ? false : value;\n    }\n\n    if (typeof value !== 'boolean') {\n      value = schema.$_terms.truthy && schema.$_terms.truthy.has(value, null, null, !schema._flags.sensitive) || (schema.$_terms.falsy && schema.$_terms.falsy.has(value, null, null, !schema._flags.sensitive) ? false : value);\n    }\n\n    return {\n      value\n    };\n  },\n\n  validate(value, {\n    error\n  }) {\n    if (typeof value !== 'boolean') {\n      return {\n        value,\n        errors: error('boolean.base')\n      };\n    }\n  },\n\n  rules: {\n    truthy: {\n      method(...values) {\n        Common.verifyFlat(values, 'truthy');\n        const obj = this.clone();\n        obj.$_terms.truthy = obj.$_terms.truthy || new Values();\n\n        for (let i = 0; i < values.length; ++i) {\n          const value = values[i];\n          Assert(value !== undefined, 'Cannot call truthy with undefined');\n          obj.$_terms.truthy.add(value);\n        }\n\n        return obj;\n      }\n\n    },\n    falsy: {\n      method(...values) {\n        Common.verifyFlat(values, 'falsy');\n        const obj = this.clone();\n        obj.$_terms.falsy = obj.$_terms.falsy || new Values();\n\n        for (let i = 0; i < values.length; ++i) {\n          const value = values[i];\n          Assert(value !== undefined, 'Cannot call falsy with undefined');\n          obj.$_terms.falsy.add(value);\n        }\n\n        return obj;\n      }\n\n    },\n    sensitive: {\n      method(enabled = true) {\n        return this.$_setFlag('sensitive', enabled);\n      }\n\n    }\n  },\n  cast: {\n    number: {\n      from: internals.isBool,\n\n      to(value, helpers) {\n        return value ? 1 : 0;\n      }\n\n    },\n    string: {\n      from: internals.isBool,\n\n      to(value, helpers) {\n        return value ? 'true' : 'false';\n      }\n\n    }\n  },\n  manifest: {\n    build(obj, desc) {\n      if (desc.truthy) {\n        obj = obj.truthy(...desc.truthy);\n      }\n\n      if (desc.falsy) {\n        obj = obj.falsy(...desc.falsy);\n      }\n\n      return obj;\n    }\n\n  },\n  messages: {\n    'boolean.base': '{{#label}} must be a boolean'\n  }\n});\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/lib/types/boolean.js?");

/***/ }),

/***/ "./node_modules/joi/lib/types/date.js":
/*!********************************************!*\
  !*** ./node_modules/joi/lib/types/date.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"./node_modules/@hapi/hoek/lib/assert.js\");\n\nconst Any = __webpack_require__(/*! ./any */ \"./node_modules/joi/lib/types/any.js\");\n\nconst Common = __webpack_require__(/*! ../common */ \"./node_modules/joi/lib/common.js\");\n\nconst Template = __webpack_require__(/*! ../template */ \"./node_modules/joi/lib/template.js\");\n\nconst internals = {};\n\ninternals.isDate = function (value) {\n  return value instanceof Date;\n};\n\nmodule.exports = Any.extend({\n  type: 'date',\n  coerce: {\n    from: ['number', 'string'],\n\n    method(value, {\n      schema\n    }) {\n      return {\n        value: internals.parse(value, schema._flags.format) || value\n      };\n    }\n\n  },\n\n  validate(value, {\n    schema,\n    error,\n    prefs\n  }) {\n    if (value instanceof Date && !isNaN(value.getTime())) {\n      return;\n    }\n\n    const format = schema._flags.format;\n\n    if (!prefs.convert || !format || typeof value !== 'string') {\n      return {\n        value,\n        errors: error('date.base')\n      };\n    }\n\n    return {\n      value,\n      errors: error('date.format', {\n        format\n      })\n    };\n  },\n\n  rules: {\n    compare: {\n      method: false,\n\n      validate(value, helpers, {\n        date\n      }, {\n        name,\n        operator,\n        args\n      }) {\n        const to = date === 'now' ? Date.now() : date.getTime();\n\n        if (Common.compare(value.getTime(), to, operator)) {\n          return value;\n        }\n\n        return helpers.error('date.' + name, {\n          limit: args.date,\n          value\n        });\n      },\n\n      args: [{\n        name: 'date',\n        ref: true,\n        normalize: date => {\n          return date === 'now' ? date : internals.parse(date);\n        },\n        assert: date => date !== null,\n        message: 'must have a valid date format'\n      }]\n    },\n    format: {\n      method(format) {\n        Assert(['iso', 'javascript', 'unix'].includes(format), 'Unknown date format', format);\n        return this.$_setFlag('format', format);\n      }\n\n    },\n    greater: {\n      method(date) {\n        return this.$_addRule({\n          name: 'greater',\n          method: 'compare',\n          args: {\n            date\n          },\n          operator: '>'\n        });\n      }\n\n    },\n    iso: {\n      method() {\n        return this.format('iso');\n      }\n\n    },\n    less: {\n      method(date) {\n        return this.$_addRule({\n          name: 'less',\n          method: 'compare',\n          args: {\n            date\n          },\n          operator: '<'\n        });\n      }\n\n    },\n    max: {\n      method(date) {\n        return this.$_addRule({\n          name: 'max',\n          method: 'compare',\n          args: {\n            date\n          },\n          operator: '<='\n        });\n      }\n\n    },\n    min: {\n      method(date) {\n        return this.$_addRule({\n          name: 'min',\n          method: 'compare',\n          args: {\n            date\n          },\n          operator: '>='\n        });\n      }\n\n    },\n    timestamp: {\n      method(type = 'javascript') {\n        Assert(['javascript', 'unix'].includes(type), '\"type\" must be one of \"javascript, unix\"');\n        return this.format(type);\n      }\n\n    }\n  },\n  cast: {\n    number: {\n      from: internals.isDate,\n\n      to(value, helpers) {\n        return value.getTime();\n      }\n\n    },\n    string: {\n      from: internals.isDate,\n\n      to(value, {\n        prefs\n      }) {\n        return Template.date(value, prefs);\n      }\n\n    }\n  },\n  messages: {\n    'date.base': '{{#label}} must be a valid date',\n    'date.format': '{{#label}} must be in {msg(\"date.format.\" + #format) || #format} format',\n    'date.greater': '{{#label}} must be greater than {{:#limit}}',\n    'date.less': '{{#label}} must be less than {{:#limit}}',\n    'date.max': '{{#label}} must be less than or equal to {{:#limit}}',\n    'date.min': '{{#label}} must be greater than or equal to {{:#limit}}',\n    // Messages used in date.format\n    'date.format.iso': 'ISO 8601 date',\n    'date.format.javascript': 'timestamp or number of milliseconds',\n    'date.format.unix': 'timestamp or number of seconds'\n  }\n}); // Helpers\n\ninternals.parse = function (value, format) {\n  if (value instanceof Date) {\n    return value;\n  }\n\n  if (typeof value !== 'string' && (isNaN(value) || !isFinite(value))) {\n    return null;\n  }\n\n  if (/^\\s*$/.test(value)) {\n    return null;\n  } // ISO\n\n\n  if (format === 'iso') {\n    if (!Common.isIsoDate(value)) {\n      return null;\n    }\n\n    return internals.date(value.toString());\n  } // Normalize number string\n\n\n  const original = value;\n\n  if (typeof value === 'string' && /^[+-]?\\d+(\\.\\d+)?$/.test(value)) {\n    value = parseFloat(value);\n  } // Timestamp\n\n\n  if (format) {\n    if (format === 'javascript') {\n      return internals.date(1 * value); // Casting to number\n    }\n\n    if (format === 'unix') {\n      return internals.date(1000 * value);\n    }\n\n    if (typeof original === 'string') {\n      return null;\n    }\n  } // Plain\n\n\n  return internals.date(value);\n};\n\ninternals.date = function (value) {\n  const date = new Date(value);\n\n  if (!isNaN(date.getTime())) {\n    return date;\n  }\n\n  return null;\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/lib/types/date.js?");

/***/ }),

/***/ "./node_modules/joi/lib/types/function.js":
/*!************************************************!*\
  !*** ./node_modules/joi/lib/types/function.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"./node_modules/@hapi/hoek/lib/assert.js\");\n\nconst Keys = __webpack_require__(/*! ./keys */ \"./node_modules/joi/lib/types/keys.js\");\n\nconst internals = {};\nmodule.exports = Keys.extend({\n  type: 'function',\n  properties: {\n    typeof: 'function'\n  },\n  rules: {\n    arity: {\n      method(n) {\n        Assert(Number.isSafeInteger(n) && n >= 0, 'n must be a positive integer');\n        return this.$_addRule({\n          name: 'arity',\n          args: {\n            n\n          }\n        });\n      },\n\n      validate(value, helpers, {\n        n\n      }) {\n        if (value.length === n) {\n          return value;\n        }\n\n        return helpers.error('function.arity', {\n          n\n        });\n      }\n\n    },\n    class: {\n      method() {\n        return this.$_addRule('class');\n      },\n\n      validate(value, helpers) {\n        if (/^\\s*class\\s/.test(value.toString())) {\n          return value;\n        }\n\n        return helpers.error('function.class', {\n          value\n        });\n      }\n\n    },\n    minArity: {\n      method(n) {\n        Assert(Number.isSafeInteger(n) && n > 0, 'n must be a strict positive integer');\n        return this.$_addRule({\n          name: 'minArity',\n          args: {\n            n\n          }\n        });\n      },\n\n      validate(value, helpers, {\n        n\n      }) {\n        if (value.length >= n) {\n          return value;\n        }\n\n        return helpers.error('function.minArity', {\n          n\n        });\n      }\n\n    },\n    maxArity: {\n      method(n) {\n        Assert(Number.isSafeInteger(n) && n >= 0, 'n must be a positive integer');\n        return this.$_addRule({\n          name: 'maxArity',\n          args: {\n            n\n          }\n        });\n      },\n\n      validate(value, helpers, {\n        n\n      }) {\n        if (value.length <= n) {\n          return value;\n        }\n\n        return helpers.error('function.maxArity', {\n          n\n        });\n      }\n\n    }\n  },\n  messages: {\n    'function.arity': '{{#label}} must have an arity of {{#n}}',\n    'function.class': '{{#label}} must be a class',\n    'function.maxArity': '{{#label}} must have an arity lesser or equal to {{#n}}',\n    'function.minArity': '{{#label}} must have an arity greater or equal to {{#n}}'\n  }\n});\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/lib/types/function.js?");

/***/ }),

/***/ "./node_modules/joi/lib/types/keys.js":
/*!********************************************!*\
  !*** ./node_modules/joi/lib/types/keys.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst ApplyToDefaults = __webpack_require__(/*! @hapi/hoek/lib/applyToDefaults */ \"./node_modules/@hapi/hoek/lib/applyToDefaults.js\");\n\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"./node_modules/@hapi/hoek/lib/assert.js\");\n\nconst Clone = __webpack_require__(/*! @hapi/hoek/lib/clone */ \"./node_modules/@hapi/hoek/lib/clone.js\");\n\nconst Topo = __webpack_require__(/*! @hapi/topo */ \"./node_modules/@hapi/topo/lib/index.js\");\n\nconst Any = __webpack_require__(/*! ./any */ \"./node_modules/joi/lib/types/any.js\");\n\nconst Common = __webpack_require__(/*! ../common */ \"./node_modules/joi/lib/common.js\");\n\nconst Compile = __webpack_require__(/*! ../compile */ \"./node_modules/joi/lib/compile.js\");\n\nconst Errors = __webpack_require__(/*! ../errors */ \"./node_modules/joi/lib/errors.js\");\n\nconst Ref = __webpack_require__(/*! ../ref */ \"./node_modules/joi/lib/ref.js\");\n\nconst Template = __webpack_require__(/*! ../template */ \"./node_modules/joi/lib/template.js\");\n\nconst internals = {\n  renameDefaults: {\n    alias: false,\n    // Keep old value in place\n    multiple: false,\n    // Allow renaming multiple keys into the same target\n    override: false // Overrides an existing key\n\n  }\n};\nmodule.exports = Any.extend({\n  type: '_keys',\n  properties: {\n    typeof: 'object'\n  },\n  flags: {\n    unknown: {\n      default: false\n    }\n  },\n  terms: {\n    dependencies: {\n      init: null\n    },\n    keys: {\n      init: null,\n      manifest: {\n        mapped: {\n          from: 'schema',\n          to: 'key'\n        }\n      }\n    },\n    patterns: {\n      init: null\n    },\n    renames: {\n      init: null\n    }\n  },\n\n  args(schema, keys) {\n    return schema.keys(keys);\n  },\n\n  validate(value, {\n    schema,\n    error,\n    state,\n    prefs\n  }) {\n    if (!value || typeof value !== schema.$_property('typeof') || Array.isArray(value)) {\n      return {\n        value,\n        errors: error('object.base', {\n          type: schema.$_property('typeof')\n        })\n      };\n    } // Skip if there are no other rules to test\n\n\n    if (!schema.$_terms.renames && !schema.$_terms.dependencies && !schema.$_terms.keys && // null allows any keys\n    !schema.$_terms.patterns && !schema.$_terms.externals) {\n      return;\n    } // Shallow clone value\n\n\n    value = internals.clone(value, prefs);\n    const errors = []; // Rename keys\n\n    if (schema.$_terms.renames && !internals.rename(schema, value, state, prefs, errors)) {\n      return {\n        value,\n        errors\n      };\n    } // Anything allowed\n\n\n    if (!schema.$_terms.keys && // null allows any keys\n    !schema.$_terms.patterns && !schema.$_terms.dependencies) {\n      return {\n        value,\n        errors\n      };\n    } // Defined keys\n\n\n    const unprocessed = new Set(Object.keys(value));\n\n    if (schema.$_terms.keys) {\n      const ancestors = [value, ...state.ancestors];\n\n      for (const child of schema.$_terms.keys) {\n        const key = child.key;\n        const item = value[key];\n        unprocessed.delete(key);\n        const localState = state.localize([...state.path, key], ancestors, child);\n        const result = child.schema.$_validate(item, localState, prefs);\n\n        if (result.errors) {\n          if (prefs.abortEarly) {\n            return {\n              value,\n              errors: result.errors\n            };\n          }\n\n          if (result.value !== undefined) {\n            value[key] = result.value;\n          }\n\n          errors.push(...result.errors);\n        } else if (child.schema._flags.result === 'strip' || result.value === undefined && item !== undefined) {\n          delete value[key];\n        } else if (result.value !== undefined) {\n          value[key] = result.value;\n        }\n      }\n    } // Unknown keys\n\n\n    if (unprocessed.size || schema._flags._hasPatternMatch) {\n      const early = internals.unknown(schema, value, unprocessed, errors, state, prefs);\n\n      if (early) {\n        return early;\n      }\n    } // Validate dependencies\n\n\n    if (schema.$_terms.dependencies) {\n      for (const dep of schema.$_terms.dependencies) {\n        if (dep.key && dep.key.resolve(value, state, prefs, null, {\n          shadow: false\n        }) === undefined) {\n          continue;\n        }\n\n        const failed = internals.dependencies[dep.rel](schema, dep, value, state, prefs);\n\n        if (failed) {\n          const report = schema.$_createError(failed.code, value, failed.context, state, prefs);\n\n          if (prefs.abortEarly) {\n            return {\n              value,\n              errors: report\n            };\n          }\n\n          errors.push(report);\n        }\n      }\n    }\n\n    return {\n      value,\n      errors\n    };\n  },\n\n  rules: {\n    and: {\n      method(...peers\n      /*, [options] */\n      ) {\n        Common.verifyFlat(peers, 'and');\n        return internals.dependency(this, 'and', null, peers);\n      }\n\n    },\n    append: {\n      method(schema) {\n        if (schema === null || schema === undefined || Object.keys(schema).length === 0) {\n          return this;\n        }\n\n        return this.keys(schema);\n      }\n\n    },\n    assert: {\n      method(subject, schema, message) {\n        if (!Template.isTemplate(subject)) {\n          subject = Compile.ref(subject);\n        }\n\n        Assert(message === undefined || typeof message === 'string', 'Message must be a string');\n        schema = this.$_compile(schema, {\n          appendPath: true\n        });\n        const obj = this.$_addRule({\n          name: 'assert',\n          args: {\n            subject,\n            schema,\n            message\n          }\n        });\n        obj.$_mutateRegister(subject);\n        obj.$_mutateRegister(schema);\n        return obj;\n      },\n\n      validate(value, {\n        error,\n        prefs,\n        state\n      }, {\n        subject,\n        schema,\n        message\n      }) {\n        const about = subject.resolve(value, state, prefs);\n        const path = Ref.isRef(subject) ? subject.absolute(state) : [];\n\n        if (schema.$_match(about, state.localize(path, [value, ...state.ancestors], schema), prefs)) {\n          return value;\n        }\n\n        return error('object.assert', {\n          subject,\n          message\n        });\n      },\n\n      args: ['subject', 'schema', 'message'],\n      multi: true\n    },\n    instance: {\n      method(constructor, name) {\n        Assert(typeof constructor === 'function', 'constructor must be a function');\n        name = name || constructor.name;\n        return this.$_addRule({\n          name: 'instance',\n          args: {\n            constructor,\n            name\n          }\n        });\n      },\n\n      validate(value, helpers, {\n        constructor,\n        name\n      }) {\n        if (value instanceof constructor) {\n          return value;\n        }\n\n        return helpers.error('object.instance', {\n          type: name,\n          value\n        });\n      },\n\n      args: ['constructor', 'name']\n    },\n    keys: {\n      method(schema) {\n        Assert(schema === undefined || typeof schema === 'object', 'Object schema must be a valid object');\n        Assert(!Common.isSchema(schema), 'Object schema cannot be a joi schema');\n        const obj = this.clone();\n\n        if (!schema) {\n          // Allow all\n          obj.$_terms.keys = null;\n        } else if (!Object.keys(schema).length) {\n          // Allow none\n          obj.$_terms.keys = new internals.Keys();\n        } else {\n          obj.$_terms.keys = obj.$_terms.keys ? obj.$_terms.keys.filter(child => !schema.hasOwnProperty(child.key)) : new internals.Keys();\n\n          for (const key in schema) {\n            Common.tryWithPath(() => obj.$_terms.keys.push({\n              key,\n              schema: this.$_compile(schema[key])\n            }), key);\n          }\n        }\n\n        return obj.$_mutateRebuild();\n      }\n\n    },\n    length: {\n      method(limit) {\n        return this.$_addRule({\n          name: 'length',\n          args: {\n            limit\n          },\n          operator: '='\n        });\n      },\n\n      validate(value, helpers, {\n        limit\n      }, {\n        name,\n        operator,\n        args\n      }) {\n        if (Common.compare(Object.keys(value).length, limit, operator)) {\n          return value;\n        }\n\n        return helpers.error('object.' + name, {\n          limit: args.limit,\n          value\n        });\n      },\n\n      args: [{\n        name: 'limit',\n        ref: true,\n        assert: Common.limit,\n        message: 'must be a positive integer'\n      }]\n    },\n    max: {\n      method(limit) {\n        return this.$_addRule({\n          name: 'max',\n          method: 'length',\n          args: {\n            limit\n          },\n          operator: '<='\n        });\n      }\n\n    },\n    min: {\n      method(limit) {\n        return this.$_addRule({\n          name: 'min',\n          method: 'length',\n          args: {\n            limit\n          },\n          operator: '>='\n        });\n      }\n\n    },\n    nand: {\n      method(...peers\n      /*, [options] */\n      ) {\n        Common.verifyFlat(peers, 'nand');\n        return internals.dependency(this, 'nand', null, peers);\n      }\n\n    },\n    or: {\n      method(...peers\n      /*, [options] */\n      ) {\n        Common.verifyFlat(peers, 'or');\n        return internals.dependency(this, 'or', null, peers);\n      }\n\n    },\n    oxor: {\n      method(...peers\n      /*, [options] */\n      ) {\n        return internals.dependency(this, 'oxor', null, peers);\n      }\n\n    },\n    pattern: {\n      method(pattern, schema, options = {}) {\n        const isRegExp = pattern instanceof RegExp;\n\n        if (!isRegExp) {\n          pattern = this.$_compile(pattern, {\n            appendPath: true\n          });\n        }\n\n        Assert(schema !== undefined, 'Invalid rule');\n        Common.assertOptions(options, ['fallthrough', 'matches']);\n\n        if (isRegExp) {\n          Assert(!pattern.flags.includes('g') && !pattern.flags.includes('y'), 'pattern should not use global or sticky mode');\n        }\n\n        schema = this.$_compile(schema, {\n          appendPath: true\n        });\n        const obj = this.clone();\n        obj.$_terms.patterns = obj.$_terms.patterns || [];\n        const config = {\n          [isRegExp ? 'regex' : 'schema']: pattern,\n          rule: schema\n        };\n\n        if (options.matches) {\n          config.matches = this.$_compile(options.matches);\n\n          if (config.matches.type !== 'array') {\n            config.matches = config.matches.$_root.array().items(config.matches);\n          }\n\n          obj.$_mutateRegister(config.matches);\n          obj.$_setFlag('_hasPatternMatch', true, {\n            clone: false\n          });\n        }\n\n        if (options.fallthrough) {\n          config.fallthrough = true;\n        }\n\n        obj.$_terms.patterns.push(config);\n        obj.$_mutateRegister(schema);\n        return obj;\n      }\n\n    },\n    ref: {\n      method() {\n        return this.$_addRule('ref');\n      },\n\n      validate(value, helpers) {\n        if (Ref.isRef(value)) {\n          return value;\n        }\n\n        return helpers.error('object.refType', {\n          value\n        });\n      }\n\n    },\n    regex: {\n      method() {\n        return this.$_addRule('regex');\n      },\n\n      validate(value, helpers) {\n        if (value instanceof RegExp) {\n          return value;\n        }\n\n        return helpers.error('object.regex', {\n          value\n        });\n      }\n\n    },\n    rename: {\n      method(from, to, options = {}) {\n        Assert(typeof from === 'string' || from instanceof RegExp, 'Rename missing the from argument');\n        Assert(typeof to === 'string' || to instanceof Template, 'Invalid rename to argument');\n        Assert(to !== from, 'Cannot rename key to same name:', from);\n        Common.assertOptions(options, ['alias', 'ignoreUndefined', 'override', 'multiple']);\n        const obj = this.clone();\n        obj.$_terms.renames = obj.$_terms.renames || [];\n\n        for (const rename of obj.$_terms.renames) {\n          Assert(rename.from !== from, 'Cannot rename the same key multiple times');\n        }\n\n        if (to instanceof Template) {\n          obj.$_mutateRegister(to);\n        }\n\n        obj.$_terms.renames.push({\n          from,\n          to,\n          options: ApplyToDefaults(internals.renameDefaults, options)\n        });\n        return obj;\n      }\n\n    },\n    schema: {\n      method(type = 'any') {\n        return this.$_addRule({\n          name: 'schema',\n          args: {\n            type\n          }\n        });\n      },\n\n      validate(value, helpers, {\n        type\n      }) {\n        if (Common.isSchema(value) && (type === 'any' || value.type === type)) {\n          return value;\n        }\n\n        return helpers.error('object.schema', {\n          type\n        });\n      }\n\n    },\n    unknown: {\n      method(allow) {\n        return this.$_setFlag('unknown', allow !== false);\n      }\n\n    },\n    with: {\n      method(key, peers, options = {}) {\n        return internals.dependency(this, 'with', key, peers, options);\n      }\n\n    },\n    without: {\n      method(key, peers, options = {}) {\n        return internals.dependency(this, 'without', key, peers, options);\n      }\n\n    },\n    xor: {\n      method(...peers\n      /*, [options] */\n      ) {\n        Common.verifyFlat(peers, 'xor');\n        return internals.dependency(this, 'xor', null, peers);\n      }\n\n    }\n  },\n  overrides: {\n    default(value, options) {\n      if (value === undefined) {\n        value = Common.symbols.deepDefault;\n      }\n\n      return this.$_parent('default', value, options);\n    }\n\n  },\n\n  rebuild(schema) {\n    if (schema.$_terms.keys) {\n      const topo = new Topo.Sorter();\n\n      for (const child of schema.$_terms.keys) {\n        Common.tryWithPath(() => topo.add(child, {\n          after: child.schema.$_rootReferences(),\n          group: child.key\n        }), child.key);\n      }\n\n      schema.$_terms.keys = new internals.Keys(...topo.nodes);\n    }\n  },\n\n  manifest: {\n    build(obj, desc) {\n      if (desc.keys) {\n        obj = obj.keys(desc.keys);\n      }\n\n      if (desc.dependencies) {\n        for (const {\n          rel,\n          key = null,\n          peers,\n          options\n        } of desc.dependencies) {\n          obj = internals.dependency(obj, rel, key, peers, options);\n        }\n      }\n\n      if (desc.patterns) {\n        for (const {\n          regex,\n          schema,\n          rule,\n          fallthrough,\n          matches\n        } of desc.patterns) {\n          obj = obj.pattern(regex || schema, rule, {\n            fallthrough,\n            matches\n          });\n        }\n      }\n\n      if (desc.renames) {\n        for (const {\n          from,\n          to,\n          options\n        } of desc.renames) {\n          obj = obj.rename(from, to, options);\n        }\n      }\n\n      return obj;\n    }\n\n  },\n  messages: {\n    'object.and': '{{#label}} contains {{#presentWithLabels}} without its required peers {{#missingWithLabels}}',\n    'object.assert': '{{#label}} is invalid because {if(#subject.key, `\"` + #subject.key + `\" failed to ` + (#message || \"pass the assertion test\"), #message || \"the assertion failed\")}',\n    'object.base': '{{#label}} must be of type {{#type}}',\n    'object.instance': '{{#label}} must be an instance of {{:#type}}',\n    'object.length': '{{#label}} must have {{#limit}} key{if(#limit == 1, \"\", \"s\")}',\n    'object.max': '{{#label}} must have less than or equal to {{#limit}} key{if(#limit == 1, \"\", \"s\")}',\n    'object.min': '{{#label}} must have at least {{#limit}} key{if(#limit == 1, \"\", \"s\")}',\n    'object.missing': '{{#label}} must contain at least one of {{#peersWithLabels}}',\n    'object.nand': '{{:#mainWithLabel}} must not exist simultaneously with {{#peersWithLabels}}',\n    'object.oxor': '{{#label}} contains a conflict between optional exclusive peers {{#peersWithLabels}}',\n    'object.pattern.match': '{{#label}} keys failed to match pattern requirements',\n    'object.refType': '{{#label}} must be a Joi reference',\n    'object.regex': '{{#label}} must be a RegExp object',\n    'object.rename.multiple': '{{#label}} cannot rename {{:#from}} because multiple renames are disabled and another key was already renamed to {{:#to}}',\n    'object.rename.override': '{{#label}} cannot rename {{:#from}} because override is disabled and target {{:#to}} exists',\n    'object.schema': '{{#label}} must be a Joi schema of {{#type}} type',\n    'object.unknown': '{{#label}} is not allowed',\n    'object.with': '{{:#mainWithLabel}} missing required peer {{:#peerWithLabel}}',\n    'object.without': '{{:#mainWithLabel}} conflict with forbidden peer {{:#peerWithLabel}}',\n    'object.xor': '{{#label}} contains a conflict between exclusive peers {{#peersWithLabels}}'\n  }\n}); // Helpers\n\ninternals.clone = function (value, prefs) {\n  // Object\n  if (typeof value === 'object') {\n    if (prefs.nonEnumerables) {\n      return Clone(value, {\n        shallow: true\n      });\n    }\n\n    const clone = Object.create(Object.getPrototypeOf(value));\n    Object.assign(clone, value);\n    return clone;\n  } // Function\n\n\n  const clone = function (...args) {\n    return value.apply(this, args);\n  };\n\n  clone.prototype = Clone(value.prototype);\n  Object.defineProperty(clone, 'name', {\n    value: value.name,\n    writable: false\n  });\n  Object.defineProperty(clone, 'length', {\n    value: value.length,\n    writable: false\n  });\n  Object.assign(clone, value);\n  return clone;\n};\n\ninternals.dependency = function (schema, rel, key, peers, options) {\n  Assert(key === null || typeof key === 'string', rel, 'key must be a strings'); // Extract options from peers array\n\n  if (!options) {\n    options = peers.length > 1 && typeof peers[peers.length - 1] === 'object' ? peers.pop() : {};\n  }\n\n  Common.assertOptions(options, ['separator']);\n  peers = [].concat(peers); // Cast peer paths\n\n  const separator = Common.default(options.separator, '.');\n  const paths = [];\n\n  for (const peer of peers) {\n    Assert(typeof peer === 'string', rel, 'peers must be strings');\n    paths.push(Compile.ref(peer, {\n      separator,\n      ancestor: 0,\n      prefix: false\n    }));\n  } // Cast key\n\n\n  if (key !== null) {\n    key = Compile.ref(key, {\n      separator,\n      ancestor: 0,\n      prefix: false\n    });\n  } // Add rule\n\n\n  const obj = schema.clone();\n  obj.$_terms.dependencies = obj.$_terms.dependencies || [];\n  obj.$_terms.dependencies.push(new internals.Dependency(rel, key, paths, peers));\n  return obj;\n};\n\ninternals.dependencies = {\n  and(schema, dep, value, state, prefs) {\n    const missing = [];\n    const present = [];\n    const count = dep.peers.length;\n\n    for (const peer of dep.peers) {\n      if (peer.resolve(value, state, prefs, null, {\n        shadow: false\n      }) === undefined) {\n        missing.push(peer.key);\n      } else {\n        present.push(peer.key);\n      }\n    }\n\n    if (missing.length !== count && present.length !== count) {\n      return {\n        code: 'object.and',\n        context: {\n          present,\n          presentWithLabels: internals.keysToLabels(schema, present),\n          missing,\n          missingWithLabels: internals.keysToLabels(schema, missing)\n        }\n      };\n    }\n  },\n\n  nand(schema, dep, value, state, prefs) {\n    const present = [];\n\n    for (const peer of dep.peers) {\n      if (peer.resolve(value, state, prefs, null, {\n        shadow: false\n      }) !== undefined) {\n        present.push(peer.key);\n      }\n    }\n\n    if (present.length !== dep.peers.length) {\n      return;\n    }\n\n    const main = dep.paths[0];\n    const values = dep.paths.slice(1);\n    return {\n      code: 'object.nand',\n      context: {\n        main,\n        mainWithLabel: internals.keysToLabels(schema, main),\n        peers: values,\n        peersWithLabels: internals.keysToLabels(schema, values)\n      }\n    };\n  },\n\n  or(schema, dep, value, state, prefs) {\n    for (const peer of dep.peers) {\n      if (peer.resolve(value, state, prefs, null, {\n        shadow: false\n      }) !== undefined) {\n        return;\n      }\n    }\n\n    return {\n      code: 'object.missing',\n      context: {\n        peers: dep.paths,\n        peersWithLabels: internals.keysToLabels(schema, dep.paths)\n      }\n    };\n  },\n\n  oxor(schema, dep, value, state, prefs) {\n    const present = [];\n\n    for (const peer of dep.peers) {\n      if (peer.resolve(value, state, prefs, null, {\n        shadow: false\n      }) !== undefined) {\n        present.push(peer.key);\n      }\n    }\n\n    if (!present.length || present.length === 1) {\n      return;\n    }\n\n    const context = {\n      peers: dep.paths,\n      peersWithLabels: internals.keysToLabels(schema, dep.paths)\n    };\n    context.present = present;\n    context.presentWithLabels = internals.keysToLabels(schema, present);\n    return {\n      code: 'object.oxor',\n      context\n    };\n  },\n\n  with(schema, dep, value, state, prefs) {\n    for (const peer of dep.peers) {\n      if (peer.resolve(value, state, prefs, null, {\n        shadow: false\n      }) === undefined) {\n        return {\n          code: 'object.with',\n          context: {\n            main: dep.key.key,\n            mainWithLabel: internals.keysToLabels(schema, dep.key.key),\n            peer: peer.key,\n            peerWithLabel: internals.keysToLabels(schema, peer.key)\n          }\n        };\n      }\n    }\n  },\n\n  without(schema, dep, value, state, prefs) {\n    for (const peer of dep.peers) {\n      if (peer.resolve(value, state, prefs, null, {\n        shadow: false\n      }) !== undefined) {\n        return {\n          code: 'object.without',\n          context: {\n            main: dep.key.key,\n            mainWithLabel: internals.keysToLabels(schema, dep.key.key),\n            peer: peer.key,\n            peerWithLabel: internals.keysToLabels(schema, peer.key)\n          }\n        };\n      }\n    }\n  },\n\n  xor(schema, dep, value, state, prefs) {\n    const present = [];\n\n    for (const peer of dep.peers) {\n      if (peer.resolve(value, state, prefs, null, {\n        shadow: false\n      }) !== undefined) {\n        present.push(peer.key);\n      }\n    }\n\n    if (present.length === 1) {\n      return;\n    }\n\n    const context = {\n      peers: dep.paths,\n      peersWithLabels: internals.keysToLabels(schema, dep.paths)\n    };\n\n    if (present.length === 0) {\n      return {\n        code: 'object.missing',\n        context\n      };\n    }\n\n    context.present = present;\n    context.presentWithLabels = internals.keysToLabels(schema, present);\n    return {\n      code: 'object.xor',\n      context\n    };\n  }\n\n};\n\ninternals.keysToLabels = function (schema, keys) {\n  if (Array.isArray(keys)) {\n    return keys.map(key => schema.$_mapLabels(key));\n  }\n\n  return schema.$_mapLabels(keys);\n};\n\ninternals.rename = function (schema, value, state, prefs, errors) {\n  const renamed = {};\n\n  for (const rename of schema.$_terms.renames) {\n    const matches = [];\n    const pattern = typeof rename.from !== 'string';\n\n    if (!pattern) {\n      if (Object.prototype.hasOwnProperty.call(value, rename.from) && (value[rename.from] !== undefined || !rename.options.ignoreUndefined)) {\n        matches.push(rename);\n      }\n    } else {\n      for (const from in value) {\n        if (value[from] === undefined && rename.options.ignoreUndefined) {\n          continue;\n        }\n\n        if (from === rename.to) {\n          continue;\n        }\n\n        const match = rename.from.exec(from);\n\n        if (!match) {\n          continue;\n        }\n\n        matches.push({\n          from,\n          to: rename.to,\n          match\n        });\n      }\n    }\n\n    for (const match of matches) {\n      const from = match.from;\n      let to = match.to;\n\n      if (to instanceof Template) {\n        to = to.render(value, state, prefs, match.match);\n      }\n\n      if (from === to) {\n        continue;\n      }\n\n      if (!rename.options.multiple && renamed[to]) {\n        errors.push(schema.$_createError('object.rename.multiple', value, {\n          from,\n          to,\n          pattern\n        }, state, prefs));\n\n        if (prefs.abortEarly) {\n          return false;\n        }\n      }\n\n      if (Object.prototype.hasOwnProperty.call(value, to) && !rename.options.override && !renamed[to]) {\n        errors.push(schema.$_createError('object.rename.override', value, {\n          from,\n          to,\n          pattern\n        }, state, prefs));\n\n        if (prefs.abortEarly) {\n          return false;\n        }\n      }\n\n      if (value[from] === undefined) {\n        delete value[to];\n      } else {\n        value[to] = value[from];\n      }\n\n      renamed[to] = true;\n\n      if (!rename.options.alias) {\n        delete value[from];\n      }\n    }\n  }\n\n  return true;\n};\n\ninternals.unknown = function (schema, value, unprocessed, errors, state, prefs) {\n  if (schema.$_terms.patterns) {\n    let hasMatches = false;\n    const matches = schema.$_terms.patterns.map(pattern => {\n      if (pattern.matches) {\n        hasMatches = true;\n        return [];\n      }\n    });\n    const ancestors = [value, ...state.ancestors];\n\n    for (const key of unprocessed) {\n      const item = value[key];\n      const path = [...state.path, key];\n\n      for (let i = 0; i < schema.$_terms.patterns.length; ++i) {\n        const pattern = schema.$_terms.patterns[i];\n\n        if (pattern.regex) {\n          const match = pattern.regex.test(key);\n          state.mainstay.tracer.debug(state, 'rule', `pattern.${i}`, match ? 'pass' : 'error');\n\n          if (!match) {\n            continue;\n          }\n        } else {\n          if (!pattern.schema.$_match(key, state.nest(pattern.schema, `pattern.${i}`), prefs)) {\n            continue;\n          }\n        }\n\n        unprocessed.delete(key);\n        const localState = state.localize(path, ancestors, {\n          schema: pattern.rule,\n          key\n        });\n        const result = pattern.rule.$_validate(item, localState, prefs);\n\n        if (result.errors) {\n          if (prefs.abortEarly) {\n            return {\n              value,\n              errors: result.errors\n            };\n          }\n\n          errors.push(...result.errors);\n        }\n\n        if (pattern.matches) {\n          matches[i].push(key);\n        }\n\n        value[key] = result.value;\n\n        if (!pattern.fallthrough) {\n          break;\n        }\n      }\n    } // Validate pattern matches rules\n\n\n    if (hasMatches) {\n      for (let i = 0; i < matches.length; ++i) {\n        const match = matches[i];\n\n        if (!match) {\n          continue;\n        }\n\n        const stpm = schema.$_terms.patterns[i].matches;\n        const localState = state.localize(state.path, ancestors, stpm);\n        const result = stpm.$_validate(match, localState, prefs);\n\n        if (result.errors) {\n          const details = Errors.details(result.errors, {\n            override: false\n          });\n          details.matches = match;\n          const report = schema.$_createError('object.pattern.match', value, details, state, prefs);\n\n          if (prefs.abortEarly) {\n            return {\n              value,\n              errors: report\n            };\n          }\n\n          errors.push(report);\n        }\n      }\n    }\n  }\n\n  if (!unprocessed.size || !schema.$_terms.keys && !schema.$_terms.patterns) {\n    // If no keys or patterns specified, unknown keys allowed\n    return;\n  }\n\n  if (prefs.stripUnknown && !schema._flags.unknown || prefs.skipFunctions) {\n    const stripUnknown = prefs.stripUnknown ? prefs.stripUnknown === true ? true : !!prefs.stripUnknown.objects : false;\n\n    for (const key of unprocessed) {\n      if (stripUnknown) {\n        delete value[key];\n        unprocessed.delete(key);\n      } else if (typeof value[key] === 'function') {\n        unprocessed.delete(key);\n      }\n    }\n  }\n\n  const forbidUnknown = !Common.default(schema._flags.unknown, prefs.allowUnknown);\n\n  if (forbidUnknown) {\n    for (const unprocessedKey of unprocessed) {\n      const localState = state.localize([...state.path, unprocessedKey], []);\n      const report = schema.$_createError('object.unknown', value[unprocessedKey], {\n        child: unprocessedKey\n      }, localState, prefs, {\n        flags: false\n      });\n\n      if (prefs.abortEarly) {\n        return {\n          value,\n          errors: report\n        };\n      }\n\n      errors.push(report);\n    }\n  }\n};\n\ninternals.Dependency = class {\n  constructor(rel, key, peers, paths) {\n    this.rel = rel;\n    this.key = key;\n    this.peers = peers;\n    this.paths = paths;\n  }\n\n  describe() {\n    const desc = {\n      rel: this.rel,\n      peers: this.paths\n    };\n\n    if (this.key !== null) {\n      desc.key = this.key.key;\n    }\n\n    if (this.peers[0].separator !== '.') {\n      desc.options = {\n        separator: this.peers[0].separator\n      };\n    }\n\n    return desc;\n  }\n\n};\ninternals.Keys = class extends Array {\n  concat(source) {\n    const result = this.slice();\n    const keys = new Map();\n\n    for (let i = 0; i < result.length; ++i) {\n      keys.set(result[i].key, i);\n    }\n\n    for (const item of source) {\n      const key = item.key;\n      const pos = keys.get(key);\n\n      if (pos !== undefined) {\n        result[pos] = {\n          key,\n          schema: result[pos].schema.concat(item.schema)\n        };\n      } else {\n        result.push(item);\n      }\n    }\n\n    return result;\n  }\n\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/lib/types/keys.js?");

/***/ }),

/***/ "./node_modules/joi/lib/types/link.js":
/*!********************************************!*\
  !*** ./node_modules/joi/lib/types/link.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"./node_modules/@hapi/hoek/lib/assert.js\");\n\nconst Any = __webpack_require__(/*! ./any */ \"./node_modules/joi/lib/types/any.js\");\n\nconst Common = __webpack_require__(/*! ../common */ \"./node_modules/joi/lib/common.js\");\n\nconst Compile = __webpack_require__(/*! ../compile */ \"./node_modules/joi/lib/compile.js\");\n\nconst Errors = __webpack_require__(/*! ../errors */ \"./node_modules/joi/lib/errors.js\");\n\nconst internals = {};\nmodule.exports = Any.extend({\n  type: 'link',\n  properties: {\n    schemaChain: true\n  },\n  terms: {\n    link: {\n      init: null,\n      manifest: 'single',\n      register: false\n    }\n  },\n\n  args(schema, ref) {\n    return schema.ref(ref);\n  },\n\n  validate(value, {\n    schema,\n    state,\n    prefs\n  }) {\n    Assert(schema.$_terms.link, 'Uninitialized link schema');\n    const linked = internals.generate(schema, value, state, prefs);\n    const ref = schema.$_terms.link[0].ref;\n    return linked.$_validate(value, state.nest(linked, `link:${ref.display}:${linked.type}`), prefs);\n  },\n\n  generate(schema, value, state, prefs) {\n    return internals.generate(schema, value, state, prefs);\n  },\n\n  rules: {\n    ref: {\n      method(ref) {\n        Assert(!this.$_terms.link, 'Cannot reinitialize schema');\n        ref = Compile.ref(ref);\n        Assert(ref.type === 'value' || ref.type === 'local', 'Invalid reference type:', ref.type);\n        Assert(ref.type === 'local' || ref.ancestor === 'root' || ref.ancestor > 0, 'Link cannot reference itself');\n        const obj = this.clone();\n        obj.$_terms.link = [{\n          ref\n        }];\n        return obj;\n      }\n\n    },\n    relative: {\n      method(enabled = true) {\n        return this.$_setFlag('relative', enabled);\n      }\n\n    }\n  },\n  overrides: {\n    concat(source) {\n      Assert(this.$_terms.link, 'Uninitialized link schema');\n      Assert(Common.isSchema(source), 'Invalid schema object');\n      Assert(source.type !== 'link', 'Cannot merge type link with another link');\n      const obj = this.clone();\n\n      if (!obj.$_terms.whens) {\n        obj.$_terms.whens = [];\n      }\n\n      obj.$_terms.whens.push({\n        concat: source\n      });\n      return obj.$_mutateRebuild();\n    }\n\n  },\n  manifest: {\n    build(obj, desc) {\n      Assert(desc.link, 'Invalid link description missing link');\n      return obj.ref(desc.link);\n    }\n\n  }\n}); // Helpers\n\ninternals.generate = function (schema, value, state, prefs) {\n  let linked = state.mainstay.links.get(schema);\n\n  if (linked) {\n    return linked._generate(value, state, prefs).schema;\n  }\n\n  const ref = schema.$_terms.link[0].ref;\n  const {\n    perspective,\n    path\n  } = internals.perspective(ref, state);\n  internals.assert(perspective, 'which is outside of schema boundaries', ref, schema, state, prefs);\n\n  try {\n    linked = path.length ? perspective.$_reach(path) : perspective;\n  } catch (ignoreErr) {\n    internals.assert(false, 'to non-existing schema', ref, schema, state, prefs);\n  }\n\n  internals.assert(linked.type !== 'link', 'which is another link', ref, schema, state, prefs);\n\n  if (!schema._flags.relative) {\n    state.mainstay.links.set(schema, linked);\n  }\n\n  return linked._generate(value, state, prefs).schema;\n};\n\ninternals.perspective = function (ref, state) {\n  if (ref.type === 'local') {\n    for (const {\n      schema,\n      key\n    } of state.schemas) {\n      // From parent to root\n      const id = schema._flags.id || key;\n\n      if (id === ref.path[0]) {\n        return {\n          perspective: schema,\n          path: ref.path.slice(1)\n        };\n      }\n\n      if (schema.$_terms.shared) {\n        for (const shared of schema.$_terms.shared) {\n          if (shared._flags.id === ref.path[0]) {\n            return {\n              perspective: shared,\n              path: ref.path.slice(1)\n            };\n          }\n        }\n      }\n    }\n\n    return {\n      perspective: null,\n      path: null\n    };\n  }\n\n  if (ref.ancestor === 'root') {\n    return {\n      perspective: state.schemas[state.schemas.length - 1].schema,\n      path: ref.path\n    };\n  }\n\n  return {\n    perspective: state.schemas[ref.ancestor] && state.schemas[ref.ancestor].schema,\n    path: ref.path\n  };\n};\n\ninternals.assert = function (condition, message, ref, schema, state, prefs) {\n  if (condition) {\n    // Manual check to avoid generating error message on success\n    return;\n  }\n\n  Assert(false, `\"${Errors.label(schema._flags, state, prefs)}\" contains link reference \"${ref.display}\" ${message}`);\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/lib/types/link.js?");

/***/ }),

/***/ "./node_modules/joi/lib/types/number.js":
/*!**********************************************!*\
  !*** ./node_modules/joi/lib/types/number.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"./node_modules/@hapi/hoek/lib/assert.js\");\n\nconst Any = __webpack_require__(/*! ./any */ \"./node_modules/joi/lib/types/any.js\");\n\nconst Common = __webpack_require__(/*! ../common */ \"./node_modules/joi/lib/common.js\");\n\nconst internals = {\n  numberRx: /^\\s*[+-]?(?:(?:\\d+(?:\\.\\d*)?)|(?:\\.\\d+))(?:e([+-]?\\d+))?\\s*$/i,\n  precisionRx: /(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/\n};\nmodule.exports = Any.extend({\n  type: 'number',\n  flags: {\n    unsafe: {\n      default: false\n    }\n  },\n  coerce: {\n    from: 'string',\n\n    method(value, {\n      schema,\n      error\n    }) {\n      const matches = value.match(internals.numberRx);\n\n      if (!matches) {\n        return;\n      }\n\n      value = value.trim();\n      const result = {\n        value: parseFloat(value)\n      };\n\n      if (result.value === 0) {\n        result.value = 0; // -0\n      }\n\n      if (!schema._flags.unsafe) {\n        if (value.match(/e/i)) {\n          const constructed = internals.normalizeExponent(`${result.value / Math.pow(10, matches[1])}e${matches[1]}`);\n\n          if (constructed !== internals.normalizeExponent(value)) {\n            result.errors = error('number.unsafe');\n            return result;\n          }\n        } else {\n          const string = result.value.toString();\n\n          if (string.match(/e/i)) {\n            return result;\n          }\n\n          if (string !== internals.normalizeDecimal(value)) {\n            result.errors = error('number.unsafe');\n            return result;\n          }\n        }\n      }\n\n      return result;\n    }\n\n  },\n\n  validate(value, {\n    schema,\n    error,\n    prefs\n  }) {\n    if (value === Infinity || value === -Infinity) {\n      return {\n        value,\n        errors: error('number.infinity')\n      };\n    }\n\n    if (!Common.isNumber(value)) {\n      return {\n        value,\n        errors: error('number.base')\n      };\n    }\n\n    const result = {\n      value\n    };\n\n    if (prefs.convert) {\n      const rule = schema.$_getRule('precision');\n\n      if (rule) {\n        const precision = Math.pow(10, rule.args.limit); // This is conceptually equivalent to using toFixed but it should be much faster\n\n        result.value = Math.round(result.value * precision) / precision;\n      }\n    }\n\n    if (result.value === 0) {\n      result.value = 0; // -0\n    }\n\n    if (!schema._flags.unsafe && (value > Number.MAX_SAFE_INTEGER || value < Number.MIN_SAFE_INTEGER)) {\n      result.errors = error('number.unsafe');\n    }\n\n    return result;\n  },\n\n  rules: {\n    compare: {\n      method: false,\n\n      validate(value, helpers, {\n        limit\n      }, {\n        name,\n        operator,\n        args\n      }) {\n        if (Common.compare(value, limit, operator)) {\n          return value;\n        }\n\n        return helpers.error('number.' + name, {\n          limit: args.limit,\n          value\n        });\n      },\n\n      args: [{\n        name: 'limit',\n        ref: true,\n        assert: Common.isNumber,\n        message: 'must be a number'\n      }]\n    },\n    greater: {\n      method(limit) {\n        return this.$_addRule({\n          name: 'greater',\n          method: 'compare',\n          args: {\n            limit\n          },\n          operator: '>'\n        });\n      }\n\n    },\n    integer: {\n      method() {\n        return this.$_addRule('integer');\n      },\n\n      validate(value, helpers) {\n        if (Math.trunc(value) - value === 0) {\n          return value;\n        }\n\n        return helpers.error('number.integer');\n      }\n\n    },\n    less: {\n      method(limit) {\n        return this.$_addRule({\n          name: 'less',\n          method: 'compare',\n          args: {\n            limit\n          },\n          operator: '<'\n        });\n      }\n\n    },\n    max: {\n      method(limit) {\n        return this.$_addRule({\n          name: 'max',\n          method: 'compare',\n          args: {\n            limit\n          },\n          operator: '<='\n        });\n      }\n\n    },\n    min: {\n      method(limit) {\n        return this.$_addRule({\n          name: 'min',\n          method: 'compare',\n          args: {\n            limit\n          },\n          operator: '>='\n        });\n      }\n\n    },\n    multiple: {\n      method(base) {\n        return this.$_addRule({\n          name: 'multiple',\n          args: {\n            base\n          }\n        });\n      },\n\n      validate(value, helpers, {\n        base\n      }, options) {\n        if (value % base === 0) {\n          return value;\n        }\n\n        return helpers.error('number.multiple', {\n          multiple: options.args.base,\n          value\n        });\n      },\n\n      args: [{\n        name: 'base',\n        ref: true,\n        assert: value => typeof value === 'number' && isFinite(value) && value > 0,\n        message: 'must be a positive number'\n      }],\n      multi: true\n    },\n    negative: {\n      method() {\n        return this.sign('negative');\n      }\n\n    },\n    port: {\n      method() {\n        return this.$_addRule('port');\n      },\n\n      validate(value, helpers) {\n        if (Number.isSafeInteger(value) && value >= 0 && value <= 65535) {\n          return value;\n        }\n\n        return helpers.error('number.port');\n      }\n\n    },\n    positive: {\n      method() {\n        return this.sign('positive');\n      }\n\n    },\n    precision: {\n      method(limit) {\n        Assert(Number.isSafeInteger(limit), 'limit must be an integer');\n        return this.$_addRule({\n          name: 'precision',\n          args: {\n            limit\n          }\n        });\n      },\n\n      validate(value, helpers, {\n        limit\n      }) {\n        const places = value.toString().match(internals.precisionRx);\n        const decimals = Math.max((places[1] ? places[1].length : 0) - (places[2] ? parseInt(places[2], 10) : 0), 0);\n\n        if (decimals <= limit) {\n          return value;\n        }\n\n        return helpers.error('number.precision', {\n          limit,\n          value\n        });\n      },\n\n      convert: true\n    },\n    sign: {\n      method(sign) {\n        Assert(['negative', 'positive'].includes(sign), 'Invalid sign', sign);\n        return this.$_addRule({\n          name: 'sign',\n          args: {\n            sign\n          }\n        });\n      },\n\n      validate(value, helpers, {\n        sign\n      }) {\n        if (sign === 'negative' && value < 0 || sign === 'positive' && value > 0) {\n          return value;\n        }\n\n        return helpers.error(`number.${sign}`);\n      }\n\n    },\n    unsafe: {\n      method(enabled = true) {\n        Assert(typeof enabled === 'boolean', 'enabled must be a boolean');\n        return this.$_setFlag('unsafe', enabled);\n      }\n\n    }\n  },\n  cast: {\n    string: {\n      from: value => typeof value === 'number',\n\n      to(value, helpers) {\n        return value.toString();\n      }\n\n    }\n  },\n  messages: {\n    'number.base': '{{#label}} must be a number',\n    'number.greater': '{{#label}} must be greater than {{#limit}}',\n    'number.infinity': '{{#label}} cannot be infinity',\n    'number.integer': '{{#label}} must be an integer',\n    'number.less': '{{#label}} must be less than {{#limit}}',\n    'number.max': '{{#label}} must be less than or equal to {{#limit}}',\n    'number.min': '{{#label}} must be greater than or equal to {{#limit}}',\n    'number.multiple': '{{#label}} must be a multiple of {{#multiple}}',\n    'number.negative': '{{#label}} must be a negative number',\n    'number.port': '{{#label}} must be a valid port',\n    'number.positive': '{{#label}} must be a positive number',\n    'number.precision': '{{#label}} must have no more than {{#limit}} decimal places',\n    'number.unsafe': '{{#label}} must be a safe number'\n  }\n}); // Helpers\n\ninternals.normalizeExponent = function (str) {\n  return str.replace(/E/, 'e').replace(/\\.(\\d*[1-9])?0+e/, '.$1e').replace(/\\.e/, 'e').replace(/e\\+/, 'e').replace(/^\\+/, '').replace(/^(-?)0+([1-9])/, '$1$2');\n};\n\ninternals.normalizeDecimal = function (str) {\n  str = str // Remove leading plus signs\n  .replace(/^\\+/, '') // Remove trailing zeros if there is a decimal point and unecessary decimal points\n  .replace(/\\.0*$/, '') // Add a integer 0 if the numbers starts with a decimal point\n  .replace(/^(-?)\\.([^\\.]*)$/, '$10.$2') // Remove leading zeros\n  .replace(/^(-?)0+([0-9])/, '$1$2');\n\n  if (str.includes('.') && str.endsWith('0')) {\n    str = str.replace(/0+$/, '');\n  }\n\n  if (str === '-0') {\n    return '0';\n  }\n\n  return str;\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/lib/types/number.js?");

/***/ }),

/***/ "./node_modules/joi/lib/types/object.js":
/*!**********************************************!*\
  !*** ./node_modules/joi/lib/types/object.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst Keys = __webpack_require__(/*! ./keys */ \"./node_modules/joi/lib/types/keys.js\");\n\nconst internals = {};\nmodule.exports = Keys.extend({\n  type: 'object',\n  cast: {\n    map: {\n      from: value => value && typeof value === 'object',\n\n      to(value, helpers) {\n        return new Map(Object.entries(value));\n      }\n\n    }\n  }\n});\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/lib/types/object.js?");

/***/ }),

/***/ "./node_modules/joi/lib/types/string.js":
/*!**********************************************!*\
  !*** ./node_modules/joi/lib/types/string.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"./node_modules/@hapi/hoek/lib/assert.js\");\n\nconst Domain = __webpack_require__(/*! @sideway/address/lib/domain */ \"./node_modules/@sideway/address/lib/domain.js\");\n\nconst Email = __webpack_require__(/*! @sideway/address/lib/email */ \"./node_modules/@sideway/address/lib/email.js\");\n\nconst Ip = __webpack_require__(/*! @sideway/address/lib/ip */ \"./node_modules/@sideway/address/lib/ip.js\");\n\nconst EscapeRegex = __webpack_require__(/*! @hapi/hoek/lib/escapeRegex */ \"./node_modules/@hapi/hoek/lib/escapeRegex.js\");\n\nconst Tlds = __webpack_require__(/*! @sideway/address/lib/tlds */ \"./node_modules/@sideway/address/lib/tlds.js\");\n\nconst Uri = __webpack_require__(/*! @sideway/address/lib/uri */ \"./node_modules/@sideway/address/lib/uri.js\");\n\nconst Any = __webpack_require__(/*! ./any */ \"./node_modules/joi/lib/types/any.js\");\n\nconst Common = __webpack_require__(/*! ../common */ \"./node_modules/joi/lib/common.js\");\n\nconst internals = {\n  tlds: Tlds instanceof Set ? {\n    tlds: {\n      allow: Tlds,\n      deny: null\n    }\n  } : false,\n  // $lab:coverage:ignore$\n  base64Regex: {\n    // paddingRequired\n    true: {\n      // urlSafe\n      true: /^(?:[\\w\\-]{2}[\\w\\-]{2})*(?:[\\w\\-]{2}==|[\\w\\-]{3}=)?$/,\n      false: /^(?:[A-Za-z0-9+\\/]{2}[A-Za-z0-9+\\/]{2})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$/\n    },\n    false: {\n      true: /^(?:[\\w\\-]{2}[\\w\\-]{2})*(?:[\\w\\-]{2}(==)?|[\\w\\-]{3}=?)?$/,\n      false: /^(?:[A-Za-z0-9+\\/]{2}[A-Za-z0-9+\\/]{2})*(?:[A-Za-z0-9+\\/]{2}(==)?|[A-Za-z0-9+\\/]{3}=?)?$/\n    }\n  },\n  dataUriRegex: /^data:[\\w+.-]+\\/[\\w+.-]+;((charset=[\\w-]+|base64),)?(.*)$/,\n  hexRegex: /^[a-f0-9]+$/i,\n  ipRegex: Ip.regex().regex,\n  isoDurationRegex: /^P(?!$)(\\d+Y)?(\\d+M)?(\\d+W)?(\\d+D)?(T(?=\\d)(\\d+H)?(\\d+M)?(\\d+S)?)?$/,\n  guidBrackets: {\n    '{': '}',\n    '[': ']',\n    '(': ')',\n    '': ''\n  },\n  guidVersions: {\n    uuidv1: '1',\n    uuidv2: '2',\n    uuidv3: '3',\n    uuidv4: '4',\n    uuidv5: '5'\n  },\n  guidSeparators: new Set([undefined, true, false, '-', ':']),\n  normalizationForms: ['NFC', 'NFD', 'NFKC', 'NFKD']\n};\nmodule.exports = Any.extend({\n  type: 'string',\n  flags: {\n    insensitive: {\n      default: false\n    },\n    truncate: {\n      default: false\n    }\n  },\n  terms: {\n    replacements: {\n      init: null\n    }\n  },\n  coerce: {\n    from: 'string',\n\n    method(value, {\n      schema,\n      state,\n      prefs\n    }) {\n      const normalize = schema.$_getRule('normalize');\n\n      if (normalize) {\n        value = value.normalize(normalize.args.form);\n      }\n\n      const casing = schema.$_getRule('case');\n\n      if (casing) {\n        value = casing.args.direction === 'upper' ? value.toLocaleUpperCase() : value.toLocaleLowerCase();\n      }\n\n      const trim = schema.$_getRule('trim');\n\n      if (trim && trim.args.enabled) {\n        value = value.trim();\n      }\n\n      if (schema.$_terms.replacements) {\n        for (const replacement of schema.$_terms.replacements) {\n          value = value.replace(replacement.pattern, replacement.replacement);\n        }\n      }\n\n      const hex = schema.$_getRule('hex');\n\n      if (hex && hex.args.options.byteAligned && value.length % 2 !== 0) {\n        value = `0${value}`;\n      }\n\n      if (schema.$_getRule('isoDate')) {\n        const iso = internals.isoDate(value);\n\n        if (iso) {\n          value = iso;\n        }\n      }\n\n      if (schema._flags.truncate) {\n        const rule = schema.$_getRule('max');\n\n        if (rule) {\n          let limit = rule.args.limit;\n\n          if (Common.isResolvable(limit)) {\n            limit = limit.resolve(value, state, prefs);\n\n            if (!Common.limit(limit)) {\n              return {\n                value,\n                errors: schema.$_createError('any.ref', limit, {\n                  ref: rule.args.limit,\n                  arg: 'limit',\n                  reason: 'must be a positive integer'\n                }, state, prefs)\n              };\n            }\n          }\n\n          value = value.slice(0, limit);\n        }\n      }\n\n      return {\n        value\n      };\n    }\n\n  },\n\n  validate(value, {\n    error\n  }) {\n    if (typeof value !== 'string') {\n      return {\n        value,\n        errors: error('string.base')\n      };\n    }\n\n    if (value === '') {\n      return {\n        value,\n        errors: error('string.empty')\n      };\n    }\n  },\n\n  rules: {\n    alphanum: {\n      method() {\n        return this.$_addRule('alphanum');\n      },\n\n      validate(value, helpers) {\n        if (/^[a-zA-Z0-9]+$/.test(value)) {\n          return value;\n        }\n\n        return helpers.error('string.alphanum');\n      }\n\n    },\n    base64: {\n      method(options = {}) {\n        Common.assertOptions(options, ['paddingRequired', 'urlSafe']);\n        options = {\n          urlSafe: false,\n          paddingRequired: true,\n          ...options\n        };\n        Assert(typeof options.paddingRequired === 'boolean', 'paddingRequired must be boolean');\n        Assert(typeof options.urlSafe === 'boolean', 'urlSafe must be boolean');\n        return this.$_addRule({\n          name: 'base64',\n          args: {\n            options\n          }\n        });\n      },\n\n      validate(value, helpers, {\n        options\n      }) {\n        const regex = internals.base64Regex[options.paddingRequired][options.urlSafe];\n\n        if (regex.test(value)) {\n          return value;\n        }\n\n        return helpers.error('string.base64');\n      }\n\n    },\n    case: {\n      method(direction) {\n        Assert(['lower', 'upper'].includes(direction), 'Invalid case:', direction);\n        return this.$_addRule({\n          name: 'case',\n          args: {\n            direction\n          }\n        });\n      },\n\n      validate(value, helpers, {\n        direction\n      }) {\n        if (direction === 'lower' && value === value.toLocaleLowerCase() || direction === 'upper' && value === value.toLocaleUpperCase()) {\n          return value;\n        }\n\n        return helpers.error(`string.${direction}case`);\n      },\n\n      convert: true\n    },\n    creditCard: {\n      method() {\n        return this.$_addRule('creditCard');\n      },\n\n      validate(value, helpers) {\n        let i = value.length;\n        let sum = 0;\n        let mul = 1;\n\n        while (i--) {\n          const char = value.charAt(i) * mul;\n          sum = sum + (char - (char > 9) * 9);\n          mul = mul ^ 3;\n        }\n\n        if (sum > 0 && sum % 10 === 0) {\n          return value;\n        }\n\n        return helpers.error('string.creditCard');\n      }\n\n    },\n    dataUri: {\n      method(options = {}) {\n        Common.assertOptions(options, ['paddingRequired']);\n        options = {\n          paddingRequired: true,\n          ...options\n        };\n        Assert(typeof options.paddingRequired === 'boolean', 'paddingRequired must be boolean');\n        return this.$_addRule({\n          name: 'dataUri',\n          args: {\n            options\n          }\n        });\n      },\n\n      validate(value, helpers, {\n        options\n      }) {\n        const matches = value.match(internals.dataUriRegex);\n\n        if (matches) {\n          if (!matches[2]) {\n            return value;\n          }\n\n          if (matches[2] !== 'base64') {\n            return value;\n          }\n\n          const base64regex = internals.base64Regex[options.paddingRequired].false;\n\n          if (base64regex.test(matches[3])) {\n            return value;\n          }\n        }\n\n        return helpers.error('string.dataUri');\n      }\n\n    },\n    domain: {\n      method(options) {\n        if (options) {\n          Common.assertOptions(options, ['allowUnicode', 'maxDomainSegments', 'minDomainSegments', 'tlds']);\n        }\n\n        const address = internals.addressOptions(options);\n        return this.$_addRule({\n          name: 'domain',\n          args: {\n            options\n          },\n          address\n        });\n      },\n\n      validate(value, helpers, args, {\n        address\n      }) {\n        if (Domain.isValid(value, address)) {\n          return value;\n        }\n\n        return helpers.error('string.domain');\n      }\n\n    },\n    email: {\n      method(options = {}) {\n        Common.assertOptions(options, ['allowUnicode', 'ignoreLength', 'maxDomainSegments', 'minDomainSegments', 'multiple', 'separator', 'tlds']);\n        Assert(options.multiple === undefined || typeof options.multiple === 'boolean', 'multiple option must be an boolean');\n        const address = internals.addressOptions(options);\n        const regex = new RegExp(`\\\\s*[${options.separator ? EscapeRegex(options.separator) : ','}]\\\\s*`);\n        return this.$_addRule({\n          name: 'email',\n          args: {\n            options\n          },\n          regex,\n          address\n        });\n      },\n\n      validate(value, helpers, {\n        options\n      }, {\n        regex,\n        address\n      }) {\n        const emails = options.multiple ? value.split(regex) : [value];\n        const invalids = [];\n\n        for (const email of emails) {\n          if (!Email.isValid(email, address)) {\n            invalids.push(email);\n          }\n        }\n\n        if (!invalids.length) {\n          return value;\n        }\n\n        return helpers.error('string.email', {\n          value,\n          invalids\n        });\n      }\n\n    },\n    guid: {\n      alias: 'uuid',\n\n      method(options = {}) {\n        Common.assertOptions(options, ['version', 'separator']);\n        let versionNumbers = '';\n\n        if (options.version) {\n          const versions = [].concat(options.version);\n          Assert(versions.length >= 1, 'version must have at least 1 valid version specified');\n          const set = new Set();\n\n          for (let i = 0; i < versions.length; ++i) {\n            const version = versions[i];\n            Assert(typeof version === 'string', 'version at position ' + i + ' must be a string');\n            const versionNumber = internals.guidVersions[version.toLowerCase()];\n            Assert(versionNumber, 'version at position ' + i + ' must be one of ' + Object.keys(internals.guidVersions).join(', '));\n            Assert(!set.has(versionNumber), 'version at position ' + i + ' must not be a duplicate');\n            versionNumbers += versionNumber;\n            set.add(versionNumber);\n          }\n        }\n\n        Assert(internals.guidSeparators.has(options.separator), 'separator must be one of true, false, \"-\", or \":\"');\n        const separator = options.separator === undefined ? '[:-]?' : options.separator === true ? '[:-]' : options.separator === false ? '[]?' : `\\\\${options.separator}`;\n        const regex = new RegExp(`^([\\\\[{\\\\(]?)[0-9A-F]{8}(${separator})[0-9A-F]{4}\\\\2?[${versionNumbers || '0-9A-F'}][0-9A-F]{3}\\\\2?[${versionNumbers ? '89AB' : '0-9A-F'}][0-9A-F]{3}\\\\2?[0-9A-F]{12}([\\\\]}\\\\)]?)$`, 'i');\n        return this.$_addRule({\n          name: 'guid',\n          args: {\n            options\n          },\n          regex\n        });\n      },\n\n      validate(value, helpers, args, {\n        regex\n      }) {\n        const results = regex.exec(value);\n\n        if (!results) {\n          return helpers.error('string.guid');\n        } // Matching braces\n\n\n        if (internals.guidBrackets[results[1]] !== results[results.length - 1]) {\n          return helpers.error('string.guid');\n        }\n\n        return value;\n      }\n\n    },\n    hex: {\n      method(options = {}) {\n        Common.assertOptions(options, ['byteAligned']);\n        options = {\n          byteAligned: false,\n          ...options\n        };\n        Assert(typeof options.byteAligned === 'boolean', 'byteAligned must be boolean');\n        return this.$_addRule({\n          name: 'hex',\n          args: {\n            options\n          }\n        });\n      },\n\n      validate(value, helpers, {\n        options\n      }) {\n        if (!internals.hexRegex.test(value)) {\n          return helpers.error('string.hex');\n        }\n\n        if (options.byteAligned && value.length % 2 !== 0) {\n          return helpers.error('string.hexAlign');\n        }\n\n        return value;\n      }\n\n    },\n    hostname: {\n      method() {\n        return this.$_addRule('hostname');\n      },\n\n      validate(value, helpers) {\n        if (Domain.isValid(value, {\n          minDomainSegments: 1\n        }) || internals.ipRegex.test(value)) {\n          return value;\n        }\n\n        return helpers.error('string.hostname');\n      }\n\n    },\n    insensitive: {\n      method() {\n        return this.$_setFlag('insensitive', true);\n      }\n\n    },\n    ip: {\n      method(options = {}) {\n        Common.assertOptions(options, ['cidr', 'version']);\n        const {\n          cidr,\n          versions,\n          regex\n        } = Ip.regex(options);\n        const version = options.version ? versions : undefined;\n        return this.$_addRule({\n          name: 'ip',\n          args: {\n            options: {\n              cidr,\n              version\n            }\n          },\n          regex\n        });\n      },\n\n      validate(value, helpers, {\n        options\n      }, {\n        regex\n      }) {\n        if (regex.test(value)) {\n          return value;\n        }\n\n        if (options.version) {\n          return helpers.error('string.ipVersion', {\n            value,\n            cidr: options.cidr,\n            version: options.version\n          });\n        }\n\n        return helpers.error('string.ip', {\n          value,\n          cidr: options.cidr\n        });\n      }\n\n    },\n    isoDate: {\n      method() {\n        return this.$_addRule('isoDate');\n      },\n\n      validate(value, {\n        error\n      }) {\n        if (internals.isoDate(value)) {\n          return value;\n        }\n\n        return error('string.isoDate');\n      }\n\n    },\n    isoDuration: {\n      method() {\n        return this.$_addRule('isoDuration');\n      },\n\n      validate(value, helpers) {\n        if (internals.isoDurationRegex.test(value)) {\n          return value;\n        }\n\n        return helpers.error('string.isoDuration');\n      }\n\n    },\n    length: {\n      method(limit, encoding) {\n        return internals.length(this, 'length', limit, '=', encoding);\n      },\n\n      validate(value, helpers, {\n        limit,\n        encoding\n      }, {\n        name,\n        operator,\n        args\n      }) {\n        const length = encoding ? Buffer && Buffer.byteLength(value, encoding) : value.length; // $lab:coverage:ignore$\n\n        if (Common.compare(length, limit, operator)) {\n          return value;\n        }\n\n        return helpers.error('string.' + name, {\n          limit: args.limit,\n          value,\n          encoding\n        });\n      },\n\n      args: [{\n        name: 'limit',\n        ref: true,\n        assert: Common.limit,\n        message: 'must be a positive integer'\n      }, 'encoding']\n    },\n    lowercase: {\n      method() {\n        return this.case('lower');\n      }\n\n    },\n    max: {\n      method(limit, encoding) {\n        return internals.length(this, 'max', limit, '<=', encoding);\n      },\n\n      args: ['limit', 'encoding']\n    },\n    min: {\n      method(limit, encoding) {\n        return internals.length(this, 'min', limit, '>=', encoding);\n      },\n\n      args: ['limit', 'encoding']\n    },\n    normalize: {\n      method(form = 'NFC') {\n        Assert(internals.normalizationForms.includes(form), 'normalization form must be one of ' + internals.normalizationForms.join(', '));\n        return this.$_addRule({\n          name: 'normalize',\n          args: {\n            form\n          }\n        });\n      },\n\n      validate(value, {\n        error\n      }, {\n        form\n      }) {\n        if (value === value.normalize(form)) {\n          return value;\n        }\n\n        return error('string.normalize', {\n          value,\n          form\n        });\n      },\n\n      convert: true\n    },\n    pattern: {\n      alias: 'regex',\n\n      method(regex, options = {}) {\n        Assert(regex instanceof RegExp, 'regex must be a RegExp');\n        Assert(!regex.flags.includes('g') && !regex.flags.includes('y'), 'regex should not use global or sticky mode');\n\n        if (typeof options === 'string') {\n          options = {\n            name: options\n          };\n        }\n\n        Common.assertOptions(options, ['invert', 'name']);\n        const errorCode = ['string.pattern', options.invert ? '.invert' : '', options.name ? '.name' : '.base'].join('');\n        return this.$_addRule({\n          name: 'pattern',\n          args: {\n            regex,\n            options\n          },\n          errorCode\n        });\n      },\n\n      validate(value, helpers, {\n        regex,\n        options\n      }, {\n        errorCode\n      }) {\n        const patternMatch = regex.test(value);\n\n        if (patternMatch ^ options.invert) {\n          return value;\n        }\n\n        return helpers.error(errorCode, {\n          name: options.name,\n          regex,\n          value\n        });\n      },\n\n      args: ['regex', 'options'],\n      multi: true\n    },\n    replace: {\n      method(pattern, replacement) {\n        if (typeof pattern === 'string') {\n          pattern = new RegExp(EscapeRegex(pattern), 'g');\n        }\n\n        Assert(pattern instanceof RegExp, 'pattern must be a RegExp');\n        Assert(typeof replacement === 'string', 'replacement must be a String');\n        const obj = this.clone();\n\n        if (!obj.$_terms.replacements) {\n          obj.$_terms.replacements = [];\n        }\n\n        obj.$_terms.replacements.push({\n          pattern,\n          replacement\n        });\n        return obj;\n      }\n\n    },\n    token: {\n      method() {\n        return this.$_addRule('token');\n      },\n\n      validate(value, helpers) {\n        if (/^\\w+$/.test(value)) {\n          return value;\n        }\n\n        return helpers.error('string.token');\n      }\n\n    },\n    trim: {\n      method(enabled = true) {\n        Assert(typeof enabled === 'boolean', 'enabled must be a boolean');\n        return this.$_addRule({\n          name: 'trim',\n          args: {\n            enabled\n          }\n        });\n      },\n\n      validate(value, helpers, {\n        enabled\n      }) {\n        if (!enabled || value === value.trim()) {\n          return value;\n        }\n\n        return helpers.error('string.trim');\n      },\n\n      convert: true\n    },\n    truncate: {\n      method(enabled = true) {\n        Assert(typeof enabled === 'boolean', 'enabled must be a boolean');\n        return this.$_setFlag('truncate', enabled);\n      }\n\n    },\n    uppercase: {\n      method() {\n        return this.case('upper');\n      }\n\n    },\n    uri: {\n      method(options = {}) {\n        Common.assertOptions(options, ['allowRelative', 'allowQuerySquareBrackets', 'domain', 'relativeOnly', 'scheme']);\n\n        if (options.domain) {\n          Common.assertOptions(options.domain, ['allowUnicode', 'maxDomainSegments', 'minDomainSegments', 'tlds']);\n        }\n\n        const {\n          regex,\n          scheme\n        } = Uri.regex(options);\n        const domain = options.domain ? internals.addressOptions(options.domain) : null;\n        return this.$_addRule({\n          name: 'uri',\n          args: {\n            options\n          },\n          regex,\n          domain,\n          scheme\n        });\n      },\n\n      validate(value, helpers, {\n        options\n      }, {\n        regex,\n        domain,\n        scheme\n      }) {\n        if (['http:/', 'https:/'].includes(value)) {\n          // scheme:/ is technically valid but makes no sense\n          return helpers.error('string.uri');\n        }\n\n        const match = regex.exec(value);\n\n        if (match) {\n          const matched = match[1] || match[2];\n\n          if (domain && (!options.allowRelative || matched) && !Domain.isValid(matched, domain)) {\n            return helpers.error('string.domain', {\n              value: matched\n            });\n          }\n\n          return value;\n        }\n\n        if (options.relativeOnly) {\n          return helpers.error('string.uriRelativeOnly');\n        }\n\n        if (options.scheme) {\n          return helpers.error('string.uriCustomScheme', {\n            scheme,\n            value\n          });\n        }\n\n        return helpers.error('string.uri');\n      }\n\n    }\n  },\n  manifest: {\n    build(obj, desc) {\n      if (desc.replacements) {\n        for (const {\n          pattern,\n          replacement\n        } of desc.replacements) {\n          obj = obj.replace(pattern, replacement);\n        }\n      }\n\n      return obj;\n    }\n\n  },\n  messages: {\n    'string.alphanum': '{{#label}} must only contain alpha-numeric characters',\n    'string.base': '{{#label}} must be a string',\n    'string.base64': '{{#label}} must be a valid base64 string',\n    'string.creditCard': '{{#label}} must be a credit card',\n    'string.dataUri': '{{#label}} must be a valid dataUri string',\n    'string.domain': '{{#label}} must contain a valid domain name',\n    'string.email': '{{#label}} must be a valid email',\n    'string.empty': '{{#label}} is not allowed to be empty',\n    'string.guid': '{{#label}} must be a valid GUID',\n    'string.hex': '{{#label}} must only contain hexadecimal characters',\n    'string.hexAlign': '{{#label}} hex decoded representation must be byte aligned',\n    'string.hostname': '{{#label}} must be a valid hostname',\n    'string.ip': '{{#label}} must be a valid ip address with a {{#cidr}} CIDR',\n    'string.ipVersion': '{{#label}} must be a valid ip address of one of the following versions {{#version}} with a {{#cidr}} CIDR',\n    'string.isoDate': '{{#label}} must be in iso format',\n    'string.isoDuration': '{{#label}} must be a valid ISO 8601 duration',\n    'string.length': '{{#label}} length must be {{#limit}} characters long',\n    'string.lowercase': '{{#label}} must only contain lowercase characters',\n    'string.max': '{{#label}} length must be less than or equal to {{#limit}} characters long',\n    'string.min': '{{#label}} length must be at least {{#limit}} characters long',\n    'string.normalize': '{{#label}} must be unicode normalized in the {{#form}} form',\n    'string.token': '{{#label}} must only contain alpha-numeric and underscore characters',\n    'string.pattern.base': '{{#label}} with value {:[.]} fails to match the required pattern: {{#regex}}',\n    'string.pattern.name': '{{#label}} with value {:[.]} fails to match the {{#name}} pattern',\n    'string.pattern.invert.base': '{{#label}} with value {:[.]} matches the inverted pattern: {{#regex}}',\n    'string.pattern.invert.name': '{{#label}} with value {:[.]} matches the inverted {{#name}} pattern',\n    'string.trim': '{{#label}} must not have leading or trailing whitespace',\n    'string.uri': '{{#label}} must be a valid uri',\n    'string.uriCustomScheme': '{{#label}} must be a valid uri with a scheme matching the {{#scheme}} pattern',\n    'string.uriRelativeOnly': '{{#label}} must be a valid relative uri',\n    'string.uppercase': '{{#label}} must only contain uppercase characters'\n  }\n}); // Helpers\n\ninternals.addressOptions = function (options) {\n  if (!options) {\n    return options;\n  } // minDomainSegments\n\n\n  Assert(options.minDomainSegments === undefined || Number.isSafeInteger(options.minDomainSegments) && options.minDomainSegments > 0, 'minDomainSegments must be a positive integer'); // maxDomainSegments\n\n  Assert(options.maxDomainSegments === undefined || Number.isSafeInteger(options.maxDomainSegments) && options.maxDomainSegments > 0, 'maxDomainSegments must be a positive integer'); // tlds\n\n  if (options.tlds === false) {\n    return options;\n  }\n\n  if (options.tlds === true || options.tlds === undefined) {\n    Assert(internals.tlds, 'Built-in TLD list disabled');\n    return Object.assign({}, options, internals.tlds);\n  }\n\n  Assert(typeof options.tlds === 'object', 'tlds must be true, false, or an object');\n  const deny = options.tlds.deny;\n\n  if (deny) {\n    if (Array.isArray(deny)) {\n      options = Object.assign({}, options, {\n        tlds: {\n          deny: new Set(deny)\n        }\n      });\n    }\n\n    Assert(options.tlds.deny instanceof Set, 'tlds.deny must be an array, Set, or boolean');\n    Assert(!options.tlds.allow, 'Cannot specify both tlds.allow and tlds.deny lists');\n    internals.validateTlds(options.tlds.deny, 'tlds.deny');\n    return options;\n  }\n\n  const allow = options.tlds.allow;\n\n  if (!allow) {\n    return options;\n  }\n\n  if (allow === true) {\n    Assert(internals.tlds, 'Built-in TLD list disabled');\n    return Object.assign({}, options, internals.tlds);\n  }\n\n  if (Array.isArray(allow)) {\n    options = Object.assign({}, options, {\n      tlds: {\n        allow: new Set(allow)\n      }\n    });\n  }\n\n  Assert(options.tlds.allow instanceof Set, 'tlds.allow must be an array, Set, or boolean');\n  internals.validateTlds(options.tlds.allow, 'tlds.allow');\n  return options;\n};\n\ninternals.validateTlds = function (set, source) {\n  for (const tld of set) {\n    Assert(Domain.isValid(tld, {\n      minDomainSegments: 1,\n      maxDomainSegments: 1\n    }), `${source} must contain valid top level domain names`);\n  }\n};\n\ninternals.isoDate = function (value) {\n  if (!Common.isIsoDate(value)) {\n    return null;\n  }\n\n  if (/.*T.*[+-]\\d\\d$/.test(value)) {\n    // Add missing trailing zeros to timeshift\n    value += '00';\n  }\n\n  const date = new Date(value);\n\n  if (isNaN(date.getTime())) {\n    return null;\n  }\n\n  return date.toISOString();\n};\n\ninternals.length = function (schema, name, limit, operator, encoding) {\n  Assert(!encoding || Buffer && Buffer.isEncoding(encoding), 'Invalid encoding:', encoding); // $lab:coverage:ignore$\n\n  return schema.$_addRule({\n    name,\n    method: 'length',\n    args: {\n      limit,\n      encoding\n    },\n    operator\n  });\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/lib/types/string.js?");

/***/ }),

/***/ "./node_modules/joi/lib/types/symbol.js":
/*!**********************************************!*\
  !*** ./node_modules/joi/lib/types/symbol.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"./node_modules/@hapi/hoek/lib/assert.js\");\n\nconst Any = __webpack_require__(/*! ./any */ \"./node_modules/joi/lib/types/any.js\");\n\nconst internals = {};\ninternals.Map = class extends Map {\n  slice() {\n    return new internals.Map(this);\n  }\n\n};\nmodule.exports = Any.extend({\n  type: 'symbol',\n  terms: {\n    map: {\n      init: new internals.Map()\n    }\n  },\n  coerce: {\n    method(value, {\n      schema,\n      error\n    }) {\n      const lookup = schema.$_terms.map.get(value);\n\n      if (lookup) {\n        value = lookup;\n      }\n\n      if (!schema._flags.only || typeof value === 'symbol') {\n        return {\n          value\n        };\n      }\n\n      return {\n        value,\n        errors: error('symbol.map', {\n          map: schema.$_terms.map\n        })\n      };\n    }\n\n  },\n\n  validate(value, {\n    error\n  }) {\n    if (typeof value !== 'symbol') {\n      return {\n        value,\n        errors: error('symbol.base')\n      };\n    }\n  },\n\n  rules: {\n    map: {\n      method(iterable) {\n        if (iterable && !iterable[Symbol.iterator] && typeof iterable === 'object') {\n          iterable = Object.entries(iterable);\n        }\n\n        Assert(iterable && iterable[Symbol.iterator], 'Iterable must be an iterable or object');\n        const obj = this.clone();\n        const symbols = [];\n\n        for (const entry of iterable) {\n          Assert(entry && entry[Symbol.iterator], 'Entry must be an iterable');\n          const [key, value] = entry;\n          Assert(typeof key !== 'object' && typeof key !== 'function' && typeof key !== 'symbol', 'Key must not be of type object, function, or Symbol');\n          Assert(typeof value === 'symbol', 'Value must be a Symbol');\n          obj.$_terms.map.set(key, value);\n          symbols.push(value);\n        }\n\n        return obj.valid(...symbols);\n      }\n\n    }\n  },\n  manifest: {\n    build(obj, desc) {\n      if (desc.map) {\n        obj = obj.map(desc.map);\n      }\n\n      return obj;\n    }\n\n  },\n  messages: {\n    'symbol.base': '{{#label}} must be a symbol',\n    'symbol.map': '{{#label}} must be one of {{#map}}'\n  }\n});\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/lib/types/symbol.js?");

/***/ }),

/***/ "./node_modules/joi/lib/validator.js":
/*!*******************************************!*\
  !*** ./node_modules/joi/lib/validator.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"./node_modules/@hapi/hoek/lib/assert.js\");\n\nconst Clone = __webpack_require__(/*! @hapi/hoek/lib/clone */ \"./node_modules/@hapi/hoek/lib/clone.js\");\n\nconst Ignore = __webpack_require__(/*! @hapi/hoek/lib/ignore */ \"./node_modules/@hapi/hoek/lib/ignore.js\");\n\nconst Reach = __webpack_require__(/*! @hapi/hoek/lib/reach */ \"./node_modules/@hapi/hoek/lib/reach.js\");\n\nconst Common = __webpack_require__(/*! ./common */ \"./node_modules/joi/lib/common.js\");\n\nconst Errors = __webpack_require__(/*! ./errors */ \"./node_modules/joi/lib/errors.js\");\n\nconst State = __webpack_require__(/*! ./state */ \"./node_modules/joi/lib/state.js\");\n\nconst internals = {\n  result: Symbol('result')\n};\n\nexports.entry = function (value, schema, prefs) {\n  let settings = Common.defaults;\n\n  if (prefs) {\n    Assert(prefs.warnings === undefined, 'Cannot override warnings preference in synchronous validation');\n    Assert(prefs.artifacts === undefined, 'Cannot override artifacts preference in synchronous validation');\n    settings = Common.preferences(Common.defaults, prefs);\n  }\n\n  const result = internals.entry(value, schema, settings);\n  Assert(!result.mainstay.externals.length, 'Schema with external rules must use validateAsync()');\n  const outcome = {\n    value: result.value\n  };\n\n  if (result.error) {\n    outcome.error = result.error;\n  }\n\n  if (result.mainstay.warnings.length) {\n    outcome.warning = Errors.details(result.mainstay.warnings);\n  }\n\n  if (result.mainstay.debug) {\n    outcome.debug = result.mainstay.debug;\n  }\n\n  if (result.mainstay.artifacts) {\n    outcome.artifacts = result.mainstay.artifacts;\n  }\n\n  return outcome;\n};\n\nexports.entryAsync = async function (value, schema, prefs) {\n  let settings = Common.defaults;\n\n  if (prefs) {\n    settings = Common.preferences(Common.defaults, prefs);\n  }\n\n  const result = internals.entry(value, schema, settings);\n  const mainstay = result.mainstay;\n\n  if (result.error) {\n    if (mainstay.debug) {\n      result.error.debug = mainstay.debug;\n    }\n\n    throw result.error;\n  }\n\n  if (mainstay.externals.length) {\n    let root = result.value;\n\n    for (const {\n      method,\n      path,\n      label\n    } of mainstay.externals) {\n      let node = root;\n      let key;\n      let parent;\n\n      if (path.length) {\n        key = path[path.length - 1];\n        parent = Reach(root, path.slice(0, -1));\n        node = parent[key];\n      }\n\n      try {\n        const output = await method(node, {\n          prefs\n        });\n\n        if (output === undefined || output === node) {\n          continue;\n        }\n\n        if (parent) {\n          parent[key] = output;\n        } else {\n          root = output;\n        }\n      } catch (err) {\n        err.message += ` (${label})`; // Change message to include path\n\n        throw err;\n      }\n    }\n\n    result.value = root;\n  }\n\n  if (!settings.warnings && !settings.debug && !settings.artifacts) {\n    return result.value;\n  }\n\n  const outcome = {\n    value: result.value\n  };\n\n  if (mainstay.warnings.length) {\n    outcome.warning = Errors.details(mainstay.warnings);\n  }\n\n  if (mainstay.debug) {\n    outcome.debug = mainstay.debug;\n  }\n\n  if (mainstay.artifacts) {\n    outcome.artifacts = mainstay.artifacts;\n  }\n\n  return outcome;\n};\n\ninternals.entry = function (value, schema, prefs) {\n  // Prepare state\n  const {\n    tracer,\n    cleanup\n  } = internals.tracer(schema, prefs);\n  const debug = prefs.debug ? [] : null;\n  const links = schema._ids._schemaChain ? new Map() : null;\n  const mainstay = {\n    externals: [],\n    warnings: [],\n    tracer,\n    debug,\n    links\n  };\n  const schemas = schema._ids._schemaChain ? [{\n    schema\n  }] : null;\n  const state = new State([], [], {\n    mainstay,\n    schemas\n  }); // Validate value\n\n  const result = exports.validate(value, schema, state, prefs); // Process value and errors\n\n  if (cleanup) {\n    schema.$_root.untrace();\n  }\n\n  const error = Errors.process(result.errors, value, prefs);\n  return {\n    value: result.value,\n    error,\n    mainstay\n  };\n};\n\ninternals.tracer = function (schema, prefs) {\n  if (schema.$_root._tracer) {\n    return {\n      tracer: schema.$_root._tracer._register(schema)\n    };\n  }\n\n  if (prefs.debug) {\n    Assert(schema.$_root.trace, 'Debug mode not supported');\n    return {\n      tracer: schema.$_root.trace()._register(schema),\n      cleanup: true\n    };\n  }\n\n  return {\n    tracer: internals.ignore\n  };\n};\n\nexports.validate = function (value, schema, state, prefs, overrides = {}) {\n  if (schema.$_terms.whens) {\n    schema = schema._generate(value, state, prefs).schema;\n  } // Setup state and settings\n\n\n  if (schema._preferences) {\n    prefs = internals.prefs(schema, prefs);\n  } // Cache\n\n\n  if (schema._cache && prefs.cache) {\n    const result = schema._cache.get(value);\n\n    state.mainstay.tracer.debug(state, 'validate', 'cached', !!result);\n\n    if (result) {\n      return result;\n    }\n  } // Helpers\n\n\n  const createError = (code, local, localState) => schema.$_createError(code, value, local, localState || state, prefs);\n\n  const helpers = {\n    original: value,\n    prefs,\n    schema,\n    state,\n    error: createError,\n    errorsArray: internals.errorsArray,\n    warn: (code, local, localState) => state.mainstay.warnings.push(createError(code, local, localState)),\n    message: (messages, local) => schema.$_createError('custom', value, local, state, prefs, {\n      messages\n    })\n  }; // Prepare\n\n  state.mainstay.tracer.entry(schema, state);\n  const def = schema._definition;\n\n  if (def.prepare && value !== undefined && prefs.convert) {\n    const prepared = def.prepare(value, helpers);\n\n    if (prepared) {\n      state.mainstay.tracer.value(state, 'prepare', value, prepared.value);\n\n      if (prepared.errors) {\n        return internals.finalize(prepared.value, [].concat(prepared.errors), helpers); // Prepare error always aborts early\n      }\n\n      value = prepared.value;\n    }\n  } // Type coercion\n\n\n  if (def.coerce && value !== undefined && prefs.convert && (!def.coerce.from || def.coerce.from.includes(typeof value))) {\n    const coerced = def.coerce.method(value, helpers);\n\n    if (coerced) {\n      state.mainstay.tracer.value(state, 'coerced', value, coerced.value);\n\n      if (coerced.errors) {\n        return internals.finalize(coerced.value, [].concat(coerced.errors), helpers); // Coerce error always aborts early\n      }\n\n      value = coerced.value;\n    }\n  } // Empty value\n\n\n  const empty = schema._flags.empty;\n\n  if (empty && empty.$_match(internals.trim(value, schema), state.nest(empty), Common.defaults)) {\n    state.mainstay.tracer.value(state, 'empty', value, undefined);\n    value = undefined;\n  } // Presence requirements (required, optional, forbidden)\n\n\n  const presence = overrides.presence || schema._flags.presence || (schema._flags._endedSwitch ? null : prefs.presence);\n\n  if (value === undefined) {\n    if (presence === 'forbidden') {\n      return internals.finalize(value, null, helpers);\n    }\n\n    if (presence === 'required') {\n      return internals.finalize(value, [schema.$_createError('any.required', value, null, state, prefs)], helpers);\n    }\n\n    if (presence === 'optional') {\n      if (schema._flags.default !== Common.symbols.deepDefault) {\n        return internals.finalize(value, null, helpers);\n      }\n\n      state.mainstay.tracer.value(state, 'default', value, {});\n      value = {};\n    }\n  } else if (presence === 'forbidden') {\n    return internals.finalize(value, [schema.$_createError('any.unknown', value, null, state, prefs)], helpers);\n  } // Allowed values\n\n\n  const errors = [];\n\n  if (schema._valids) {\n    const match = schema._valids.get(value, state, prefs, schema._flags.insensitive);\n\n    if (match) {\n      if (prefs.convert) {\n        state.mainstay.tracer.value(state, 'valids', value, match.value);\n        value = match.value;\n      }\n\n      state.mainstay.tracer.filter(schema, state, 'valid', match);\n      return internals.finalize(value, null, helpers);\n    }\n\n    if (schema._flags.only) {\n      const report = schema.$_createError('any.only', value, {\n        valids: schema._valids.values({\n          display: true\n        })\n      }, state, prefs);\n\n      if (prefs.abortEarly) {\n        return internals.finalize(value, [report], helpers);\n      }\n\n      errors.push(report);\n    }\n  } // Denied values\n\n\n  if (schema._invalids) {\n    const match = schema._invalids.get(value, state, prefs, schema._flags.insensitive);\n\n    if (match) {\n      state.mainstay.tracer.filter(schema, state, 'invalid', match);\n      const report = schema.$_createError('any.invalid', value, {\n        invalids: schema._invalids.values({\n          display: true\n        })\n      }, state, prefs);\n\n      if (prefs.abortEarly) {\n        return internals.finalize(value, [report], helpers);\n      }\n\n      errors.push(report);\n    }\n  } // Base type\n\n\n  if (def.validate) {\n    const base = def.validate(value, helpers);\n\n    if (base) {\n      state.mainstay.tracer.value(state, 'base', value, base.value);\n      value = base.value;\n\n      if (base.errors) {\n        if (!Array.isArray(base.errors)) {\n          errors.push(base.errors);\n          return internals.finalize(value, errors, helpers); // Base error always aborts early\n        }\n\n        if (base.errors.length) {\n          errors.push(...base.errors);\n          return internals.finalize(value, errors, helpers); // Base error always aborts early\n        }\n      }\n    }\n  } // Validate tests\n\n\n  if (!schema._rules.length) {\n    return internals.finalize(value, errors, helpers);\n  }\n\n  return internals.rules(value, errors, helpers);\n};\n\ninternals.rules = function (value, errors, helpers) {\n  const {\n    schema,\n    state,\n    prefs\n  } = helpers;\n\n  for (const rule of schema._rules) {\n    const definition = schema._definition.rules[rule.method]; // Skip rules that are also applied in coerce step\n\n    if (definition.convert && prefs.convert) {\n      state.mainstay.tracer.log(schema, state, 'rule', rule.name, 'full');\n      continue;\n    } // Resolve references\n\n\n    let ret;\n    let args = rule.args;\n\n    if (rule._resolve.length) {\n      args = Object.assign({}, args); // Shallow copy\n\n      for (const key of rule._resolve) {\n        const resolver = definition.argsByName.get(key);\n        const resolved = args[key].resolve(value, state, prefs);\n        const normalized = resolver.normalize ? resolver.normalize(resolved) : resolved;\n        const invalid = Common.validateArg(normalized, null, resolver);\n\n        if (invalid) {\n          ret = schema.$_createError('any.ref', resolved, {\n            arg: key,\n            ref: args[key],\n            reason: invalid\n          }, state, prefs);\n          break;\n        }\n\n        args[key] = normalized;\n      }\n    } // Test rule\n\n\n    ret = ret || definition.validate(value, helpers, args, rule); // Use ret if already set to reference error\n\n    const result = internals.rule(ret, rule);\n\n    if (result.errors) {\n      state.mainstay.tracer.log(schema, state, 'rule', rule.name, 'error');\n\n      if (rule.warn) {\n        state.mainstay.warnings.push(...result.errors);\n        continue;\n      }\n\n      if (prefs.abortEarly) {\n        return internals.finalize(value, result.errors, helpers);\n      }\n\n      errors.push(...result.errors);\n    } else {\n      state.mainstay.tracer.log(schema, state, 'rule', rule.name, 'pass');\n      state.mainstay.tracer.value(state, 'rule', value, result.value, rule.name);\n      value = result.value;\n    }\n  }\n\n  return internals.finalize(value, errors, helpers);\n};\n\ninternals.rule = function (ret, rule) {\n  if (ret instanceof Errors.Report) {\n    internals.error(ret, rule);\n    return {\n      errors: [ret],\n      value: null\n    };\n  }\n\n  if (Array.isArray(ret) && ret[Common.symbols.errors]) {\n    ret.forEach(report => internals.error(report, rule));\n    return {\n      errors: ret,\n      value: null\n    };\n  }\n\n  return {\n    errors: null,\n    value: ret\n  };\n};\n\ninternals.error = function (report, rule) {\n  if (rule.message) {\n    report._setTemplate(rule.message);\n  }\n\n  return report;\n};\n\ninternals.finalize = function (value, errors, helpers) {\n  errors = errors || [];\n  const {\n    schema,\n    state,\n    prefs\n  } = helpers; // Failover value\n\n  if (errors.length) {\n    const failover = internals.default('failover', undefined, errors, helpers);\n\n    if (failover !== undefined) {\n      state.mainstay.tracer.value(state, 'failover', value, failover);\n      value = failover;\n      errors = [];\n    }\n  } // Error override\n\n\n  if (errors.length && schema._flags.error) {\n    if (typeof schema._flags.error === 'function') {\n      errors = schema._flags.error(errors);\n\n      if (!Array.isArray(errors)) {\n        errors = [errors];\n      }\n\n      for (const error of errors) {\n        Assert(error instanceof Error || error instanceof Errors.Report, 'error() must return an Error object');\n      }\n    } else {\n      errors = [schema._flags.error];\n    }\n  } // Default\n\n\n  if (value === undefined) {\n    const defaulted = internals.default('default', value, errors, helpers);\n    state.mainstay.tracer.value(state, 'default', value, defaulted);\n    value = defaulted;\n  } // Cast\n\n\n  if (schema._flags.cast && value !== undefined) {\n    const caster = schema._definition.cast[schema._flags.cast];\n\n    if (caster.from(value)) {\n      const casted = caster.to(value, helpers);\n      state.mainstay.tracer.value(state, 'cast', value, casted, schema._flags.cast);\n      value = casted;\n    }\n  } // Externals\n\n\n  if (schema.$_terms.externals && prefs.externals && prefs._externals !== false) {\n    // Disabled for matching\n    for (const {\n      method\n    } of schema.$_terms.externals) {\n      state.mainstay.externals.push({\n        method,\n        path: state.path,\n        label: Errors.label(schema._flags, state, prefs)\n      });\n    }\n  } // Result\n\n\n  const result = {\n    value,\n    errors: errors.length ? errors : null\n  };\n\n  if (schema._flags.result) {\n    result.value = schema._flags.result === 'strip' ? undefined :\n    /* raw */\n    helpers.original;\n    state.mainstay.tracer.value(state, schema._flags.result, value, result.value);\n    state.shadow(value, schema._flags.result);\n  } // Cache\n\n\n  if (schema._cache && prefs.cache !== false && !schema._refs.length) {\n    schema._cache.set(helpers.original, result);\n  } // Artifacts\n\n\n  if (value !== undefined && !result.errors && schema._flags.artifact !== undefined) {\n    state.mainstay.artifacts = state.mainstay.artifacts || new Map();\n\n    if (!state.mainstay.artifacts.has(schema._flags.artifact)) {\n      state.mainstay.artifacts.set(schema._flags.artifact, []);\n    }\n\n    state.mainstay.artifacts.get(schema._flags.artifact).push(state.path);\n  }\n\n  return result;\n};\n\ninternals.prefs = function (schema, prefs) {\n  const isDefaultOptions = prefs === Common.defaults;\n\n  if (isDefaultOptions && schema._preferences[Common.symbols.prefs]) {\n    return schema._preferences[Common.symbols.prefs];\n  }\n\n  prefs = Common.preferences(prefs, schema._preferences);\n\n  if (isDefaultOptions) {\n    schema._preferences[Common.symbols.prefs] = prefs;\n  }\n\n  return prefs;\n};\n\ninternals.default = function (flag, value, errors, helpers) {\n  const {\n    schema,\n    state,\n    prefs\n  } = helpers;\n  const source = schema._flags[flag];\n\n  if (prefs.noDefaults || source === undefined) {\n    return value;\n  }\n\n  state.mainstay.tracer.log(schema, state, 'rule', flag, 'full');\n\n  if (!source) {\n    return source;\n  }\n\n  if (typeof source === 'function') {\n    const args = source.length ? [Clone(state.ancestors[0]), helpers] : [];\n\n    try {\n      return source(...args);\n    } catch (err) {\n      errors.push(schema.$_createError(`any.${flag}`, null, {\n        error: err\n      }, state, prefs));\n      return;\n    }\n  }\n\n  if (typeof source !== 'object') {\n    return source;\n  }\n\n  if (source[Common.symbols.literal]) {\n    return source.literal;\n  }\n\n  if (Common.isResolvable(source)) {\n    return source.resolve(value, state, prefs);\n  }\n\n  return Clone(source);\n};\n\ninternals.trim = function (value, schema) {\n  if (typeof value !== 'string') {\n    return value;\n  }\n\n  const trim = schema.$_getRule('trim');\n\n  if (!trim || !trim.args.enabled) {\n    return value;\n  }\n\n  return value.trim();\n};\n\ninternals.ignore = {\n  active: false,\n  debug: Ignore,\n  entry: Ignore,\n  filter: Ignore,\n  log: Ignore,\n  resolve: Ignore,\n  value: Ignore\n};\n\ninternals.errorsArray = function () {\n  const errors = [];\n  errors[Common.symbols.errors] = true;\n  return errors;\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/lib/validator.js?");

/***/ }),

/***/ "./node_modules/joi/lib/values.js":
/*!****************************************!*\
  !*** ./node_modules/joi/lib/values.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"./node_modules/@hapi/hoek/lib/assert.js\");\n\nconst DeepEqual = __webpack_require__(/*! @hapi/hoek/lib/deepEqual */ \"./node_modules/@hapi/hoek/lib/deepEqual.js\");\n\nconst Common = __webpack_require__(/*! ./common */ \"./node_modules/joi/lib/common.js\");\n\nconst internals = {};\nmodule.exports = internals.Values = class {\n  constructor(values, refs) {\n    this._values = new Set(values);\n    this._refs = new Set(refs);\n    this._lowercase = internals.lowercases(values);\n    this._override = false;\n  }\n\n  get length() {\n    return this._values.size + this._refs.size;\n  }\n\n  add(value, refs) {\n    // Reference\n    if (Common.isResolvable(value)) {\n      if (!this._refs.has(value)) {\n        this._refs.add(value);\n\n        if (refs) {\n          // Skipped in a merge\n          refs.register(value);\n        }\n      }\n\n      return;\n    } // Value\n\n\n    if (!this.has(value, null, null, false)) {\n      this._values.add(value);\n\n      if (typeof value === 'string') {\n        this._lowercase.set(value.toLowerCase(), value);\n      }\n    }\n  }\n\n  static merge(target, source, remove) {\n    target = target || new internals.Values();\n\n    if (source) {\n      if (source._override) {\n        return source.clone();\n      }\n\n      for (const item of [...source._values, ...source._refs]) {\n        target.add(item);\n      }\n    }\n\n    if (remove) {\n      for (const item of [...remove._values, ...remove._refs]) {\n        target.remove(item);\n      }\n    }\n\n    return target.length ? target : null;\n  }\n\n  remove(value) {\n    // Reference\n    if (Common.isResolvable(value)) {\n      this._refs.delete(value);\n\n      return;\n    } // Value\n\n\n    this._values.delete(value);\n\n    if (typeof value === 'string') {\n      this._lowercase.delete(value.toLowerCase());\n    }\n  }\n\n  has(value, state, prefs, insensitive) {\n    return !!this.get(value, state, prefs, insensitive);\n  }\n\n  get(value, state, prefs, insensitive) {\n    if (!this.length) {\n      return false;\n    } // Simple match\n\n\n    if (this._values.has(value)) {\n      return {\n        value\n      };\n    } // Case insensitive string match\n\n\n    if (typeof value === 'string' && value && insensitive) {\n      const found = this._lowercase.get(value.toLowerCase());\n\n      if (found) {\n        return {\n          value: found\n        };\n      }\n    }\n\n    if (!this._refs.size && typeof value !== 'object') {\n      return false;\n    } // Objects\n\n\n    if (typeof value === 'object') {\n      for (const item of this._values) {\n        if (DeepEqual(item, value)) {\n          return {\n            value: item\n          };\n        }\n      }\n    } // References\n\n\n    if (state) {\n      for (const ref of this._refs) {\n        const resolved = ref.resolve(value, state, prefs, null, {\n          in: true\n        });\n\n        if (resolved === undefined) {\n          continue;\n        }\n\n        const items = !ref.in || typeof resolved !== 'object' ? [resolved] : Array.isArray(resolved) ? resolved : Object.keys(resolved);\n\n        for (const item of items) {\n          if (typeof item !== typeof value) {\n            continue;\n          }\n\n          if (insensitive && value && typeof value === 'string') {\n            if (item.toLowerCase() === value.toLowerCase()) {\n              return {\n                value: item,\n                ref\n              };\n            }\n          } else {\n            if (DeepEqual(item, value)) {\n              return {\n                value: item,\n                ref\n              };\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  override() {\n    this._override = true;\n  }\n\n  values(options) {\n    if (options && options.display) {\n      const values = [];\n\n      for (const item of [...this._values, ...this._refs]) {\n        if (item !== undefined) {\n          values.push(item);\n        }\n      }\n\n      return values;\n    }\n\n    return Array.from([...this._values, ...this._refs]);\n  }\n\n  clone() {\n    const set = new internals.Values(this._values, this._refs);\n    set._override = this._override;\n    return set;\n  }\n\n  concat(source) {\n    Assert(!source._override, 'Cannot concat override set of values');\n    const set = new internals.Values([...this._values, ...source._values], [...this._refs, ...source._refs]);\n    set._override = this._override;\n    return set;\n  }\n\n  describe() {\n    const normalized = [];\n\n    if (this._override) {\n      normalized.push({\n        override: true\n      });\n    }\n\n    for (const value of this._values.values()) {\n      normalized.push(value && typeof value === 'object' ? {\n        value\n      } : value);\n    }\n\n    for (const value of this._refs.values()) {\n      normalized.push(value.describe());\n    }\n\n    return normalized;\n  }\n\n};\ninternals.Values.prototype[Common.symbols.values] = true; // Aliases\n\ninternals.Values.prototype.slice = internals.Values.prototype.clone; // Helpers\n\ninternals.lowercases = function (from) {\n  const map = new Map();\n\n  if (from) {\n    for (const value of from) {\n      if (typeof value === 'string') {\n        map.set(value.toLowerCase(), value);\n      }\n    }\n  }\n\n  return map;\n};\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/lib/values.js?");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "./node_modules/joi/package.json":
/*!***************************************!*\
  !*** ./node_modules/joi/package.json ***!
  \***************************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('{\"name\":\"joi\",\"description\":\"Object schema validation\",\"version\":\"17.4.2\",\"repository\":\"git://github.com/sideway/joi\",\"main\":\"lib/index.js\",\"types\":\"lib/index.d.ts\",\"browser\":\"dist/joi-browser.min.js\",\"files\":[\"lib/**/*\",\"dist/*\"],\"keywords\":[\"schema\",\"validation\"],\"dependencies\":{\"@hapi/hoek\":\"^9.0.0\",\"@hapi/topo\":\"^5.0.0\",\"@sideway/address\":\"^4.1.0\",\"@sideway/formula\":\"^3.0.0\",\"@sideway/pinpoint\":\"^2.0.0\"},\"devDependencies\":{\"@hapi/bourne\":\"2.x.x\",\"@hapi/code\":\"8.x.x\",\"@hapi/joi-legacy-test\":\"npm:@hapi/joi@15.x.x\",\"@hapi/lab\":\"24.x.x\",\"typescript\":\"4.3.x\"},\"scripts\":{\"prepublishOnly\":\"cd browser && npm install && npm run build\",\"test\":\"lab -t 100 -a @hapi/code -L -Y\",\"test-cov-html\":\"lab -r html -o coverage.html -a @hapi/code\"},\"license\":\"BSD-3-Clause\"}');\n\n//# sourceURL=webpack://@webterm-tools/ipfs/./node_modules/joi/package.json?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./node_modules/joi/lib/index.js");
/******/ 	module.exports = __webpack_exports__;
/******/ 	
/******/ })()
;